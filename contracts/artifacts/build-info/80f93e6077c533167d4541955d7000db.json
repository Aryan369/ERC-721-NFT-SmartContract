{
	"id": "80f93e6077c533167d4541955d7000db",
	"_format": "hh-sol-build-info-1",
	"solcVersion": "0.8.7",
	"solcLongVersion": "0.8.7+commit.e28d00a7",
	"input": {
		"language": "Solidity",
		"sources": {
			"contracts/NFTStaking.sol": {
				"content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.4;\n\nimport \"@openzeppelin/contracts@4.7.3/access/Ownable.sol\";\nimport \"@openzeppelin/contracts@4.7.3/security/ReentrancyGuard.sol\";\nimport \"@openzeppelin/contracts@4.7.3/token/ERC721/utils/ERC721Holder.sol\";\nimport \"@openzeppelin/contracts@4.7.3/token/ERC721/IERC721.sol\";\nimport \"@openzeppelin/contracts@4.7.3/utils/Counters.sol\";\n\ncontract SacredTemple is Ownable, ERC721Holder, ReentrancyGuard {\n    IERC721 _nftContract;\n\n    using Counters for Counters.Counter;\n    Counters.Counter private _stakedNFTCounter;\n\n    event NFTStaked(address owner, uint256 tokenId, uint256 value);\n    event NFTUnstaked(address owner, uint256 tokenId, uint256 value);\n    event Claimed(address owner, uint256 amount);\n\n    mapping (uint256 => address) public tokenOwnedBy;\n    mapping (address => uint256) public rewards;\n\n    constructor (IERC721 nftContract_) {\n        _nftContract = nftContract_;\n    }\n\n    function stake(uint256 tokenId) external {\n        _nftContract.safeTransferFrom(msg.sender, address(this), tokenId);\n        tokenOwnedBy[tokenId] = msg.sender;\n        _stakedNFTCounter.increment();\n    }\n\n    function unstake(uint256 tokenId) nonReentrant external {\n        require(tokenOwnedBy[tokenId] == msg.sender, \"You are not the owner.\");\n        delete tokenOwnedBy[tokenId];\n        _stakedNFTCounter.decrement();\n        _nftContract.safeTransferFrom(address(this), msg.sender, tokenId);\n    }\n\n    receive() external payable {\n        // uint256 share = msg.value / _stakedNFTCounter.current();\n    }\n}"
			},
			"@openzeppelin/contracts@4.7.3/utils/Counters.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Counters.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @title Counters\n * @author Matt Condon (@shrugs)\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\n *\n * Include with `using Counters for Counters.Counter;`\n */\nlibrary Counters {\n    struct Counter {\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\n        uint256 _value; // default: 0\n    }\n\n    function current(Counter storage counter) internal view returns (uint256) {\n        return counter._value;\n    }\n\n    function increment(Counter storage counter) internal {\n        unchecked {\n            counter._value += 1;\n        }\n    }\n\n    function decrement(Counter storage counter) internal {\n        uint256 value = counter._value;\n        require(value > 0, \"Counter: decrement overflow\");\n        unchecked {\n            counter._value = value - 1;\n        }\n    }\n\n    function reset(Counter storage counter) internal {\n        counter._value = 0;\n    }\n}\n"
			},
			"@openzeppelin/contracts@4.7.3/token/ERC721/IERC721.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC721/IERC721.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../../utils/introspection/IERC165.sol\";\n\n/**\n * @dev Required interface of an ERC721 compliant contract.\n */\ninterface IERC721 is IERC165 {\n    /**\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\n     */\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\n     */\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\n\n    /**\n     * @dev Returns the number of tokens in ``owner``'s account.\n     */\n    function balanceOf(address owner) external view returns (uint256 balance);\n\n    /**\n     * @dev Returns the owner of the `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function ownerOf(uint256 tokenId) external view returns (address owner);\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes calldata data\n    ) external;\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Transfers `tokenId` token from `from` to `to`.\n     *\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\n     * The approval is cleared when the token is transferred.\n     *\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\n     *\n     * Requirements:\n     *\n     * - The caller must own the token or be an approved operator.\n     * - `tokenId` must exist.\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address to, uint256 tokenId) external;\n\n    /**\n     * @dev Approve or remove `operator` as an operator for the caller.\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\n     *\n     * Requirements:\n     *\n     * - The `operator` cannot be the caller.\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function setApprovalForAll(address operator, bool _approved) external;\n\n    /**\n     * @dev Returns the account approved for `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function getApproved(uint256 tokenId) external view returns (address operator);\n\n    /**\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\n     *\n     * See {setApprovalForAll}\n     */\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\n}\n"
			},
			"@openzeppelin/contracts@4.7.3/token/ERC721/utils/ERC721Holder.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/utils/ERC721Holder.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC721Receiver.sol\";\n\n/**\n * @dev Implementation of the {IERC721Receiver} interface.\n *\n * Accepts all token transfers.\n * Make sure the contract is able to use its token with {IERC721-safeTransferFrom}, {IERC721-approve} or {IERC721-setApprovalForAll}.\n */\ncontract ERC721Holder is IERC721Receiver {\n    /**\n     * @dev See {IERC721Receiver-onERC721Received}.\n     *\n     * Always returns `IERC721Receiver.onERC721Received.selector`.\n     */\n    function onERC721Received(\n        address,\n        address,\n        uint256,\n        bytes memory\n    ) public virtual override returns (bytes4) {\n        return this.onERC721Received.selector;\n    }\n}\n"
			},
			"@openzeppelin/contracts@4.7.3/security/ReentrancyGuard.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuard {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant _NOT_ENTERED = 1;\n    uint256 private constant _ENTERED = 2;\n\n    uint256 private _status;\n\n    constructor() {\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and making it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        // On the first call to nonReentrant, _notEntered will be true\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\n\n        // Any calls to nonReentrant after this point will fail\n        _status = _ENTERED;\n\n        _;\n\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = _NOT_ENTERED;\n    }\n}\n"
			},
			"@openzeppelin/contracts@4.7.3/access/Ownable.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
			},
			"@openzeppelin/contracts@4.7.3/token/ERC721/IERC721Receiver.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @title ERC721 token receiver interface\n * @dev Interface for any contract that wants to support safeTransfers\n * from ERC721 asset contracts.\n */\ninterface IERC721Receiver {\n    /**\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\n     * by `operator` from `from`, this function is called.\n     *\n     * It must return its Solidity selector to confirm the token transfer.\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\n     *\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\n     */\n    function onERC721Received(\n        address operator,\n        address from,\n        uint256 tokenId,\n        bytes calldata data\n    ) external returns (bytes4);\n}\n"
			},
			"@openzeppelin/contracts@4.7.3/utils/introspection/IERC165.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
			},
			"@openzeppelin/contracts@4.7.3/utils/Context.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
			}
		},
		"settings": {
			"optimizer": {
				"enabled": false,
				"runs": 200
			},
			"outputSelection": {
				"*": {
					"": [
						"ast"
					],
					"*": [
						"abi",
						"metadata",
						"devdoc",
						"userdoc",
						"storageLayout",
						"evm.legacyAssembly",
						"evm.bytecode",
						"evm.deployedBytecode",
						"evm.methodIdentifiers",
						"evm.gasEstimates",
						"evm.assembly"
					]
				}
			}
		}
	},
	"output": {
		"contracts": {
			"@openzeppelin/contracts@4.7.3/access/Ownable.sol": {
				"Ownable": {
					"abi": [
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "previousOwner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "newOwner",
									"type": "address"
								}
							],
							"name": "OwnershipTransferred",
							"type": "event"
						},
						{
							"inputs": [],
							"name": "owner",
							"outputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "renounceOwnership",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "newOwner",
									"type": "address"
								}
							],
							"name": "transferOwnership",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"details": "Contract module which provides a basic access control mechanism, where there is an account (an owner) that can be granted exclusive access to specific functions. By default, the owner account will be the one that deploys the contract. This can later be changed with {transferOwnership}. This module is used through inheritance. It will make available the modifier `onlyOwner`, which can be applied to your functions to restrict their use to the owner.",
						"kind": "dev",
						"methods": {
							"constructor": {
								"details": "Initializes the contract setting the deployer as the initial owner."
							},
							"owner()": {
								"details": "Returns the address of the current owner."
							},
							"renounceOwnership()": {
								"details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
							},
							"transferOwnership(address)": {
								"details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"owner()": "8da5cb5b",
							"renounceOwnership()": "715018a6",
							"transferOwnership(address)": "f2fde38b"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.7+commit.e28d00a7\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Contract module which provides a basic access control mechanism, where there is an account (an owner) that can be granted exclusive access to specific functions. By default, the owner account will be the one that deploys the contract. This can later be changed with {transferOwnership}. This module is used through inheritance. It will make available the modifier `onlyOwner`, which can be applied to your functions to restrict their use to the owner.\",\"kind\":\"dev\",\"methods\":{\"constructor\":{\"details\":\"Initializes the contract setting the deployer as the initial owner.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts@4.7.3/access/Ownable.sol\":\"Ownable\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts@4.7.3/access/Ownable.sol\":{\"keccak256\":\"0xa94b34880e3c1b0b931662cb1c09e5dfa6662f31cba80e07c5ee71cd135c9673\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://40fb1b5102468f783961d0af743f91b9980cf66b50d1d12009f6bb1869cea4d2\",\"dweb:/ipfs/QmYqEbJML4jB1GHbzD4cUZDtJg5wVwNm3vDJq1GbyDus8y\"]},\"@openzeppelin/contracts@4.7.3/utils/Context.sol\":{\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://6df0ddf21ce9f58271bdfaa85cde98b200ef242a05a3f85c2bc10a8294800a92\",\"dweb:/ipfs/QmRK2Y5Yc6BK7tGKkgsgn3aJEQGi5aakeSPZvS65PV8Xp3\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [
							{
								"astId": 7,
								"contract": "@openzeppelin/contracts@4.7.3/access/Ownable.sol:Ownable",
								"label": "_owner",
								"offset": 0,
								"slot": "0",
								"type": "t_address"
							}
						],
						"types": {
							"t_address": {
								"encoding": "inplace",
								"label": "address",
								"numberOfBytes": "20"
							}
						}
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"@openzeppelin/contracts@4.7.3/security/ReentrancyGuard.sol": {
				"ReentrancyGuard": {
					"abi": [],
					"devdoc": {
						"details": "Contract module that helps prevent reentrant calls to a function. Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier available, which can be applied to functions to make sure there are no nested (reentrant) calls to them. Note that because there is a single `nonReentrant` guard, functions marked as `nonReentrant` may not call one another. This can be worked around by making those functions `private`, and then adding `external` `nonReentrant` entry points to them. TIP: If you would like to learn more about reentrancy and alternative ways to protect against it, check out our blog post https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].",
						"kind": "dev",
						"methods": {},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.7+commit.e28d00a7\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Contract module that helps prevent reentrant calls to a function. Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier available, which can be applied to functions to make sure there are no nested (reentrant) calls to them. Note that because there is a single `nonReentrant` guard, functions marked as `nonReentrant` may not call one another. This can be worked around by making those functions `private`, and then adding `external` `nonReentrant` entry points to them. TIP: If you would like to learn more about reentrancy and alternative ways to protect against it, check out our blog post https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts@4.7.3/security/ReentrancyGuard.sol\":\"ReentrancyGuard\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts@4.7.3/security/ReentrancyGuard.sol\":{\"keccak256\":\"0x0e9621f60b2faabe65549f7ed0f24e8853a45c1b7990d47e8160e523683f3935\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://287a2f8d5814dd0f05f22b740f18ca8321acc21c9bd03a6cb2203ea626e2f3f2\",\"dweb:/ipfs/QmZRQv9iuwU817VuqkA2WweiaibKii69x9QxYBBEfbNEud\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [
							{
								"astId": 123,
								"contract": "@openzeppelin/contracts@4.7.3/security/ReentrancyGuard.sol:ReentrancyGuard",
								"label": "_status",
								"offset": 0,
								"slot": "0",
								"type": "t_uint256"
							}
						],
						"types": {
							"t_uint256": {
								"encoding": "inplace",
								"label": "uint256",
								"numberOfBytes": "32"
							}
						}
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"@openzeppelin/contracts@4.7.3/token/ERC721/IERC721.sol": {
				"IERC721": {
					"abi": [
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "approved",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "Approval",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "operator",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "bool",
									"name": "approved",
									"type": "bool"
								}
							],
							"name": "ApprovalForAll",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "Transfer",
							"type": "event"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "approve",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								}
							],
							"name": "balanceOf",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "balance",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "getApproved",
							"outputs": [
								{
									"internalType": "address",
									"name": "operator",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "operator",
									"type": "address"
								}
							],
							"name": "isApprovedForAll",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "ownerOf",
							"outputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "safeTransferFrom",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								},
								{
									"internalType": "bytes",
									"name": "data",
									"type": "bytes"
								}
							],
							"name": "safeTransferFrom",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "operator",
									"type": "address"
								},
								{
									"internalType": "bool",
									"name": "_approved",
									"type": "bool"
								}
							],
							"name": "setApprovalForAll",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "bytes4",
									"name": "interfaceId",
									"type": "bytes4"
								}
							],
							"name": "supportsInterface",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "transferFrom",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"details": "Required interface of an ERC721 compliant contract.",
						"events": {
							"Approval(address,address,uint256)": {
								"details": "Emitted when `owner` enables `approved` to manage the `tokenId` token."
							},
							"ApprovalForAll(address,address,bool)": {
								"details": "Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets."
							},
							"Transfer(address,address,uint256)": {
								"details": "Emitted when `tokenId` token is transferred from `from` to `to`."
							}
						},
						"kind": "dev",
						"methods": {
							"approve(address,uint256)": {
								"details": "Gives permission to `to` to transfer `tokenId` token to another account. The approval is cleared when the token is transferred. Only a single account can be approved at a time, so approving the zero address clears previous approvals. Requirements: - The caller must own the token or be an approved operator. - `tokenId` must exist. Emits an {Approval} event."
							},
							"balanceOf(address)": {
								"details": "Returns the number of tokens in ``owner``'s account."
							},
							"getApproved(uint256)": {
								"details": "Returns the account approved for `tokenId` token. Requirements: - `tokenId` must exist."
							},
							"isApprovedForAll(address,address)": {
								"details": "Returns if the `operator` is allowed to manage all of the assets of `owner`. See {setApprovalForAll}"
							},
							"ownerOf(uint256)": {
								"details": "Returns the owner of the `tokenId` token. Requirements: - `tokenId` must exist."
							},
							"safeTransferFrom(address,address,uint256)": {
								"details": "Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients are aware of the ERC721 protocol to prevent tokens from being forever locked. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer. Emits a {Transfer} event."
							},
							"safeTransferFrom(address,address,uint256,bytes)": {
								"details": "Safely transfers `tokenId` token from `from` to `to`. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer. Emits a {Transfer} event."
							},
							"setApprovalForAll(address,bool)": {
								"details": "Approve or remove `operator` as an operator for the caller. Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller. Requirements: - The `operator` cannot be the caller. Emits an {ApprovalForAll} event."
							},
							"supportsInterface(bytes4)": {
								"details": "Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas."
							},
							"transferFrom(address,address,uint256)": {
								"details": "Transfers `tokenId` token from `from` to `to`. WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. Emits a {Transfer} event."
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"approve(address,uint256)": "095ea7b3",
							"balanceOf(address)": "70a08231",
							"getApproved(uint256)": "081812fc",
							"isApprovedForAll(address,address)": "e985e9c5",
							"ownerOf(uint256)": "6352211e",
							"safeTransferFrom(address,address,uint256)": "42842e0e",
							"safeTransferFrom(address,address,uint256,bytes)": "b88d4fde",
							"setApprovalForAll(address,bool)": "a22cb465",
							"supportsInterface(bytes4)": "01ffc9a7",
							"transferFrom(address,address,uint256)": "23b872dd"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.7+commit.e28d00a7\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Required interface of an ERC721 compliant contract.\",\"events\":{\"Approval(address,address,uint256)\":{\"details\":\"Emitted when `owner` enables `approved` to manage the `tokenId` token.\"},\"ApprovalForAll(address,address,bool)\":{\"details\":\"Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\"},\"Transfer(address,address,uint256)\":{\"details\":\"Emitted when `tokenId` token is transferred from `from` to `to`.\"}},\"kind\":\"dev\",\"methods\":{\"approve(address,uint256)\":{\"details\":\"Gives permission to `to` to transfer `tokenId` token to another account. The approval is cleared when the token is transferred. Only a single account can be approved at a time, so approving the zero address clears previous approvals. Requirements: - The caller must own the token or be an approved operator. - `tokenId` must exist. Emits an {Approval} event.\"},\"balanceOf(address)\":{\"details\":\"Returns the number of tokens in ``owner``'s account.\"},\"getApproved(uint256)\":{\"details\":\"Returns the account approved for `tokenId` token. Requirements: - `tokenId` must exist.\"},\"isApprovedForAll(address,address)\":{\"details\":\"Returns if the `operator` is allowed to manage all of the assets of `owner`. See {setApprovalForAll}\"},\"ownerOf(uint256)\":{\"details\":\"Returns the owner of the `tokenId` token. Requirements: - `tokenId` must exist.\"},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients are aware of the ERC721 protocol to prevent tokens from being forever locked. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer. Emits a {Transfer} event.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"Safely transfers `tokenId` token from `from` to `to`. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer. Emits a {Transfer} event.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"Approve or remove `operator` as an operator for the caller. Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller. Requirements: - The `operator` cannot be the caller. Emits an {ApprovalForAll} event.\"},\"supportsInterface(bytes4)\":{\"details\":\"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"Transfers `tokenId` token from `from` to `to`. WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. Emits a {Transfer} event.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts@4.7.3/token/ERC721/IERC721.sol\":\"IERC721\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts@4.7.3/token/ERC721/IERC721.sol\":{\"keccak256\":\"0xed6a749c5373af398105ce6ee3ac4763aa450ea7285d268c85d9eeca809cdb1f\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://20a97f891d06f0fe91560ea1a142aaa26fdd22bed1b51606b7d48f670deeb50f\",\"dweb:/ipfs/QmTbCtZKChpaX5H2iRiTDMcSz29GSLCpTCDgJpcMR4wg8x\"]},\"@openzeppelin/contracts@4.7.3/utils/introspection/IERC165.sol\":{\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://be161e54f24e5c6fae81a12db1a8ae87bc5ae1b0ddc805d82a1440a68455088f\",\"dweb:/ipfs/QmP7C3CHdY9urF4dEMb9wmsp1wMxHF6nhA2yQE5SKiPAdy\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"@openzeppelin/contracts@4.7.3/token/ERC721/IERC721Receiver.sol": {
				"IERC721Receiver": {
					"abi": [
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "operator",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								},
								{
									"internalType": "bytes",
									"name": "data",
									"type": "bytes"
								}
							],
							"name": "onERC721Received",
							"outputs": [
								{
									"internalType": "bytes4",
									"name": "",
									"type": "bytes4"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"details": "Interface for any contract that wants to support safeTransfers from ERC721 asset contracts.",
						"kind": "dev",
						"methods": {
							"onERC721Received(address,address,uint256,bytes)": {
								"details": "Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom} by `operator` from `from`, this function is called. It must return its Solidity selector to confirm the token transfer. If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted. The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`."
							}
						},
						"title": "ERC721 token receiver interface",
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"onERC721Received(address,address,uint256,bytes)": "150b7a02"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.7+commit.e28d00a7\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"onERC721Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Interface for any contract that wants to support safeTransfers from ERC721 asset contracts.\",\"kind\":\"dev\",\"methods\":{\"onERC721Received(address,address,uint256,bytes)\":{\"details\":\"Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom} by `operator` from `from`, this function is called. It must return its Solidity selector to confirm the token transfer. If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted. The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\"}},\"title\":\"ERC721 token receiver interface\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts@4.7.3/token/ERC721/IERC721Receiver.sol\":\"IERC721Receiver\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts@4.7.3/token/ERC721/IERC721Receiver.sol\":{\"keccak256\":\"0xa82b58eca1ee256be466e536706850163d2ec7821945abd6b4778cfb3bee37da\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://6e75cf83beb757b8855791088546b8337e9d4684e169400c20d44a515353b708\",\"dweb:/ipfs/QmYvPafLfoquiDMEj7CKHtvbgHu7TJNPSVPSCjrtjV8HjV\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"@openzeppelin/contracts@4.7.3/token/ERC721/utils/ERC721Holder.sol": {
				"ERC721Holder": {
					"abi": [
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								},
								{
									"internalType": "bytes",
									"name": "",
									"type": "bytes"
								}
							],
							"name": "onERC721Received",
							"outputs": [
								{
									"internalType": "bytes4",
									"name": "",
									"type": "bytes4"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"details": "Implementation of the {IERC721Receiver} interface. Accepts all token transfers. Make sure the contract is able to use its token with {IERC721-safeTransferFrom}, {IERC721-approve} or {IERC721-setApprovalForAll}.",
						"kind": "dev",
						"methods": {
							"onERC721Received(address,address,uint256,bytes)": {
								"details": "See {IERC721Receiver-onERC721Received}. Always returns `IERC721Receiver.onERC721Received.selector`."
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "    /* \"@openzeppelin/contracts@4.7.3/token/ERC721/utils/ERC721Holder.sol\":399:790  contract ERC721Holder is IERC721Receiver {... */\n  mstore(0x40, 0x80)\n  callvalue\n  dup1\n  iszero\n  tag_1\n  jumpi\n  0x00\n  dup1\n  revert\ntag_1:\n  pop\n  dataSize(sub_0)\n  dup1\n  dataOffset(sub_0)\n  0x00\n  codecopy\n  0x00\n  return\nstop\n\nsub_0: assembly {\n        /* \"@openzeppelin/contracts@4.7.3/token/ERC721/utils/ERC721Holder.sol\":399:790  contract ERC721Holder is IERC721Receiver {... */\n      mstore(0x40, 0x80)\n      callvalue\n      dup1\n      iszero\n      tag_1\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_1:\n      pop\n      jumpi(tag_2, lt(calldatasize, 0x04))\n      shr(0xe0, calldataload(0x00))\n      dup1\n      0x150b7a02\n      eq\n      tag_3\n      jumpi\n    tag_2:\n      0x00\n      dup1\n      revert\n        /* \"@openzeppelin/contracts@4.7.3/token/ERC721/utils/ERC721Holder.sol\":588:788  function onERC721Received(... */\n    tag_3:\n      tag_4\n      0x04\n      dup1\n      calldatasize\n      sub\n      dup2\n      add\n      swap1\n      tag_5\n      swap2\n      swap1\n      tag_6\n      jump\t// in\n    tag_5:\n      tag_7\n      jump\t// in\n    tag_4:\n      mload(0x40)\n      tag_8\n      swap2\n      swap1\n      tag_9\n      jump\t// in\n    tag_8:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      return\n    tag_7:\n        /* \"@openzeppelin/contracts@4.7.3/token/ERC721/utils/ERC721Holder.sol\":726:732  bytes4 */\n      0x00\n        /* \"@openzeppelin/contracts@4.7.3/token/ERC721/utils/ERC721Holder.sol\":751:781  this.onERC721Received.selector */\n      shl(0xe0, 0x150b7a02)\n        /* \"@openzeppelin/contracts@4.7.3/token/ERC721/utils/ERC721Holder.sol\":744:781  return this.onERC721Received.selector */\n      swap1\n      pop\n        /* \"@openzeppelin/contracts@4.7.3/token/ERC721/utils/ERC721Holder.sol\":588:788  function onERC721Received(... */\n      swap5\n      swap4\n      pop\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":7:417   */\n    tag_12:\n        /* \"#utility.yul\":84:89   */\n      0x00\n        /* \"#utility.yul\":109:174   */\n      tag_14\n        /* \"#utility.yul\":125:173   */\n      tag_15\n        /* \"#utility.yul\":166:172   */\n      dup5\n        /* \"#utility.yul\":125:173   */\n      tag_16\n      jump\t// in\n    tag_15:\n        /* \"#utility.yul\":109:174   */\n      tag_17\n      jump\t// in\n    tag_14:\n        /* \"#utility.yul\":100:174   */\n      swap1\n      pop\n        /* \"#utility.yul\":197:203   */\n      dup3\n        /* \"#utility.yul\":190:195   */\n      dup2\n        /* \"#utility.yul\":183:204   */\n      mstore\n        /* \"#utility.yul\":235:239   */\n      0x20\n        /* \"#utility.yul\":228:233   */\n      dup2\n        /* \"#utility.yul\":224:240   */\n      add\n        /* \"#utility.yul\":273:276   */\n      dup5\n        /* \"#utility.yul\":264:270   */\n      dup5\n        /* \"#utility.yul\":259:262   */\n      dup5\n        /* \"#utility.yul\":255:271   */\n      add\n        /* \"#utility.yul\":252:277   */\n      gt\n        /* \"#utility.yul\":249:361   */\n      iszero\n      tag_18\n      jumpi\n        /* \"#utility.yul\":280:359   */\n      tag_19\n      tag_20\n      jump\t// in\n    tag_19:\n        /* \"#utility.yul\":249:361   */\n    tag_18:\n        /* \"#utility.yul\":370:411   */\n      tag_21\n        /* \"#utility.yul\":404:410   */\n      dup5\n        /* \"#utility.yul\":399:402   */\n      dup3\n        /* \"#utility.yul\":394:397   */\n      dup6\n        /* \"#utility.yul\":370:411   */\n      tag_22\n      jump\t// in\n    tag_21:\n        /* \"#utility.yul\":90:417   */\n      pop\n        /* \"#utility.yul\":7:417   */\n      swap4\n      swap3\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":423:562   */\n    tag_23:\n        /* \"#utility.yul\":469:474   */\n      0x00\n        /* \"#utility.yul\":507:513   */\n      dup2\n        /* \"#utility.yul\":494:514   */\n      calldataload\n        /* \"#utility.yul\":485:514   */\n      swap1\n      pop\n        /* \"#utility.yul\":523:556   */\n      tag_25\n        /* \"#utility.yul\":550:555   */\n      dup2\n        /* \"#utility.yul\":523:556   */\n      tag_26\n      jump\t// in\n    tag_25:\n        /* \"#utility.yul\":423:562   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":581:919   */\n    tag_27:\n        /* \"#utility.yul\":636:641   */\n      0x00\n        /* \"#utility.yul\":685:688   */\n      dup3\n        /* \"#utility.yul\":678:682   */\n      0x1f\n        /* \"#utility.yul\":670:676   */\n      dup4\n        /* \"#utility.yul\":666:683   */\n      add\n        /* \"#utility.yul\":662:689   */\n      slt\n        /* \"#utility.yul\":652:774   */\n      tag_29\n      jumpi\n        /* \"#utility.yul\":693:772   */\n      tag_30\n      tag_31\n      jump\t// in\n    tag_30:\n        /* \"#utility.yul\":652:774   */\n    tag_29:\n        /* \"#utility.yul\":810:816   */\n      dup2\n        /* \"#utility.yul\":797:817   */\n      calldataload\n        /* \"#utility.yul\":835:913   */\n      tag_32\n        /* \"#utility.yul\":909:912   */\n      dup5\n        /* \"#utility.yul\":901:907   */\n      dup3\n        /* \"#utility.yul\":894:898   */\n      0x20\n        /* \"#utility.yul\":886:892   */\n      dup7\n        /* \"#utility.yul\":882:899   */\n      add\n        /* \"#utility.yul\":835:913   */\n      tag_12\n      jump\t// in\n    tag_32:\n        /* \"#utility.yul\":826:913   */\n      swap2\n      pop\n        /* \"#utility.yul\":642:919   */\n      pop\n        /* \"#utility.yul\":581:919   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":925:1064   */\n    tag_33:\n        /* \"#utility.yul\":971:976   */\n      0x00\n        /* \"#utility.yul\":1009:1015   */\n      dup2\n        /* \"#utility.yul\":996:1016   */\n      calldataload\n        /* \"#utility.yul\":987:1016   */\n      swap1\n      pop\n        /* \"#utility.yul\":1025:1058   */\n      tag_35\n        /* \"#utility.yul\":1052:1057   */\n      dup2\n        /* \"#utility.yul\":1025:1058   */\n      tag_36\n      jump\t// in\n    tag_35:\n        /* \"#utility.yul\":925:1064   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":1070:2013   */\n    tag_6:\n        /* \"#utility.yul\":1165:1171   */\n      0x00\n        /* \"#utility.yul\":1173:1179   */\n      dup1\n        /* \"#utility.yul\":1181:1187   */\n      0x00\n        /* \"#utility.yul\":1189:1195   */\n      dup1\n        /* \"#utility.yul\":1238:1241   */\n      0x80\n        /* \"#utility.yul\":1226:1235   */\n      dup6\n        /* \"#utility.yul\":1217:1224   */\n      dup8\n        /* \"#utility.yul\":1213:1236   */\n      sub\n        /* \"#utility.yul\":1209:1242   */\n      slt\n        /* \"#utility.yul\":1206:1326   */\n      iszero\n      tag_38\n      jumpi\n        /* \"#utility.yul\":1245:1324   */\n      tag_39\n      tag_40\n      jump\t// in\n    tag_39:\n        /* \"#utility.yul\":1206:1326   */\n    tag_38:\n        /* \"#utility.yul\":1365:1366   */\n      0x00\n        /* \"#utility.yul\":1390:1443   */\n      tag_41\n        /* \"#utility.yul\":1435:1442   */\n      dup8\n        /* \"#utility.yul\":1426:1432   */\n      dup3\n        /* \"#utility.yul\":1415:1424   */\n      dup9\n        /* \"#utility.yul\":1411:1433   */\n      add\n        /* \"#utility.yul\":1390:1443   */\n      tag_23\n      jump\t// in\n    tag_41:\n        /* \"#utility.yul\":1380:1443   */\n      swap5\n      pop\n        /* \"#utility.yul\":1336:1453   */\n      pop\n        /* \"#utility.yul\":1492:1494   */\n      0x20\n        /* \"#utility.yul\":1518:1571   */\n      tag_42\n        /* \"#utility.yul\":1563:1570   */\n      dup8\n        /* \"#utility.yul\":1554:1560   */\n      dup3\n        /* \"#utility.yul\":1543:1552   */\n      dup9\n        /* \"#utility.yul\":1539:1561   */\n      add\n        /* \"#utility.yul\":1518:1571   */\n      tag_23\n      jump\t// in\n    tag_42:\n        /* \"#utility.yul\":1508:1571   */\n      swap4\n      pop\n        /* \"#utility.yul\":1463:1581   */\n      pop\n        /* \"#utility.yul\":1620:1622   */\n      0x40\n        /* \"#utility.yul\":1646:1699   */\n      tag_43\n        /* \"#utility.yul\":1691:1698   */\n      dup8\n        /* \"#utility.yul\":1682:1688   */\n      dup3\n        /* \"#utility.yul\":1671:1680   */\n      dup9\n        /* \"#utility.yul\":1667:1689   */\n      add\n        /* \"#utility.yul\":1646:1699   */\n      tag_33\n      jump\t// in\n    tag_43:\n        /* \"#utility.yul\":1636:1699   */\n      swap3\n      pop\n        /* \"#utility.yul\":1591:1709   */\n      pop\n        /* \"#utility.yul\":1776:1778   */\n      0x60\n        /* \"#utility.yul\":1765:1774   */\n      dup6\n        /* \"#utility.yul\":1761:1779   */\n      add\n        /* \"#utility.yul\":1748:1780   */\n      calldataload\n        /* \"#utility.yul\":1807:1825   */\n      0xffffffffffffffff\n        /* \"#utility.yul\":1799:1805   */\n      dup2\n        /* \"#utility.yul\":1796:1826   */\n      gt\n        /* \"#utility.yul\":1793:1910   */\n      iszero\n      tag_44\n      jumpi\n        /* \"#utility.yul\":1829:1908   */\n      tag_45\n      tag_46\n      jump\t// in\n    tag_45:\n        /* \"#utility.yul\":1793:1910   */\n    tag_44:\n        /* \"#utility.yul\":1934:1996   */\n      tag_47\n        /* \"#utility.yul\":1988:1995   */\n      dup8\n        /* \"#utility.yul\":1979:1985   */\n      dup3\n        /* \"#utility.yul\":1968:1977   */\n      dup9\n        /* \"#utility.yul\":1964:1986   */\n      add\n        /* \"#utility.yul\":1934:1996   */\n      tag_27\n      jump\t// in\n    tag_47:\n        /* \"#utility.yul\":1924:1996   */\n      swap2\n      pop\n        /* \"#utility.yul\":1719:2006   */\n      pop\n        /* \"#utility.yul\":1070:2013   */\n      swap3\n      swap6\n      swap2\n      swap5\n      pop\n      swap3\n      pop\n      jump\t// out\n        /* \"#utility.yul\":2019:2134   */\n    tag_48:\n        /* \"#utility.yul\":2104:2127   */\n      tag_50\n        /* \"#utility.yul\":2121:2126   */\n      dup2\n        /* \"#utility.yul\":2104:2127   */\n      tag_51\n      jump\t// in\n    tag_50:\n        /* \"#utility.yul\":2099:2102   */\n      dup3\n        /* \"#utility.yul\":2092:2128   */\n      mstore\n        /* \"#utility.yul\":2019:2134   */\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":2140:2358   */\n    tag_9:\n        /* \"#utility.yul\":2231:2235   */\n      0x00\n        /* \"#utility.yul\":2269:2271   */\n      0x20\n        /* \"#utility.yul\":2258:2267   */\n      dup3\n        /* \"#utility.yul\":2254:2272   */\n      add\n        /* \"#utility.yul\":2246:2272   */\n      swap1\n      pop\n        /* \"#utility.yul\":2282:2351   */\n      tag_53\n        /* \"#utility.yul\":2348:2349   */\n      0x00\n        /* \"#utility.yul\":2337:2346   */\n      dup4\n        /* \"#utility.yul\":2333:2350   */\n      add\n        /* \"#utility.yul\":2324:2330   */\n      dup5\n        /* \"#utility.yul\":2282:2351   */\n      tag_48\n      jump\t// in\n    tag_53:\n        /* \"#utility.yul\":2140:2358   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":2364:2493   */\n    tag_17:\n        /* \"#utility.yul\":2398:2404   */\n      0x00\n        /* \"#utility.yul\":2425:2445   */\n      tag_55\n      tag_56\n      jump\t// in\n    tag_55:\n        /* \"#utility.yul\":2415:2445   */\n      swap1\n      pop\n        /* \"#utility.yul\":2454:2487   */\n      tag_57\n        /* \"#utility.yul\":2482:2486   */\n      dup3\n        /* \"#utility.yul\":2474:2480   */\n      dup3\n        /* \"#utility.yul\":2454:2487   */\n      tag_58\n      jump\t// in\n    tag_57:\n        /* \"#utility.yul\":2364:2493   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":2499:2574   */\n    tag_56:\n        /* \"#utility.yul\":2532:2538   */\n      0x00\n        /* \"#utility.yul\":2565:2567   */\n      0x40\n        /* \"#utility.yul\":2559:2568   */\n      mload\n        /* \"#utility.yul\":2549:2568   */\n      swap1\n      pop\n        /* \"#utility.yul\":2499:2574   */\n      swap1\n      jump\t// out\n        /* \"#utility.yul\":2580:2887   */\n    tag_16:\n        /* \"#utility.yul\":2641:2645   */\n      0x00\n        /* \"#utility.yul\":2731:2749   */\n      0xffffffffffffffff\n        /* \"#utility.yul\":2723:2729   */\n      dup3\n        /* \"#utility.yul\":2720:2750   */\n      gt\n        /* \"#utility.yul\":2717:2773   */\n      iszero\n      tag_61\n      jumpi\n        /* \"#utility.yul\":2753:2771   */\n      tag_62\n      tag_63\n      jump\t// in\n    tag_62:\n        /* \"#utility.yul\":2717:2773   */\n    tag_61:\n        /* \"#utility.yul\":2791:2820   */\n      tag_64\n        /* \"#utility.yul\":2813:2819   */\n      dup3\n        /* \"#utility.yul\":2791:2820   */\n      tag_65\n      jump\t// in\n    tag_64:\n        /* \"#utility.yul\":2783:2820   */\n      swap1\n      pop\n        /* \"#utility.yul\":2875:2879   */\n      0x20\n        /* \"#utility.yul\":2869:2873   */\n      dup2\n        /* \"#utility.yul\":2865:2880   */\n      add\n        /* \"#utility.yul\":2857:2880   */\n      swap1\n      pop\n        /* \"#utility.yul\":2580:2887   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":2893:2989   */\n    tag_66:\n        /* \"#utility.yul\":2930:2937   */\n      0x00\n        /* \"#utility.yul\":2959:2983   */\n      tag_68\n        /* \"#utility.yul\":2977:2982   */\n      dup3\n        /* \"#utility.yul\":2959:2983   */\n      tag_69\n      jump\t// in\n    tag_68:\n        /* \"#utility.yul\":2948:2983   */\n      swap1\n      pop\n        /* \"#utility.yul\":2893:2989   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":2995:3144   */\n    tag_51:\n        /* \"#utility.yul\":3031:3038   */\n      0x00\n        /* \"#utility.yul\":3071:3137   */\n      0xffffffff00000000000000000000000000000000000000000000000000000000\n        /* \"#utility.yul\":3064:3069   */\n      dup3\n        /* \"#utility.yul\":3060:3138   */\n      and\n        /* \"#utility.yul\":3049:3138   */\n      swap1\n      pop\n        /* \"#utility.yul\":2995:3144   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":3150:3276   */\n    tag_69:\n        /* \"#utility.yul\":3187:3194   */\n      0x00\n        /* \"#utility.yul\":3227:3269   */\n      0xffffffffffffffffffffffffffffffffffffffff\n        /* \"#utility.yul\":3220:3225   */\n      dup3\n        /* \"#utility.yul\":3216:3270   */\n      and\n        /* \"#utility.yul\":3205:3270   */\n      swap1\n      pop\n        /* \"#utility.yul\":3150:3276   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":3282:3359   */\n    tag_72:\n        /* \"#utility.yul\":3319:3326   */\n      0x00\n        /* \"#utility.yul\":3348:3353   */\n      dup2\n        /* \"#utility.yul\":3337:3353   */\n      swap1\n      pop\n        /* \"#utility.yul\":3282:3359   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":3365:3519   */\n    tag_22:\n        /* \"#utility.yul\":3449:3455   */\n      dup3\n        /* \"#utility.yul\":3444:3447   */\n      dup2\n        /* \"#utility.yul\":3439:3442   */\n      dup4\n        /* \"#utility.yul\":3426:3456   */\n      calldatacopy\n        /* \"#utility.yul\":3511:3512   */\n      0x00\n        /* \"#utility.yul\":3502:3508   */\n      dup4\n        /* \"#utility.yul\":3497:3500   */\n      dup4\n        /* \"#utility.yul\":3493:3509   */\n      add\n        /* \"#utility.yul\":3486:3513   */\n      mstore\n        /* \"#utility.yul\":3365:3519   */\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":3525:3806   */\n    tag_58:\n        /* \"#utility.yul\":3608:3635   */\n      tag_76\n        /* \"#utility.yul\":3630:3634   */\n      dup3\n        /* \"#utility.yul\":3608:3635   */\n      tag_65\n      jump\t// in\n    tag_76:\n        /* \"#utility.yul\":3600:3606   */\n      dup2\n        /* \"#utility.yul\":3596:3636   */\n      add\n        /* \"#utility.yul\":3738:3744   */\n      dup2\n        /* \"#utility.yul\":3726:3736   */\n      dup2\n        /* \"#utility.yul\":3723:3745   */\n      lt\n        /* \"#utility.yul\":3702:3720   */\n      0xffffffffffffffff\n        /* \"#utility.yul\":3690:3700   */\n      dup3\n        /* \"#utility.yul\":3687:3721   */\n      gt\n        /* \"#utility.yul\":3684:3746   */\n      or\n        /* \"#utility.yul\":3681:3769   */\n      iszero\n      tag_77\n      jumpi\n        /* \"#utility.yul\":3749:3767   */\n      tag_78\n      tag_63\n      jump\t// in\n    tag_78:\n        /* \"#utility.yul\":3681:3769   */\n    tag_77:\n        /* \"#utility.yul\":3789:3799   */\n      dup1\n        /* \"#utility.yul\":3785:3787   */\n      0x40\n        /* \"#utility.yul\":3778:3800   */\n      mstore\n        /* \"#utility.yul\":3568:3806   */\n      pop\n        /* \"#utility.yul\":3525:3806   */\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":3812:3992   */\n    tag_63:\n        /* \"#utility.yul\":3860:3937   */\n      0x4e487b7100000000000000000000000000000000000000000000000000000000\n        /* \"#utility.yul\":3857:3858   */\n      0x00\n        /* \"#utility.yul\":3850:3938   */\n      mstore\n        /* \"#utility.yul\":3957:3961   */\n      0x41\n        /* \"#utility.yul\":3954:3955   */\n      0x04\n        /* \"#utility.yul\":3947:3962   */\n      mstore\n        /* \"#utility.yul\":3981:3985   */\n      0x24\n        /* \"#utility.yul\":3978:3979   */\n      0x00\n        /* \"#utility.yul\":3971:3986   */\n      revert\n        /* \"#utility.yul\":3998:4115   */\n    tag_31:\n        /* \"#utility.yul\":4107:4108   */\n      0x00\n        /* \"#utility.yul\":4104:4105   */\n      dup1\n        /* \"#utility.yul\":4097:4109   */\n      revert\n        /* \"#utility.yul\":4121:4238   */\n    tag_20:\n        /* \"#utility.yul\":4230:4231   */\n      0x00\n        /* \"#utility.yul\":4227:4228   */\n      dup1\n        /* \"#utility.yul\":4220:4232   */\n      revert\n        /* \"#utility.yul\":4244:4361   */\n    tag_46:\n        /* \"#utility.yul\":4353:4354   */\n      0x00\n        /* \"#utility.yul\":4350:4351   */\n      dup1\n        /* \"#utility.yul\":4343:4355   */\n      revert\n        /* \"#utility.yul\":4367:4484   */\n    tag_40:\n        /* \"#utility.yul\":4476:4477   */\n      0x00\n        /* \"#utility.yul\":4473:4474   */\n      dup1\n        /* \"#utility.yul\":4466:4478   */\n      revert\n        /* \"#utility.yul\":4490:4592   */\n    tag_65:\n        /* \"#utility.yul\":4531:4537   */\n      0x00\n        /* \"#utility.yul\":4582:4584   */\n      0x1f\n        /* \"#utility.yul\":4578:4585   */\n      not\n        /* \"#utility.yul\":4573:4575   */\n      0x1f\n        /* \"#utility.yul\":4566:4571   */\n      dup4\n        /* \"#utility.yul\":4562:4576   */\n      add\n        /* \"#utility.yul\":4558:4586   */\n      and\n        /* \"#utility.yul\":4548:4586   */\n      swap1\n      pop\n        /* \"#utility.yul\":4490:4592   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":4598:4720   */\n    tag_26:\n        /* \"#utility.yul\":4671:4695   */\n      tag_86\n        /* \"#utility.yul\":4689:4694   */\n      dup2\n        /* \"#utility.yul\":4671:4695   */\n      tag_66\n      jump\t// in\n    tag_86:\n        /* \"#utility.yul\":4664:4669   */\n      dup2\n        /* \"#utility.yul\":4661:4696   */\n      eq\n        /* \"#utility.yul\":4651:4714   */\n      tag_87\n      jumpi\n        /* \"#utility.yul\":4710:4711   */\n      0x00\n        /* \"#utility.yul\":4707:4708   */\n      dup1\n        /* \"#utility.yul\":4700:4712   */\n      revert\n        /* \"#utility.yul\":4651:4714   */\n    tag_87:\n        /* \"#utility.yul\":4598:4720   */\n      pop\n      jump\t// out\n        /* \"#utility.yul\":4726:4848   */\n    tag_36:\n        /* \"#utility.yul\":4799:4823   */\n      tag_89\n        /* \"#utility.yul\":4817:4822   */\n      dup2\n        /* \"#utility.yul\":4799:4823   */\n      tag_72\n      jump\t// in\n    tag_89:\n        /* \"#utility.yul\":4792:4797   */\n      dup2\n        /* \"#utility.yul\":4789:4824   */\n      eq\n        /* \"#utility.yul\":4779:4842   */\n      tag_90\n      jumpi\n        /* \"#utility.yul\":4838:4839   */\n      0x00\n        /* \"#utility.yul\":4835:4836   */\n      dup1\n        /* \"#utility.yul\":4828:4840   */\n      revert\n        /* \"#utility.yul\":4779:4842   */\n    tag_90:\n        /* \"#utility.yul\":4726:4848   */\n      pop\n      jump\t// out\n\n    auxdata: 0xa26469706673582212200a76a0186d484877672ebd47ff5e80fd27fea8bae3e3fce7e74ec288305be02264736f6c63430008070033\n}\n",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "608060405234801561001057600080fd5b50610371806100206000396000f3fe608060405234801561001057600080fd5b506004361061002b5760003560e01c8063150b7a0214610030575b600080fd5b61004a6004803603810190610045919061010e565b610060565b60405161005791906101a0565b60405180910390f35b600063150b7a0260e01b9050949350505050565b6000610087610082846101e0565b6101bb565b9050828152602081018484840111156100a3576100a26102ed565b5b6100ae848285610279565b509392505050565b6000813590506100c58161030d565b92915050565b600082601f8301126100e0576100df6102e8565b5b81356100f0848260208601610074565b91505092915050565b60008135905061010881610324565b92915050565b60008060008060808587031215610128576101276102f7565b5b6000610136878288016100b6565b9450506020610147878288016100b6565b9350506040610158878288016100f9565b925050606085013567ffffffffffffffff811115610179576101786102f2565b5b610185878288016100cb565b91505092959194509250565b61019a81610223565b82525050565b60006020820190506101b56000830184610191565b92915050565b60006101c56101d6565b90506101d18282610288565b919050565b6000604051905090565b600067ffffffffffffffff8211156101fb576101fa6102b9565b5b610204826102fc565b9050602081019050919050565b600061021c8261024f565b9050919050565b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b82818337600083830152505050565b610291826102fc565b810181811067ffffffffffffffff821117156102b0576102af6102b9565b5b80604052505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b61031681610211565b811461032157600080fd5b50565b61032d8161026f565b811461033857600080fd5b5056fea26469706673582212200a76a0186d484877672ebd47ff5e80fd27fea8bae3e3fce7e74ec288305be02264736f6c63430008070033",
							"opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x371 DUP1 PUSH2 0x20 PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x2B JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x150B7A02 EQ PUSH2 0x30 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x4A PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x45 SWAP2 SWAP1 PUSH2 0x10E JUMP JUMPDEST PUSH2 0x60 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x57 SWAP2 SWAP1 PUSH2 0x1A0 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH1 0x0 PUSH4 0x150B7A02 PUSH1 0xE0 SHL SWAP1 POP SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x87 PUSH2 0x82 DUP5 PUSH2 0x1E0 JUMP JUMPDEST PUSH2 0x1BB JUMP JUMPDEST SWAP1 POP DUP3 DUP2 MSTORE PUSH1 0x20 DUP2 ADD DUP5 DUP5 DUP5 ADD GT ISZERO PUSH2 0xA3 JUMPI PUSH2 0xA2 PUSH2 0x2ED JUMP JUMPDEST JUMPDEST PUSH2 0xAE DUP5 DUP3 DUP6 PUSH2 0x279 JUMP JUMPDEST POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0xC5 DUP2 PUSH2 0x30D JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0xE0 JUMPI PUSH2 0xDF PUSH2 0x2E8 JUMP JUMPDEST JUMPDEST DUP2 CALLDATALOAD PUSH2 0xF0 DUP5 DUP3 PUSH1 0x20 DUP7 ADD PUSH2 0x74 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x108 DUP2 PUSH2 0x324 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x80 DUP6 DUP8 SUB SLT ISZERO PUSH2 0x128 JUMPI PUSH2 0x127 PUSH2 0x2F7 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x136 DUP8 DUP3 DUP9 ADD PUSH2 0xB6 JUMP JUMPDEST SWAP5 POP POP PUSH1 0x20 PUSH2 0x147 DUP8 DUP3 DUP9 ADD PUSH2 0xB6 JUMP JUMPDEST SWAP4 POP POP PUSH1 0x40 PUSH2 0x158 DUP8 DUP3 DUP9 ADD PUSH2 0xF9 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x60 DUP6 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x179 JUMPI PUSH2 0x178 PUSH2 0x2F2 JUMP JUMPDEST JUMPDEST PUSH2 0x185 DUP8 DUP3 DUP9 ADD PUSH2 0xCB JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP6 SWAP2 SWAP5 POP SWAP3 POP JUMP JUMPDEST PUSH2 0x19A DUP2 PUSH2 0x223 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x1B5 PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x191 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1C5 PUSH2 0x1D6 JUMP JUMPDEST SWAP1 POP PUSH2 0x1D1 DUP3 DUP3 PUSH2 0x288 JUMP JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT ISZERO PUSH2 0x1FB JUMPI PUSH2 0x1FA PUSH2 0x2B9 JUMP JUMPDEST JUMPDEST PUSH2 0x204 DUP3 PUSH2 0x2FC JUMP JUMPDEST SWAP1 POP PUSH1 0x20 DUP2 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x21C DUP3 PUSH2 0x24F JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST DUP3 DUP2 DUP4 CALLDATACOPY PUSH1 0x0 DUP4 DUP4 ADD MSTORE POP POP POP JUMP JUMPDEST PUSH2 0x291 DUP3 PUSH2 0x2FC JUMP JUMPDEST DUP2 ADD DUP2 DUP2 LT PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT OR ISZERO PUSH2 0x2B0 JUMPI PUSH2 0x2AF PUSH2 0x2B9 JUMP JUMPDEST JUMPDEST DUP1 PUSH1 0x40 MSTORE POP POP POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x1F NOT PUSH1 0x1F DUP4 ADD AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x316 DUP2 PUSH2 0x211 JUMP JUMPDEST DUP2 EQ PUSH2 0x321 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH2 0x32D DUP2 PUSH2 0x26F JUMP JUMPDEST DUP2 EQ PUSH2 0x338 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 EXP PUSH23 0xA0186D484877672EBD47FF5E80FD27FEA8BAE3E3FCE7E7 0x4E 0xC2 DUP9 ADDRESS JUMPDEST 0xE0 0x22 PUSH5 0x736F6C6343 STOP ADDMOD SMOD STOP CALLER ",
							"sourceMap": "399:391:4:-:0;;;;;;;;;;;;;;;;;;;"
						},
						"deployedBytecode": {
							"functionDebugData": {
								"@onERC721Received_312": {
									"entryPoint": 96,
									"id": 312,
									"parameterSlots": 4,
									"returnSlots": 1
								},
								"abi_decode_available_length_t_bytes_memory_ptr": {
									"entryPoint": 116,
									"id": null,
									"parameterSlots": 3,
									"returnSlots": 1
								},
								"abi_decode_t_address": {
									"entryPoint": 182,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_decode_t_bytes_memory_ptr": {
									"entryPoint": 203,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_decode_t_uint256": {
									"entryPoint": 249,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_decode_tuple_t_addresst_addresst_uint256t_bytes_memory_ptr": {
									"entryPoint": 270,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 4
								},
								"abi_encode_t_bytes4_to_t_bytes4_fromStack": {
									"entryPoint": 401,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 0
								},
								"abi_encode_tuple_t_bytes4__to_t_bytes4__fromStack_reversed": {
									"entryPoint": 416,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"allocate_memory": {
									"entryPoint": 443,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"allocate_unbounded": {
									"entryPoint": 470,
									"id": null,
									"parameterSlots": 0,
									"returnSlots": 1
								},
								"array_allocation_size_t_bytes_memory_ptr": {
									"entryPoint": 480,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"cleanup_t_address": {
									"entryPoint": 529,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"cleanup_t_bytes4": {
									"entryPoint": 547,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"cleanup_t_uint160": {
									"entryPoint": 591,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"cleanup_t_uint256": {
									"entryPoint": 623,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"copy_calldata_to_memory": {
									"entryPoint": 633,
									"id": null,
									"parameterSlots": 3,
									"returnSlots": 0
								},
								"finalize_allocation": {
									"entryPoint": 648,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 0
								},
								"panic_error_0x41": {
									"entryPoint": 697,
									"id": null,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d": {
									"entryPoint": 744,
									"id": null,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"revert_error_987264b3b1d58a9c7f8255e93e81c77d86d6299019c33110a076957a3e06e2ae": {
									"entryPoint": 749,
									"id": null,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db": {
									"entryPoint": 754,
									"id": null,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b": {
									"entryPoint": 759,
									"id": null,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"round_up_to_mul_of_32": {
									"entryPoint": 764,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"validator_revert_t_address": {
									"entryPoint": 781,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 0
								},
								"validator_revert_t_uint256": {
									"entryPoint": 804,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 0
								}
							},
							"generatedSources": [
								{
									"ast": {
										"nodeType": "YulBlock",
										"src": "0:4851:9",
										"statements": [
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "90:327:9",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "100:74:9",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "length",
																				"nodeType": "YulIdentifier",
																				"src": "166:6:9"
																			}
																		],
																		"functionName": {
																			"name": "array_allocation_size_t_bytes_memory_ptr",
																			"nodeType": "YulIdentifier",
																			"src": "125:40:9"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "125:48:9"
																	}
																],
																"functionName": {
																	"name": "allocate_memory",
																	"nodeType": "YulIdentifier",
																	"src": "109:15:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "109:65:9"
															},
															"variableNames": [
																{
																	"name": "array",
																	"nodeType": "YulIdentifier",
																	"src": "100:5:9"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "array",
																		"nodeType": "YulIdentifier",
																		"src": "190:5:9"
																	},
																	{
																		"name": "length",
																		"nodeType": "YulIdentifier",
																		"src": "197:6:9"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "183:6:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "183:21:9"
															},
															"nodeType": "YulExpressionStatement",
															"src": "183:21:9"
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "213:27:9",
															"value": {
																"arguments": [
																	{
																		"name": "array",
																		"nodeType": "YulIdentifier",
																		"src": "228:5:9"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "235:4:9",
																		"type": "",
																		"value": "0x20"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "224:3:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "224:16:9"
															},
															"variables": [
																{
																	"name": "dst",
																	"nodeType": "YulTypedName",
																	"src": "217:3:9",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "278:83:9",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "revert_error_987264b3b1d58a9c7f8255e93e81c77d86d6299019c33110a076957a3e06e2ae",
																				"nodeType": "YulIdentifier",
																				"src": "280:77:9"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "280:79:9"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "280:79:9"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "src",
																				"nodeType": "YulIdentifier",
																				"src": "259:3:9"
																			},
																			{
																				"name": "length",
																				"nodeType": "YulIdentifier",
																				"src": "264:6:9"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "255:3:9"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "255:16:9"
																	},
																	{
																		"name": "end",
																		"nodeType": "YulIdentifier",
																		"src": "273:3:9"
																	}
																],
																"functionName": {
																	"name": "gt",
																	"nodeType": "YulIdentifier",
																	"src": "252:2:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "252:25:9"
															},
															"nodeType": "YulIf",
															"src": "249:112:9"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "src",
																		"nodeType": "YulIdentifier",
																		"src": "394:3:9"
																	},
																	{
																		"name": "dst",
																		"nodeType": "YulIdentifier",
																		"src": "399:3:9"
																	},
																	{
																		"name": "length",
																		"nodeType": "YulIdentifier",
																		"src": "404:6:9"
																	}
																],
																"functionName": {
																	"name": "copy_calldata_to_memory",
																	"nodeType": "YulIdentifier",
																	"src": "370:23:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "370:41:9"
															},
															"nodeType": "YulExpressionStatement",
															"src": "370:41:9"
														}
													]
												},
												"name": "abi_decode_available_length_t_bytes_memory_ptr",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "src",
														"nodeType": "YulTypedName",
														"src": "63:3:9",
														"type": ""
													},
													{
														"name": "length",
														"nodeType": "YulTypedName",
														"src": "68:6:9",
														"type": ""
													},
													{
														"name": "end",
														"nodeType": "YulTypedName",
														"src": "76:3:9",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "array",
														"nodeType": "YulTypedName",
														"src": "84:5:9",
														"type": ""
													}
												],
												"src": "7:410:9"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "475:87:9",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "485:29:9",
															"value": {
																"arguments": [
																	{
																		"name": "offset",
																		"nodeType": "YulIdentifier",
																		"src": "507:6:9"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nodeType": "YulIdentifier",
																	"src": "494:12:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "494:20:9"
															},
															"variableNames": [
																{
																	"name": "value",
																	"nodeType": "YulIdentifier",
																	"src": "485:5:9"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value",
																		"nodeType": "YulIdentifier",
																		"src": "550:5:9"
																	}
																],
																"functionName": {
																	"name": "validator_revert_t_address",
																	"nodeType": "YulIdentifier",
																	"src": "523:26:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "523:33:9"
															},
															"nodeType": "YulExpressionStatement",
															"src": "523:33:9"
														}
													]
												},
												"name": "abi_decode_t_address",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "offset",
														"nodeType": "YulTypedName",
														"src": "453:6:9",
														"type": ""
													},
													{
														"name": "end",
														"nodeType": "YulTypedName",
														"src": "461:3:9",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "469:5:9",
														"type": ""
													}
												],
												"src": "423:139:9"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "642:277:9",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "691:83:9",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d",
																				"nodeType": "YulIdentifier",
																				"src": "693:77:9"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "693:79:9"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "693:79:9"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "offset",
																						"nodeType": "YulIdentifier",
																						"src": "670:6:9"
																					},
																					{
																						"kind": "number",
																						"nodeType": "YulLiteral",
																						"src": "678:4:9",
																						"type": "",
																						"value": "0x1f"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "666:3:9"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "666:17:9"
																			},
																			{
																				"name": "end",
																				"nodeType": "YulIdentifier",
																				"src": "685:3:9"
																			}
																		],
																		"functionName": {
																			"name": "slt",
																			"nodeType": "YulIdentifier",
																			"src": "662:3:9"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "662:27:9"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nodeType": "YulIdentifier",
																	"src": "655:6:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "655:35:9"
															},
															"nodeType": "YulIf",
															"src": "652:122:9"
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "783:34:9",
															"value": {
																"arguments": [
																	{
																		"name": "offset",
																		"nodeType": "YulIdentifier",
																		"src": "810:6:9"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nodeType": "YulIdentifier",
																	"src": "797:12:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "797:20:9"
															},
															"variables": [
																{
																	"name": "length",
																	"nodeType": "YulTypedName",
																	"src": "787:6:9",
																	"type": ""
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "826:87:9",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "offset",
																				"nodeType": "YulIdentifier",
																				"src": "886:6:9"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "894:4:9",
																				"type": "",
																				"value": "0x20"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "882:3:9"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "882:17:9"
																	},
																	{
																		"name": "length",
																		"nodeType": "YulIdentifier",
																		"src": "901:6:9"
																	},
																	{
																		"name": "end",
																		"nodeType": "YulIdentifier",
																		"src": "909:3:9"
																	}
																],
																"functionName": {
																	"name": "abi_decode_available_length_t_bytes_memory_ptr",
																	"nodeType": "YulIdentifier",
																	"src": "835:46:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "835:78:9"
															},
															"variableNames": [
																{
																	"name": "array",
																	"nodeType": "YulIdentifier",
																	"src": "826:5:9"
																}
															]
														}
													]
												},
												"name": "abi_decode_t_bytes_memory_ptr",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "offset",
														"nodeType": "YulTypedName",
														"src": "620:6:9",
														"type": ""
													},
													{
														"name": "end",
														"nodeType": "YulTypedName",
														"src": "628:3:9",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "array",
														"nodeType": "YulTypedName",
														"src": "636:5:9",
														"type": ""
													}
												],
												"src": "581:338:9"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "977:87:9",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "987:29:9",
															"value": {
																"arguments": [
																	{
																		"name": "offset",
																		"nodeType": "YulIdentifier",
																		"src": "1009:6:9"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nodeType": "YulIdentifier",
																	"src": "996:12:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "996:20:9"
															},
															"variableNames": [
																{
																	"name": "value",
																	"nodeType": "YulIdentifier",
																	"src": "987:5:9"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value",
																		"nodeType": "YulIdentifier",
																		"src": "1052:5:9"
																	}
																],
																"functionName": {
																	"name": "validator_revert_t_uint256",
																	"nodeType": "YulIdentifier",
																	"src": "1025:26:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "1025:33:9"
															},
															"nodeType": "YulExpressionStatement",
															"src": "1025:33:9"
														}
													]
												},
												"name": "abi_decode_t_uint256",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "offset",
														"nodeType": "YulTypedName",
														"src": "955:6:9",
														"type": ""
													},
													{
														"name": "end",
														"nodeType": "YulTypedName",
														"src": "963:3:9",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "971:5:9",
														"type": ""
													}
												],
												"src": "925:139:9"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "1196:817:9",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "1243:83:9",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b",
																				"nodeType": "YulIdentifier",
																				"src": "1245:77:9"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "1245:79:9"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "1245:79:9"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "1217:7:9"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "1226:9:9"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "1213:3:9"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1213:23:9"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1238:3:9",
																		"type": "",
																		"value": "128"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nodeType": "YulIdentifier",
																	"src": "1209:3:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "1209:33:9"
															},
															"nodeType": "YulIf",
															"src": "1206:120:9"
														},
														{
															"nodeType": "YulBlock",
															"src": "1336:117:9",
															"statements": [
																{
																	"nodeType": "YulVariableDeclaration",
																	"src": "1351:15:9",
																	"value": {
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1365:1:9",
																		"type": "",
																		"value": "0"
																	},
																	"variables": [
																		{
																			"name": "offset",
																			"nodeType": "YulTypedName",
																			"src": "1355:6:9",
																			"type": ""
																		}
																	]
																},
																{
																	"nodeType": "YulAssignment",
																	"src": "1380:63:9",
																	"value": {
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "headStart",
																						"nodeType": "YulIdentifier",
																						"src": "1415:9:9"
																					},
																					{
																						"name": "offset",
																						"nodeType": "YulIdentifier",
																						"src": "1426:6:9"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "1411:3:9"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "1411:22:9"
																			},
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "1435:7:9"
																			}
																		],
																		"functionName": {
																			"name": "abi_decode_t_address",
																			"nodeType": "YulIdentifier",
																			"src": "1390:20:9"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1390:53:9"
																	},
																	"variableNames": [
																		{
																			"name": "value0",
																			"nodeType": "YulIdentifier",
																			"src": "1380:6:9"
																		}
																	]
																}
															]
														},
														{
															"nodeType": "YulBlock",
															"src": "1463:118:9",
															"statements": [
																{
																	"nodeType": "YulVariableDeclaration",
																	"src": "1478:16:9",
																	"value": {
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1492:2:9",
																		"type": "",
																		"value": "32"
																	},
																	"variables": [
																		{
																			"name": "offset",
																			"nodeType": "YulTypedName",
																			"src": "1482:6:9",
																			"type": ""
																		}
																	]
																},
																{
																	"nodeType": "YulAssignment",
																	"src": "1508:63:9",
																	"value": {
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "headStart",
																						"nodeType": "YulIdentifier",
																						"src": "1543:9:9"
																					},
																					{
																						"name": "offset",
																						"nodeType": "YulIdentifier",
																						"src": "1554:6:9"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "1539:3:9"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "1539:22:9"
																			},
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "1563:7:9"
																			}
																		],
																		"functionName": {
																			"name": "abi_decode_t_address",
																			"nodeType": "YulIdentifier",
																			"src": "1518:20:9"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1518:53:9"
																	},
																	"variableNames": [
																		{
																			"name": "value1",
																			"nodeType": "YulIdentifier",
																			"src": "1508:6:9"
																		}
																	]
																}
															]
														},
														{
															"nodeType": "YulBlock",
															"src": "1591:118:9",
															"statements": [
																{
																	"nodeType": "YulVariableDeclaration",
																	"src": "1606:16:9",
																	"value": {
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1620:2:9",
																		"type": "",
																		"value": "64"
																	},
																	"variables": [
																		{
																			"name": "offset",
																			"nodeType": "YulTypedName",
																			"src": "1610:6:9",
																			"type": ""
																		}
																	]
																},
																{
																	"nodeType": "YulAssignment",
																	"src": "1636:63:9",
																	"value": {
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "headStart",
																						"nodeType": "YulIdentifier",
																						"src": "1671:9:9"
																					},
																					{
																						"name": "offset",
																						"nodeType": "YulIdentifier",
																						"src": "1682:6:9"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "1667:3:9"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "1667:22:9"
																			},
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "1691:7:9"
																			}
																		],
																		"functionName": {
																			"name": "abi_decode_t_uint256",
																			"nodeType": "YulIdentifier",
																			"src": "1646:20:9"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1646:53:9"
																	},
																	"variableNames": [
																		{
																			"name": "value2",
																			"nodeType": "YulIdentifier",
																			"src": "1636:6:9"
																		}
																	]
																}
															]
														},
														{
															"nodeType": "YulBlock",
															"src": "1719:287:9",
															"statements": [
																{
																	"nodeType": "YulVariableDeclaration",
																	"src": "1734:46:9",
																	"value": {
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "headStart",
																						"nodeType": "YulIdentifier",
																						"src": "1765:9:9"
																					},
																					{
																						"kind": "number",
																						"nodeType": "YulLiteral",
																						"src": "1776:2:9",
																						"type": "",
																						"value": "96"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "1761:3:9"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "1761:18:9"
																			}
																		],
																		"functionName": {
																			"name": "calldataload",
																			"nodeType": "YulIdentifier",
																			"src": "1748:12:9"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1748:32:9"
																	},
																	"variables": [
																		{
																			"name": "offset",
																			"nodeType": "YulTypedName",
																			"src": "1738:6:9",
																			"type": ""
																		}
																	]
																},
																{
																	"body": {
																		"nodeType": "YulBlock",
																		"src": "1827:83:9",
																		"statements": [
																			{
																				"expression": {
																					"arguments": [],
																					"functionName": {
																						"name": "revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db",
																						"nodeType": "YulIdentifier",
																						"src": "1829:77:9"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "1829:79:9"
																				},
																				"nodeType": "YulExpressionStatement",
																				"src": "1829:79:9"
																			}
																		]
																	},
																	"condition": {
																		"arguments": [
																			{
																				"name": "offset",
																				"nodeType": "YulIdentifier",
																				"src": "1799:6:9"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "1807:18:9",
																				"type": "",
																				"value": "0xffffffffffffffff"
																			}
																		],
																		"functionName": {
																			"name": "gt",
																			"nodeType": "YulIdentifier",
																			"src": "1796:2:9"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1796:30:9"
																	},
																	"nodeType": "YulIf",
																	"src": "1793:117:9"
																},
																{
																	"nodeType": "YulAssignment",
																	"src": "1924:72:9",
																	"value": {
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "headStart",
																						"nodeType": "YulIdentifier",
																						"src": "1968:9:9"
																					},
																					{
																						"name": "offset",
																						"nodeType": "YulIdentifier",
																						"src": "1979:6:9"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "1964:3:9"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "1964:22:9"
																			},
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "1988:7:9"
																			}
																		],
																		"functionName": {
																			"name": "abi_decode_t_bytes_memory_ptr",
																			"nodeType": "YulIdentifier",
																			"src": "1934:29:9"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1934:62:9"
																	},
																	"variableNames": [
																		{
																			"name": "value3",
																			"nodeType": "YulIdentifier",
																			"src": "1924:6:9"
																		}
																	]
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_addresst_addresst_uint256t_bytes_memory_ptr",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "1142:9:9",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nodeType": "YulTypedName",
														"src": "1153:7:9",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "1165:6:9",
														"type": ""
													},
													{
														"name": "value1",
														"nodeType": "YulTypedName",
														"src": "1173:6:9",
														"type": ""
													},
													{
														"name": "value2",
														"nodeType": "YulTypedName",
														"src": "1181:6:9",
														"type": ""
													},
													{
														"name": "value3",
														"nodeType": "YulTypedName",
														"src": "1189:6:9",
														"type": ""
													}
												],
												"src": "1070:943:9"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "2082:52:9",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "2099:3:9"
																	},
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nodeType": "YulIdentifier",
																				"src": "2121:5:9"
																			}
																		],
																		"functionName": {
																			"name": "cleanup_t_bytes4",
																			"nodeType": "YulIdentifier",
																			"src": "2104:16:9"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2104:23:9"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "2092:6:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "2092:36:9"
															},
															"nodeType": "YulExpressionStatement",
															"src": "2092:36:9"
														}
													]
												},
												"name": "abi_encode_t_bytes4_to_t_bytes4_fromStack",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "2070:5:9",
														"type": ""
													},
													{
														"name": "pos",
														"nodeType": "YulTypedName",
														"src": "2077:3:9",
														"type": ""
													}
												],
												"src": "2019:115:9"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "2236:122:9",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "2246:26:9",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "2258:9:9"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "2269:2:9",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "2254:3:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "2254:18:9"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "2246:4:9"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value0",
																		"nodeType": "YulIdentifier",
																		"src": "2324:6:9"
																	},
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "2337:9:9"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "2348:1:9",
																				"type": "",
																				"value": "0"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "2333:3:9"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2333:17:9"
																	}
																],
																"functionName": {
																	"name": "abi_encode_t_bytes4_to_t_bytes4_fromStack",
																	"nodeType": "YulIdentifier",
																	"src": "2282:41:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "2282:69:9"
															},
															"nodeType": "YulExpressionStatement",
															"src": "2282:69:9"
														}
													]
												},
												"name": "abi_encode_tuple_t_bytes4__to_t_bytes4__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "2208:9:9",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "2220:6:9",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "2231:4:9",
														"type": ""
													}
												],
												"src": "2140:218:9"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "2405:88:9",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "2415:30:9",
															"value": {
																"arguments": [],
																"functionName": {
																	"name": "allocate_unbounded",
																	"nodeType": "YulIdentifier",
																	"src": "2425:18:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "2425:20:9"
															},
															"variableNames": [
																{
																	"name": "memPtr",
																	"nodeType": "YulIdentifier",
																	"src": "2415:6:9"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "memPtr",
																		"nodeType": "YulIdentifier",
																		"src": "2474:6:9"
																	},
																	{
																		"name": "size",
																		"nodeType": "YulIdentifier",
																		"src": "2482:4:9"
																	}
																],
																"functionName": {
																	"name": "finalize_allocation",
																	"nodeType": "YulIdentifier",
																	"src": "2454:19:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "2454:33:9"
															},
															"nodeType": "YulExpressionStatement",
															"src": "2454:33:9"
														}
													]
												},
												"name": "allocate_memory",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "size",
														"nodeType": "YulTypedName",
														"src": "2389:4:9",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "memPtr",
														"nodeType": "YulTypedName",
														"src": "2398:6:9",
														"type": ""
													}
												],
												"src": "2364:129:9"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "2539:35:9",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "2549:19:9",
															"value": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "2565:2:9",
																		"type": "",
																		"value": "64"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nodeType": "YulIdentifier",
																	"src": "2559:5:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "2559:9:9"
															},
															"variableNames": [
																{
																	"name": "memPtr",
																	"nodeType": "YulIdentifier",
																	"src": "2549:6:9"
																}
															]
														}
													]
												},
												"name": "allocate_unbounded",
												"nodeType": "YulFunctionDefinition",
												"returnVariables": [
													{
														"name": "memPtr",
														"nodeType": "YulTypedName",
														"src": "2532:6:9",
														"type": ""
													}
												],
												"src": "2499:75:9"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "2646:241:9",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "2751:22:9",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "panic_error_0x41",
																				"nodeType": "YulIdentifier",
																				"src": "2753:16:9"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "2753:18:9"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "2753:18:9"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "length",
																		"nodeType": "YulIdentifier",
																		"src": "2723:6:9"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "2731:18:9",
																		"type": "",
																		"value": "0xffffffffffffffff"
																	}
																],
																"functionName": {
																	"name": "gt",
																	"nodeType": "YulIdentifier",
																	"src": "2720:2:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "2720:30:9"
															},
															"nodeType": "YulIf",
															"src": "2717:56:9"
														},
														{
															"nodeType": "YulAssignment",
															"src": "2783:37:9",
															"value": {
																"arguments": [
																	{
																		"name": "length",
																		"nodeType": "YulIdentifier",
																		"src": "2813:6:9"
																	}
																],
																"functionName": {
																	"name": "round_up_to_mul_of_32",
																	"nodeType": "YulIdentifier",
																	"src": "2791:21:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "2791:29:9"
															},
															"variableNames": [
																{
																	"name": "size",
																	"nodeType": "YulIdentifier",
																	"src": "2783:4:9"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "2857:23:9",
															"value": {
																"arguments": [
																	{
																		"name": "size",
																		"nodeType": "YulIdentifier",
																		"src": "2869:4:9"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "2875:4:9",
																		"type": "",
																		"value": "0x20"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "2865:3:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "2865:15:9"
															},
															"variableNames": [
																{
																	"name": "size",
																	"nodeType": "YulIdentifier",
																	"src": "2857:4:9"
																}
															]
														}
													]
												},
												"name": "array_allocation_size_t_bytes_memory_ptr",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "length",
														"nodeType": "YulTypedName",
														"src": "2630:6:9",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "size",
														"nodeType": "YulTypedName",
														"src": "2641:4:9",
														"type": ""
													}
												],
												"src": "2580:307:9"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "2938:51:9",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "2948:35:9",
															"value": {
																"arguments": [
																	{
																		"name": "value",
																		"nodeType": "YulIdentifier",
																		"src": "2977:5:9"
																	}
																],
																"functionName": {
																	"name": "cleanup_t_uint160",
																	"nodeType": "YulIdentifier",
																	"src": "2959:17:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "2959:24:9"
															},
															"variableNames": [
																{
																	"name": "cleaned",
																	"nodeType": "YulIdentifier",
																	"src": "2948:7:9"
																}
															]
														}
													]
												},
												"name": "cleanup_t_address",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "2920:5:9",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "cleaned",
														"nodeType": "YulTypedName",
														"src": "2930:7:9",
														"type": ""
													}
												],
												"src": "2893:96:9"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "3039:105:9",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "3049:89:9",
															"value": {
																"arguments": [
																	{
																		"name": "value",
																		"nodeType": "YulIdentifier",
																		"src": "3064:5:9"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "3071:66:9",
																		"type": "",
																		"value": "0xffffffff00000000000000000000000000000000000000000000000000000000"
																	}
																],
																"functionName": {
																	"name": "and",
																	"nodeType": "YulIdentifier",
																	"src": "3060:3:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "3060:78:9"
															},
															"variableNames": [
																{
																	"name": "cleaned",
																	"nodeType": "YulIdentifier",
																	"src": "3049:7:9"
																}
															]
														}
													]
												},
												"name": "cleanup_t_bytes4",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "3021:5:9",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "cleaned",
														"nodeType": "YulTypedName",
														"src": "3031:7:9",
														"type": ""
													}
												],
												"src": "2995:149:9"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "3195:81:9",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "3205:65:9",
															"value": {
																"arguments": [
																	{
																		"name": "value",
																		"nodeType": "YulIdentifier",
																		"src": "3220:5:9"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "3227:42:9",
																		"type": "",
																		"value": "0xffffffffffffffffffffffffffffffffffffffff"
																	}
																],
																"functionName": {
																	"name": "and",
																	"nodeType": "YulIdentifier",
																	"src": "3216:3:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "3216:54:9"
															},
															"variableNames": [
																{
																	"name": "cleaned",
																	"nodeType": "YulIdentifier",
																	"src": "3205:7:9"
																}
															]
														}
													]
												},
												"name": "cleanup_t_uint160",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "3177:5:9",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "cleaned",
														"nodeType": "YulTypedName",
														"src": "3187:7:9",
														"type": ""
													}
												],
												"src": "3150:126:9"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "3327:32:9",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "3337:16:9",
															"value": {
																"name": "value",
																"nodeType": "YulIdentifier",
																"src": "3348:5:9"
															},
															"variableNames": [
																{
																	"name": "cleaned",
																	"nodeType": "YulIdentifier",
																	"src": "3337:7:9"
																}
															]
														}
													]
												},
												"name": "cleanup_t_uint256",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "3309:5:9",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "cleaned",
														"nodeType": "YulTypedName",
														"src": "3319:7:9",
														"type": ""
													}
												],
												"src": "3282:77:9"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "3416:103:9",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "dst",
																		"nodeType": "YulIdentifier",
																		"src": "3439:3:9"
																	},
																	{
																		"name": "src",
																		"nodeType": "YulIdentifier",
																		"src": "3444:3:9"
																	},
																	{
																		"name": "length",
																		"nodeType": "YulIdentifier",
																		"src": "3449:6:9"
																	}
																],
																"functionName": {
																	"name": "calldatacopy",
																	"nodeType": "YulIdentifier",
																	"src": "3426:12:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "3426:30:9"
															},
															"nodeType": "YulExpressionStatement",
															"src": "3426:30:9"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dst",
																				"nodeType": "YulIdentifier",
																				"src": "3497:3:9"
																			},
																			{
																				"name": "length",
																				"nodeType": "YulIdentifier",
																				"src": "3502:6:9"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "3493:3:9"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3493:16:9"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "3511:1:9",
																		"type": "",
																		"value": "0"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "3486:6:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "3486:27:9"
															},
															"nodeType": "YulExpressionStatement",
															"src": "3486:27:9"
														}
													]
												},
												"name": "copy_calldata_to_memory",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "src",
														"nodeType": "YulTypedName",
														"src": "3398:3:9",
														"type": ""
													},
													{
														"name": "dst",
														"nodeType": "YulTypedName",
														"src": "3403:3:9",
														"type": ""
													},
													{
														"name": "length",
														"nodeType": "YulTypedName",
														"src": "3408:6:9",
														"type": ""
													}
												],
												"src": "3365:154:9"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "3568:238:9",
													"statements": [
														{
															"nodeType": "YulVariableDeclaration",
															"src": "3578:58:9",
															"value": {
																"arguments": [
																	{
																		"name": "memPtr",
																		"nodeType": "YulIdentifier",
																		"src": "3600:6:9"
																	},
																	{
																		"arguments": [
																			{
																				"name": "size",
																				"nodeType": "YulIdentifier",
																				"src": "3630:4:9"
																			}
																		],
																		"functionName": {
																			"name": "round_up_to_mul_of_32",
																			"nodeType": "YulIdentifier",
																			"src": "3608:21:9"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3608:27:9"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "3596:3:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "3596:40:9"
															},
															"variables": [
																{
																	"name": "newFreePtr",
																	"nodeType": "YulTypedName",
																	"src": "3582:10:9",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "3747:22:9",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "panic_error_0x41",
																				"nodeType": "YulIdentifier",
																				"src": "3749:16:9"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "3749:18:9"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "3749:18:9"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "newFreePtr",
																				"nodeType": "YulIdentifier",
																				"src": "3690:10:9"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "3702:18:9",
																				"type": "",
																				"value": "0xffffffffffffffff"
																			}
																		],
																		"functionName": {
																			"name": "gt",
																			"nodeType": "YulIdentifier",
																			"src": "3687:2:9"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3687:34:9"
																	},
																	{
																		"arguments": [
																			{
																				"name": "newFreePtr",
																				"nodeType": "YulIdentifier",
																				"src": "3726:10:9"
																			},
																			{
																				"name": "memPtr",
																				"nodeType": "YulIdentifier",
																				"src": "3738:6:9"
																			}
																		],
																		"functionName": {
																			"name": "lt",
																			"nodeType": "YulIdentifier",
																			"src": "3723:2:9"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3723:22:9"
																	}
																],
																"functionName": {
																	"name": "or",
																	"nodeType": "YulIdentifier",
																	"src": "3684:2:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "3684:62:9"
															},
															"nodeType": "YulIf",
															"src": "3681:88:9"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "3785:2:9",
																		"type": "",
																		"value": "64"
																	},
																	{
																		"name": "newFreePtr",
																		"nodeType": "YulIdentifier",
																		"src": "3789:10:9"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "3778:6:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "3778:22:9"
															},
															"nodeType": "YulExpressionStatement",
															"src": "3778:22:9"
														}
													]
												},
												"name": "finalize_allocation",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "memPtr",
														"nodeType": "YulTypedName",
														"src": "3554:6:9",
														"type": ""
													},
													{
														"name": "size",
														"nodeType": "YulTypedName",
														"src": "3562:4:9",
														"type": ""
													}
												],
												"src": "3525:281:9"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "3840:152:9",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "3857:1:9",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "3860:77:9",
																		"type": "",
																		"value": "35408467139433450592217433187231851964531694900788300625387963629091585785856"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "3850:6:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "3850:88:9"
															},
															"nodeType": "YulExpressionStatement",
															"src": "3850:88:9"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "3954:1:9",
																		"type": "",
																		"value": "4"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "3957:4:9",
																		"type": "",
																		"value": "0x41"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "3947:6:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "3947:15:9"
															},
															"nodeType": "YulExpressionStatement",
															"src": "3947:15:9"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "3978:1:9",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "3981:4:9",
																		"type": "",
																		"value": "0x24"
																	}
																],
																"functionName": {
																	"name": "revert",
																	"nodeType": "YulIdentifier",
																	"src": "3971:6:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "3971:15:9"
															},
															"nodeType": "YulExpressionStatement",
															"src": "3971:15:9"
														}
													]
												},
												"name": "panic_error_0x41",
												"nodeType": "YulFunctionDefinition",
												"src": "3812:180:9"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "4087:28:9",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "4104:1:9",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "4107:1:9",
																		"type": "",
																		"value": "0"
																	}
																],
																"functionName": {
																	"name": "revert",
																	"nodeType": "YulIdentifier",
																	"src": "4097:6:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "4097:12:9"
															},
															"nodeType": "YulExpressionStatement",
															"src": "4097:12:9"
														}
													]
												},
												"name": "revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d",
												"nodeType": "YulFunctionDefinition",
												"src": "3998:117:9"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "4210:28:9",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "4227:1:9",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "4230:1:9",
																		"type": "",
																		"value": "0"
																	}
																],
																"functionName": {
																	"name": "revert",
																	"nodeType": "YulIdentifier",
																	"src": "4220:6:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "4220:12:9"
															},
															"nodeType": "YulExpressionStatement",
															"src": "4220:12:9"
														}
													]
												},
												"name": "revert_error_987264b3b1d58a9c7f8255e93e81c77d86d6299019c33110a076957a3e06e2ae",
												"nodeType": "YulFunctionDefinition",
												"src": "4121:117:9"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "4333:28:9",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "4350:1:9",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "4353:1:9",
																		"type": "",
																		"value": "0"
																	}
																],
																"functionName": {
																	"name": "revert",
																	"nodeType": "YulIdentifier",
																	"src": "4343:6:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "4343:12:9"
															},
															"nodeType": "YulExpressionStatement",
															"src": "4343:12:9"
														}
													]
												},
												"name": "revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db",
												"nodeType": "YulFunctionDefinition",
												"src": "4244:117:9"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "4456:28:9",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "4473:1:9",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "4476:1:9",
																		"type": "",
																		"value": "0"
																	}
																],
																"functionName": {
																	"name": "revert",
																	"nodeType": "YulIdentifier",
																	"src": "4466:6:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "4466:12:9"
															},
															"nodeType": "YulExpressionStatement",
															"src": "4466:12:9"
														}
													]
												},
												"name": "revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b",
												"nodeType": "YulFunctionDefinition",
												"src": "4367:117:9"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "4538:54:9",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "4548:38:9",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nodeType": "YulIdentifier",
																				"src": "4566:5:9"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "4573:2:9",
																				"type": "",
																				"value": "31"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "4562:3:9"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "4562:14:9"
																	},
																	{
																		"arguments": [
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "4582:2:9",
																				"type": "",
																				"value": "31"
																			}
																		],
																		"functionName": {
																			"name": "not",
																			"nodeType": "YulIdentifier",
																			"src": "4578:3:9"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "4578:7:9"
																	}
																],
																"functionName": {
																	"name": "and",
																	"nodeType": "YulIdentifier",
																	"src": "4558:3:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "4558:28:9"
															},
															"variableNames": [
																{
																	"name": "result",
																	"nodeType": "YulIdentifier",
																	"src": "4548:6:9"
																}
															]
														}
													]
												},
												"name": "round_up_to_mul_of_32",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "4521:5:9",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "result",
														"nodeType": "YulTypedName",
														"src": "4531:6:9",
														"type": ""
													}
												],
												"src": "4490:102:9"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "4641:79:9",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "4698:16:9",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "4707:1:9",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "4710:1:9",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "4700:6:9"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "4700:12:9"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "4700:12:9"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nodeType": "YulIdentifier",
																				"src": "4664:5:9"
																			},
																			{
																				"arguments": [
																					{
																						"name": "value",
																						"nodeType": "YulIdentifier",
																						"src": "4689:5:9"
																					}
																				],
																				"functionName": {
																					"name": "cleanup_t_address",
																					"nodeType": "YulIdentifier",
																					"src": "4671:17:9"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "4671:24:9"
																			}
																		],
																		"functionName": {
																			"name": "eq",
																			"nodeType": "YulIdentifier",
																			"src": "4661:2:9"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "4661:35:9"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nodeType": "YulIdentifier",
																	"src": "4654:6:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "4654:43:9"
															},
															"nodeType": "YulIf",
															"src": "4651:63:9"
														}
													]
												},
												"name": "validator_revert_t_address",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "4634:5:9",
														"type": ""
													}
												],
												"src": "4598:122:9"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "4769:79:9",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "4826:16:9",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "4835:1:9",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "4838:1:9",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "4828:6:9"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "4828:12:9"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "4828:12:9"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nodeType": "YulIdentifier",
																				"src": "4792:5:9"
																			},
																			{
																				"arguments": [
																					{
																						"name": "value",
																						"nodeType": "YulIdentifier",
																						"src": "4817:5:9"
																					}
																				],
																				"functionName": {
																					"name": "cleanup_t_uint256",
																					"nodeType": "YulIdentifier",
																					"src": "4799:17:9"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "4799:24:9"
																			}
																		],
																		"functionName": {
																			"name": "eq",
																			"nodeType": "YulIdentifier",
																			"src": "4789:2:9"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "4789:35:9"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nodeType": "YulIdentifier",
																	"src": "4782:6:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "4782:43:9"
															},
															"nodeType": "YulIf",
															"src": "4779:63:9"
														}
													]
												},
												"name": "validator_revert_t_uint256",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "4762:5:9",
														"type": ""
													}
												],
												"src": "4726:122:9"
											}
										]
									},
									"contents": "{\n\n    function abi_decode_available_length_t_bytes_memory_ptr(src, length, end) -> array {\n        array := allocate_memory(array_allocation_size_t_bytes_memory_ptr(length))\n        mstore(array, length)\n        let dst := add(array, 0x20)\n        if gt(add(src, length), end) { revert_error_987264b3b1d58a9c7f8255e93e81c77d86d6299019c33110a076957a3e06e2ae() }\n        copy_calldata_to_memory(src, dst, length)\n    }\n\n    function abi_decode_t_address(offset, end) -> value {\n        value := calldataload(offset)\n        validator_revert_t_address(value)\n    }\n\n    // bytes\n    function abi_decode_t_bytes_memory_ptr(offset, end) -> array {\n        if iszero(slt(add(offset, 0x1f), end)) { revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d() }\n        let length := calldataload(offset)\n        array := abi_decode_available_length_t_bytes_memory_ptr(add(offset, 0x20), length, end)\n    }\n\n    function abi_decode_t_uint256(offset, end) -> value {\n        value := calldataload(offset)\n        validator_revert_t_uint256(value)\n    }\n\n    function abi_decode_tuple_t_addresst_addresst_uint256t_bytes_memory_ptr(headStart, dataEnd) -> value0, value1, value2, value3 {\n        if slt(sub(dataEnd, headStart), 128) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 32\n\n            value1 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 64\n\n            value2 := abi_decode_t_uint256(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := calldataload(add(headStart, 96))\n            if gt(offset, 0xffffffffffffffff) { revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db() }\n\n            value3 := abi_decode_t_bytes_memory_ptr(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function abi_encode_t_bytes4_to_t_bytes4_fromStack(value, pos) {\n        mstore(pos, cleanup_t_bytes4(value))\n    }\n\n    function abi_encode_tuple_t_bytes4__to_t_bytes4__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        abi_encode_t_bytes4_to_t_bytes4_fromStack(value0,  add(headStart, 0))\n\n    }\n\n    function allocate_memory(size) -> memPtr {\n        memPtr := allocate_unbounded()\n        finalize_allocation(memPtr, size)\n    }\n\n    function allocate_unbounded() -> memPtr {\n        memPtr := mload(64)\n    }\n\n    function array_allocation_size_t_bytes_memory_ptr(length) -> size {\n        // Make sure we can allocate memory without overflow\n        if gt(length, 0xffffffffffffffff) { panic_error_0x41() }\n\n        size := round_up_to_mul_of_32(length)\n\n        // add length slot\n        size := add(size, 0x20)\n\n    }\n\n    function cleanup_t_address(value) -> cleaned {\n        cleaned := cleanup_t_uint160(value)\n    }\n\n    function cleanup_t_bytes4(value) -> cleaned {\n        cleaned := and(value, 0xffffffff00000000000000000000000000000000000000000000000000000000)\n    }\n\n    function cleanup_t_uint160(value) -> cleaned {\n        cleaned := and(value, 0xffffffffffffffffffffffffffffffffffffffff)\n    }\n\n    function cleanup_t_uint256(value) -> cleaned {\n        cleaned := value\n    }\n\n    function copy_calldata_to_memory(src, dst, length) {\n        calldatacopy(dst, src, length)\n        // clear end\n        mstore(add(dst, length), 0)\n    }\n\n    function finalize_allocation(memPtr, size) {\n        let newFreePtr := add(memPtr, round_up_to_mul_of_32(size))\n        // protect against overflow\n        if or(gt(newFreePtr, 0xffffffffffffffff), lt(newFreePtr, memPtr)) { panic_error_0x41() }\n        mstore(64, newFreePtr)\n    }\n\n    function panic_error_0x41() {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x41)\n        revert(0, 0x24)\n    }\n\n    function revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d() {\n        revert(0, 0)\n    }\n\n    function revert_error_987264b3b1d58a9c7f8255e93e81c77d86d6299019c33110a076957a3e06e2ae() {\n        revert(0, 0)\n    }\n\n    function revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db() {\n        revert(0, 0)\n    }\n\n    function revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() {\n        revert(0, 0)\n    }\n\n    function round_up_to_mul_of_32(value) -> result {\n        result := and(add(value, 31), not(31))\n    }\n\n    function validator_revert_t_address(value) {\n        if iszero(eq(value, cleanup_t_address(value))) { revert(0, 0) }\n    }\n\n    function validator_revert_t_uint256(value) {\n        if iszero(eq(value, cleanup_t_uint256(value))) { revert(0, 0) }\n    }\n\n}\n",
									"id": 9,
									"language": "Yul",
									"name": "#utility.yul"
								}
							],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "608060405234801561001057600080fd5b506004361061002b5760003560e01c8063150b7a0214610030575b600080fd5b61004a6004803603810190610045919061010e565b610060565b60405161005791906101a0565b60405180910390f35b600063150b7a0260e01b9050949350505050565b6000610087610082846101e0565b6101bb565b9050828152602081018484840111156100a3576100a26102ed565b5b6100ae848285610279565b509392505050565b6000813590506100c58161030d565b92915050565b600082601f8301126100e0576100df6102e8565b5b81356100f0848260208601610074565b91505092915050565b60008135905061010881610324565b92915050565b60008060008060808587031215610128576101276102f7565b5b6000610136878288016100b6565b9450506020610147878288016100b6565b9350506040610158878288016100f9565b925050606085013567ffffffffffffffff811115610179576101786102f2565b5b610185878288016100cb565b91505092959194509250565b61019a81610223565b82525050565b60006020820190506101b56000830184610191565b92915050565b60006101c56101d6565b90506101d18282610288565b919050565b6000604051905090565b600067ffffffffffffffff8211156101fb576101fa6102b9565b5b610204826102fc565b9050602081019050919050565b600061021c8261024f565b9050919050565b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b82818337600083830152505050565b610291826102fc565b810181811067ffffffffffffffff821117156102b0576102af6102b9565b5b80604052505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b61031681610211565b811461032157600080fd5b50565b61032d8161026f565b811461033857600080fd5b5056fea26469706673582212200a76a0186d484877672ebd47ff5e80fd27fea8bae3e3fce7e74ec288305be02264736f6c63430008070033",
							"opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x2B JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x150B7A02 EQ PUSH2 0x30 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x4A PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x45 SWAP2 SWAP1 PUSH2 0x10E JUMP JUMPDEST PUSH2 0x60 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x57 SWAP2 SWAP1 PUSH2 0x1A0 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH1 0x0 PUSH4 0x150B7A02 PUSH1 0xE0 SHL SWAP1 POP SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x87 PUSH2 0x82 DUP5 PUSH2 0x1E0 JUMP JUMPDEST PUSH2 0x1BB JUMP JUMPDEST SWAP1 POP DUP3 DUP2 MSTORE PUSH1 0x20 DUP2 ADD DUP5 DUP5 DUP5 ADD GT ISZERO PUSH2 0xA3 JUMPI PUSH2 0xA2 PUSH2 0x2ED JUMP JUMPDEST JUMPDEST PUSH2 0xAE DUP5 DUP3 DUP6 PUSH2 0x279 JUMP JUMPDEST POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0xC5 DUP2 PUSH2 0x30D JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0xE0 JUMPI PUSH2 0xDF PUSH2 0x2E8 JUMP JUMPDEST JUMPDEST DUP2 CALLDATALOAD PUSH2 0xF0 DUP5 DUP3 PUSH1 0x20 DUP7 ADD PUSH2 0x74 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x108 DUP2 PUSH2 0x324 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x80 DUP6 DUP8 SUB SLT ISZERO PUSH2 0x128 JUMPI PUSH2 0x127 PUSH2 0x2F7 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x136 DUP8 DUP3 DUP9 ADD PUSH2 0xB6 JUMP JUMPDEST SWAP5 POP POP PUSH1 0x20 PUSH2 0x147 DUP8 DUP3 DUP9 ADD PUSH2 0xB6 JUMP JUMPDEST SWAP4 POP POP PUSH1 0x40 PUSH2 0x158 DUP8 DUP3 DUP9 ADD PUSH2 0xF9 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x60 DUP6 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x179 JUMPI PUSH2 0x178 PUSH2 0x2F2 JUMP JUMPDEST JUMPDEST PUSH2 0x185 DUP8 DUP3 DUP9 ADD PUSH2 0xCB JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP6 SWAP2 SWAP5 POP SWAP3 POP JUMP JUMPDEST PUSH2 0x19A DUP2 PUSH2 0x223 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x1B5 PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x191 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1C5 PUSH2 0x1D6 JUMP JUMPDEST SWAP1 POP PUSH2 0x1D1 DUP3 DUP3 PUSH2 0x288 JUMP JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT ISZERO PUSH2 0x1FB JUMPI PUSH2 0x1FA PUSH2 0x2B9 JUMP JUMPDEST JUMPDEST PUSH2 0x204 DUP3 PUSH2 0x2FC JUMP JUMPDEST SWAP1 POP PUSH1 0x20 DUP2 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x21C DUP3 PUSH2 0x24F JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST DUP3 DUP2 DUP4 CALLDATACOPY PUSH1 0x0 DUP4 DUP4 ADD MSTORE POP POP POP JUMP JUMPDEST PUSH2 0x291 DUP3 PUSH2 0x2FC JUMP JUMPDEST DUP2 ADD DUP2 DUP2 LT PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT OR ISZERO PUSH2 0x2B0 JUMPI PUSH2 0x2AF PUSH2 0x2B9 JUMP JUMPDEST JUMPDEST DUP1 PUSH1 0x40 MSTORE POP POP POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x1F NOT PUSH1 0x1F DUP4 ADD AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x316 DUP2 PUSH2 0x211 JUMP JUMPDEST DUP2 EQ PUSH2 0x321 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH2 0x32D DUP2 PUSH2 0x26F JUMP JUMPDEST DUP2 EQ PUSH2 0x338 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 EXP PUSH23 0xA0186D484877672EBD47FF5E80FD27FEA8BAE3E3FCE7E7 0x4E 0xC2 DUP9 ADDRESS JUMPDEST 0xE0 0x22 PUSH5 0x736F6C6343 STOP ADDMOD SMOD STOP CALLER ",
							"sourceMap": "399:391:4:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;588:200;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;;726:6;751:30;;;744:37;;588:200;;;;;;:::o;7:410:9:-;84:5;109:65;125:48;166:6;125:48;:::i;:::-;109:65;:::i;:::-;100:74;;197:6;190:5;183:21;235:4;228:5;224:16;273:3;264:6;259:3;255:16;252:25;249:112;;;280:79;;:::i;:::-;249:112;370:41;404:6;399:3;394;370:41;:::i;:::-;90:327;7:410;;;;;:::o;423:139::-;469:5;507:6;494:20;485:29;;523:33;550:5;523:33;:::i;:::-;423:139;;;;:::o;581:338::-;636:5;685:3;678:4;670:6;666:17;662:27;652:122;;693:79;;:::i;:::-;652:122;810:6;797:20;835:78;909:3;901:6;894:4;886:6;882:17;835:78;:::i;:::-;826:87;;642:277;581:338;;;;:::o;925:139::-;971:5;1009:6;996:20;987:29;;1025:33;1052:5;1025:33;:::i;:::-;925:139;;;;:::o;1070:943::-;1165:6;1173;1181;1189;1238:3;1226:9;1217:7;1213:23;1209:33;1206:120;;;1245:79;;:::i;:::-;1206:120;1365:1;1390:53;1435:7;1426:6;1415:9;1411:22;1390:53;:::i;:::-;1380:63;;1336:117;1492:2;1518:53;1563:7;1554:6;1543:9;1539:22;1518:53;:::i;:::-;1508:63;;1463:118;1620:2;1646:53;1691:7;1682:6;1671:9;1667:22;1646:53;:::i;:::-;1636:63;;1591:118;1776:2;1765:9;1761:18;1748:32;1807:18;1799:6;1796:30;1793:117;;;1829:79;;:::i;:::-;1793:117;1934:62;1988:7;1979:6;1968:9;1964:22;1934:62;:::i;:::-;1924:72;;1719:287;1070:943;;;;;;;:::o;2019:115::-;2104:23;2121:5;2104:23;:::i;:::-;2099:3;2092:36;2019:115;;:::o;2140:218::-;2231:4;2269:2;2258:9;2254:18;2246:26;;2282:69;2348:1;2337:9;2333:17;2324:6;2282:69;:::i;:::-;2140:218;;;;:::o;2364:129::-;2398:6;2425:20;;:::i;:::-;2415:30;;2454:33;2482:4;2474:6;2454:33;:::i;:::-;2364:129;;;:::o;2499:75::-;2532:6;2565:2;2559:9;2549:19;;2499:75;:::o;2580:307::-;2641:4;2731:18;2723:6;2720:30;2717:56;;;2753:18;;:::i;:::-;2717:56;2791:29;2813:6;2791:29;:::i;:::-;2783:37;;2875:4;2869;2865:15;2857:23;;2580:307;;;:::o;2893:96::-;2930:7;2959:24;2977:5;2959:24;:::i;:::-;2948:35;;2893:96;;;:::o;2995:149::-;3031:7;3071:66;3064:5;3060:78;3049:89;;2995:149;;;:::o;3150:126::-;3187:7;3227:42;3220:5;3216:54;3205:65;;3150:126;;;:::o;3282:77::-;3319:7;3348:5;3337:16;;3282:77;;;:::o;3365:154::-;3449:6;3444:3;3439;3426:30;3511:1;3502:6;3497:3;3493:16;3486:27;3365:154;;;:::o;3525:281::-;3608:27;3630:4;3608:27;:::i;:::-;3600:6;3596:40;3738:6;3726:10;3723:22;3702:18;3690:10;3687:34;3684:62;3681:88;;;3749:18;;:::i;:::-;3681:88;3789:10;3785:2;3778:22;3568:238;3525:281;;:::o;3812:180::-;3860:77;3857:1;3850:88;3957:4;3954:1;3947:15;3981:4;3978:1;3971:15;3998:117;4107:1;4104;4097:12;4121:117;4230:1;4227;4220:12;4244:117;4353:1;4350;4343:12;4367:117;4476:1;4473;4466:12;4490:102;4531:6;4582:2;4578:7;4573:2;4566:5;4562:14;4558:28;4548:38;;4490:102;;;:::o;4598:122::-;4671:24;4689:5;4671:24;:::i;:::-;4664:5;4661:35;4651:63;;4710:1;4707;4700:12;4651:63;4598:122;:::o;4726:::-;4799:24;4817:5;4799:24;:::i;:::-;4792:5;4789:35;4779:63;;4838:1;4835;4828:12;4779:63;4726:122;:::o"
						},
						"gasEstimates": {
							"creation": {
								"codeDepositCost": "176200",
								"executionCost": "220",
								"totalCost": "176420"
							},
							"external": {
								"onERC721Received(address,address,uint256,bytes)": "infinite"
							}
						},
						"legacyAssembly": {
							".code": [
								{
									"begin": 399,
									"end": 790,
									"name": "PUSH",
									"source": 4,
									"value": "80"
								},
								{
									"begin": 399,
									"end": 790,
									"name": "PUSH",
									"source": 4,
									"value": "40"
								},
								{
									"begin": 399,
									"end": 790,
									"name": "MSTORE",
									"source": 4
								},
								{
									"begin": 399,
									"end": 790,
									"name": "CALLVALUE",
									"source": 4
								},
								{
									"begin": 399,
									"end": 790,
									"name": "DUP1",
									"source": 4
								},
								{
									"begin": 399,
									"end": 790,
									"name": "ISZERO",
									"source": 4
								},
								{
									"begin": 399,
									"end": 790,
									"name": "PUSH [tag]",
									"source": 4,
									"value": "1"
								},
								{
									"begin": 399,
									"end": 790,
									"name": "JUMPI",
									"source": 4
								},
								{
									"begin": 399,
									"end": 790,
									"name": "PUSH",
									"source": 4,
									"value": "0"
								},
								{
									"begin": 399,
									"end": 790,
									"name": "DUP1",
									"source": 4
								},
								{
									"begin": 399,
									"end": 790,
									"name": "REVERT",
									"source": 4
								},
								{
									"begin": 399,
									"end": 790,
									"name": "tag",
									"source": 4,
									"value": "1"
								},
								{
									"begin": 399,
									"end": 790,
									"name": "JUMPDEST",
									"source": 4
								},
								{
									"begin": 399,
									"end": 790,
									"name": "POP",
									"source": 4
								},
								{
									"begin": 399,
									"end": 790,
									"name": "PUSH #[$]",
									"source": 4,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 399,
									"end": 790,
									"name": "DUP1",
									"source": 4
								},
								{
									"begin": 399,
									"end": 790,
									"name": "PUSH [$]",
									"source": 4,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 399,
									"end": 790,
									"name": "PUSH",
									"source": 4,
									"value": "0"
								},
								{
									"begin": 399,
									"end": 790,
									"name": "CODECOPY",
									"source": 4
								},
								{
									"begin": 399,
									"end": 790,
									"name": "PUSH",
									"source": 4,
									"value": "0"
								},
								{
									"begin": 399,
									"end": 790,
									"name": "RETURN",
									"source": 4
								}
							],
							".data": {
								"0": {
									".auxdata": "a26469706673582212200a76a0186d484877672ebd47ff5e80fd27fea8bae3e3fce7e74ec288305be02264736f6c63430008070033",
									".code": [
										{
											"begin": 399,
											"end": 790,
											"name": "PUSH",
											"source": 4,
											"value": "80"
										},
										{
											"begin": 399,
											"end": 790,
											"name": "PUSH",
											"source": 4,
											"value": "40"
										},
										{
											"begin": 399,
											"end": 790,
											"name": "MSTORE",
											"source": 4
										},
										{
											"begin": 399,
											"end": 790,
											"name": "CALLVALUE",
											"source": 4
										},
										{
											"begin": 399,
											"end": 790,
											"name": "DUP1",
											"source": 4
										},
										{
											"begin": 399,
											"end": 790,
											"name": "ISZERO",
											"source": 4
										},
										{
											"begin": 399,
											"end": 790,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "1"
										},
										{
											"begin": 399,
											"end": 790,
											"name": "JUMPI",
											"source": 4
										},
										{
											"begin": 399,
											"end": 790,
											"name": "PUSH",
											"source": 4,
											"value": "0"
										},
										{
											"begin": 399,
											"end": 790,
											"name": "DUP1",
											"source": 4
										},
										{
											"begin": 399,
											"end": 790,
											"name": "REVERT",
											"source": 4
										},
										{
											"begin": 399,
											"end": 790,
											"name": "tag",
											"source": 4,
											"value": "1"
										},
										{
											"begin": 399,
											"end": 790,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 399,
											"end": 790,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 399,
											"end": 790,
											"name": "PUSH",
											"source": 4,
											"value": "4"
										},
										{
											"begin": 399,
											"end": 790,
											"name": "CALLDATASIZE",
											"source": 4
										},
										{
											"begin": 399,
											"end": 790,
											"name": "LT",
											"source": 4
										},
										{
											"begin": 399,
											"end": 790,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "2"
										},
										{
											"begin": 399,
											"end": 790,
											"name": "JUMPI",
											"source": 4
										},
										{
											"begin": 399,
											"end": 790,
											"name": "PUSH",
											"source": 4,
											"value": "0"
										},
										{
											"begin": 399,
											"end": 790,
											"name": "CALLDATALOAD",
											"source": 4
										},
										{
											"begin": 399,
											"end": 790,
											"name": "PUSH",
											"source": 4,
											"value": "E0"
										},
										{
											"begin": 399,
											"end": 790,
											"name": "SHR",
											"source": 4
										},
										{
											"begin": 399,
											"end": 790,
											"name": "DUP1",
											"source": 4
										},
										{
											"begin": 399,
											"end": 790,
											"name": "PUSH",
											"source": 4,
											"value": "150B7A02"
										},
										{
											"begin": 399,
											"end": 790,
											"name": "EQ",
											"source": 4
										},
										{
											"begin": 399,
											"end": 790,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "3"
										},
										{
											"begin": 399,
											"end": 790,
											"name": "JUMPI",
											"source": 4
										},
										{
											"begin": 399,
											"end": 790,
											"name": "tag",
											"source": 4,
											"value": "2"
										},
										{
											"begin": 399,
											"end": 790,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 399,
											"end": 790,
											"name": "PUSH",
											"source": 4,
											"value": "0"
										},
										{
											"begin": 399,
											"end": 790,
											"name": "DUP1",
											"source": 4
										},
										{
											"begin": 399,
											"end": 790,
											"name": "REVERT",
											"source": 4
										},
										{
											"begin": 588,
											"end": 788,
											"name": "tag",
											"source": 4,
											"value": "3"
										},
										{
											"begin": 588,
											"end": 788,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 588,
											"end": 788,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "4"
										},
										{
											"begin": 588,
											"end": 788,
											"name": "PUSH",
											"source": 4,
											"value": "4"
										},
										{
											"begin": 588,
											"end": 788,
											"name": "DUP1",
											"source": 4
										},
										{
											"begin": 588,
											"end": 788,
											"name": "CALLDATASIZE",
											"source": 4
										},
										{
											"begin": 588,
											"end": 788,
											"name": "SUB",
											"source": 4
										},
										{
											"begin": 588,
											"end": 788,
											"name": "DUP2",
											"source": 4
										},
										{
											"begin": 588,
											"end": 788,
											"name": "ADD",
											"source": 4
										},
										{
											"begin": 588,
											"end": 788,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 588,
											"end": 788,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "5"
										},
										{
											"begin": 588,
											"end": 788,
											"name": "SWAP2",
											"source": 4
										},
										{
											"begin": 588,
											"end": 788,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 588,
											"end": 788,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "6"
										},
										{
											"begin": 588,
											"end": 788,
											"name": "JUMP",
											"source": 4,
											"value": "[in]"
										},
										{
											"begin": 588,
											"end": 788,
											"name": "tag",
											"source": 4,
											"value": "5"
										},
										{
											"begin": 588,
											"end": 788,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 588,
											"end": 788,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "7"
										},
										{
											"begin": 588,
											"end": 788,
											"name": "JUMP",
											"source": 4,
											"value": "[in]"
										},
										{
											"begin": 588,
											"end": 788,
											"name": "tag",
											"source": 4,
											"value": "4"
										},
										{
											"begin": 588,
											"end": 788,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 588,
											"end": 788,
											"name": "PUSH",
											"source": 4,
											"value": "40"
										},
										{
											"begin": 588,
											"end": 788,
											"name": "MLOAD",
											"source": 4
										},
										{
											"begin": 588,
											"end": 788,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "8"
										},
										{
											"begin": 588,
											"end": 788,
											"name": "SWAP2",
											"source": 4
										},
										{
											"begin": 588,
											"end": 788,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 588,
											"end": 788,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "9"
										},
										{
											"begin": 588,
											"end": 788,
											"name": "JUMP",
											"source": 4,
											"value": "[in]"
										},
										{
											"begin": 588,
											"end": 788,
											"name": "tag",
											"source": 4,
											"value": "8"
										},
										{
											"begin": 588,
											"end": 788,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 588,
											"end": 788,
											"name": "PUSH",
											"source": 4,
											"value": "40"
										},
										{
											"begin": 588,
											"end": 788,
											"name": "MLOAD",
											"source": 4
										},
										{
											"begin": 588,
											"end": 788,
											"name": "DUP1",
											"source": 4
										},
										{
											"begin": 588,
											"end": 788,
											"name": "SWAP2",
											"source": 4
										},
										{
											"begin": 588,
											"end": 788,
											"name": "SUB",
											"source": 4
										},
										{
											"begin": 588,
											"end": 788,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 588,
											"end": 788,
											"name": "RETURN",
											"source": 4
										},
										{
											"begin": 588,
											"end": 788,
											"name": "tag",
											"source": 4,
											"value": "7"
										},
										{
											"begin": 588,
											"end": 788,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 726,
											"end": 732,
											"name": "PUSH",
											"source": 4,
											"value": "0"
										},
										{
											"begin": 751,
											"end": 781,
											"name": "PUSH",
											"source": 4,
											"value": "150B7A02"
										},
										{
											"begin": 751,
											"end": 781,
											"name": "PUSH",
											"source": 4,
											"value": "E0"
										},
										{
											"begin": 751,
											"end": 781,
											"name": "SHL",
											"source": 4
										},
										{
											"begin": 744,
											"end": 781,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 744,
											"end": 781,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 588,
											"end": 788,
											"name": "SWAP5",
											"source": 4
										},
										{
											"begin": 588,
											"end": 788,
											"name": "SWAP4",
											"source": 4
										},
										{
											"begin": 588,
											"end": 788,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 588,
											"end": 788,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 588,
											"end": 788,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 588,
											"end": 788,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 588,
											"end": 788,
											"name": "JUMP",
											"source": 4,
											"value": "[out]"
										},
										{
											"begin": 7,
											"end": 417,
											"name": "tag",
											"source": 9,
											"value": "12"
										},
										{
											"begin": 7,
											"end": 417,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 84,
											"end": 89,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 109,
											"end": 174,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "14"
										},
										{
											"begin": 125,
											"end": 173,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "15"
										},
										{
											"begin": 166,
											"end": 172,
											"name": "DUP5",
											"source": 9
										},
										{
											"begin": 125,
											"end": 173,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "16"
										},
										{
											"begin": 125,
											"end": 173,
											"name": "JUMP",
											"source": 9,
											"value": "[in]"
										},
										{
											"begin": 125,
											"end": 173,
											"name": "tag",
											"source": 9,
											"value": "15"
										},
										{
											"begin": 125,
											"end": 173,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 109,
											"end": 174,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "17"
										},
										{
											"begin": 109,
											"end": 174,
											"name": "JUMP",
											"source": 9,
											"value": "[in]"
										},
										{
											"begin": 109,
											"end": 174,
											"name": "tag",
											"source": 9,
											"value": "14"
										},
										{
											"begin": 109,
											"end": 174,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 100,
											"end": 174,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 100,
											"end": 174,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 197,
											"end": 203,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 190,
											"end": 195,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 183,
											"end": 204,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 235,
											"end": 239,
											"name": "PUSH",
											"source": 9,
											"value": "20"
										},
										{
											"begin": 228,
											"end": 233,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 224,
											"end": 240,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 273,
											"end": 276,
											"name": "DUP5",
											"source": 9
										},
										{
											"begin": 264,
											"end": 270,
											"name": "DUP5",
											"source": 9
										},
										{
											"begin": 259,
											"end": 262,
											"name": "DUP5",
											"source": 9
										},
										{
											"begin": 255,
											"end": 271,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 252,
											"end": 277,
											"name": "GT",
											"source": 9
										},
										{
											"begin": 249,
											"end": 361,
											"name": "ISZERO",
											"source": 9
										},
										{
											"begin": 249,
											"end": 361,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "18"
										},
										{
											"begin": 249,
											"end": 361,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 280,
											"end": 359,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "19"
										},
										{
											"begin": 280,
											"end": 359,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "20"
										},
										{
											"begin": 280,
											"end": 359,
											"name": "JUMP",
											"source": 9,
											"value": "[in]"
										},
										{
											"begin": 280,
											"end": 359,
											"name": "tag",
											"source": 9,
											"value": "19"
										},
										{
											"begin": 280,
											"end": 359,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 249,
											"end": 361,
											"name": "tag",
											"source": 9,
											"value": "18"
										},
										{
											"begin": 249,
											"end": 361,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 370,
											"end": 411,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "21"
										},
										{
											"begin": 404,
											"end": 410,
											"name": "DUP5",
											"source": 9
										},
										{
											"begin": 399,
											"end": 402,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 394,
											"end": 397,
											"name": "DUP6",
											"source": 9
										},
										{
											"begin": 370,
											"end": 411,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "22"
										},
										{
											"begin": 370,
											"end": 411,
											"name": "JUMP",
											"source": 9,
											"value": "[in]"
										},
										{
											"begin": 370,
											"end": 411,
											"name": "tag",
											"source": 9,
											"value": "21"
										},
										{
											"begin": 370,
											"end": 411,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 90,
											"end": 417,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 7,
											"end": 417,
											"name": "SWAP4",
											"source": 9
										},
										{
											"begin": 7,
											"end": 417,
											"name": "SWAP3",
											"source": 9
										},
										{
											"begin": 7,
											"end": 417,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 7,
											"end": 417,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 7,
											"end": 417,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 7,
											"end": 417,
											"name": "JUMP",
											"source": 9,
											"value": "[out]"
										},
										{
											"begin": 423,
											"end": 562,
											"name": "tag",
											"source": 9,
											"value": "23"
										},
										{
											"begin": 423,
											"end": 562,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 469,
											"end": 474,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 507,
											"end": 513,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 494,
											"end": 514,
											"name": "CALLDATALOAD",
											"source": 9
										},
										{
											"begin": 485,
											"end": 514,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 485,
											"end": 514,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 523,
											"end": 556,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "25"
										},
										{
											"begin": 550,
											"end": 555,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 523,
											"end": 556,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "26"
										},
										{
											"begin": 523,
											"end": 556,
											"name": "JUMP",
											"source": 9,
											"value": "[in]"
										},
										{
											"begin": 523,
											"end": 556,
											"name": "tag",
											"source": 9,
											"value": "25"
										},
										{
											"begin": 523,
											"end": 556,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 423,
											"end": 562,
											"name": "SWAP3",
											"source": 9
										},
										{
											"begin": 423,
											"end": 562,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 423,
											"end": 562,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 423,
											"end": 562,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 423,
											"end": 562,
											"name": "JUMP",
											"source": 9,
											"value": "[out]"
										},
										{
											"begin": 581,
											"end": 919,
											"name": "tag",
											"source": 9,
											"value": "27"
										},
										{
											"begin": 581,
											"end": 919,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 636,
											"end": 641,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 685,
											"end": 688,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 678,
											"end": 682,
											"name": "PUSH",
											"source": 9,
											"value": "1F"
										},
										{
											"begin": 670,
											"end": 676,
											"name": "DUP4",
											"source": 9
										},
										{
											"begin": 666,
											"end": 683,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 662,
											"end": 689,
											"name": "SLT",
											"source": 9
										},
										{
											"begin": 652,
											"end": 774,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "29"
										},
										{
											"begin": 652,
											"end": 774,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 693,
											"end": 772,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "30"
										},
										{
											"begin": 693,
											"end": 772,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "31"
										},
										{
											"begin": 693,
											"end": 772,
											"name": "JUMP",
											"source": 9,
											"value": "[in]"
										},
										{
											"begin": 693,
											"end": 772,
											"name": "tag",
											"source": 9,
											"value": "30"
										},
										{
											"begin": 693,
											"end": 772,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 652,
											"end": 774,
											"name": "tag",
											"source": 9,
											"value": "29"
										},
										{
											"begin": 652,
											"end": 774,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 810,
											"end": 816,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 797,
											"end": 817,
											"name": "CALLDATALOAD",
											"source": 9
										},
										{
											"begin": 835,
											"end": 913,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "32"
										},
										{
											"begin": 909,
											"end": 912,
											"name": "DUP5",
											"source": 9
										},
										{
											"begin": 901,
											"end": 907,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 894,
											"end": 898,
											"name": "PUSH",
											"source": 9,
											"value": "20"
										},
										{
											"begin": 886,
											"end": 892,
											"name": "DUP7",
											"source": 9
										},
										{
											"begin": 882,
											"end": 899,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 835,
											"end": 913,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "12"
										},
										{
											"begin": 835,
											"end": 913,
											"name": "JUMP",
											"source": 9,
											"value": "[in]"
										},
										{
											"begin": 835,
											"end": 913,
											"name": "tag",
											"source": 9,
											"value": "32"
										},
										{
											"begin": 835,
											"end": 913,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 826,
											"end": 913,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 826,
											"end": 913,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 642,
											"end": 919,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 581,
											"end": 919,
											"name": "SWAP3",
											"source": 9
										},
										{
											"begin": 581,
											"end": 919,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 581,
											"end": 919,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 581,
											"end": 919,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 581,
											"end": 919,
											"name": "JUMP",
											"source": 9,
											"value": "[out]"
										},
										{
											"begin": 925,
											"end": 1064,
											"name": "tag",
											"source": 9,
											"value": "33"
										},
										{
											"begin": 925,
											"end": 1064,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 971,
											"end": 976,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 1009,
											"end": 1015,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 996,
											"end": 1016,
											"name": "CALLDATALOAD",
											"source": 9
										},
										{
											"begin": 987,
											"end": 1016,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 987,
											"end": 1016,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 1025,
											"end": 1058,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "35"
										},
										{
											"begin": 1052,
											"end": 1057,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 1025,
											"end": 1058,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "36"
										},
										{
											"begin": 1025,
											"end": 1058,
											"name": "JUMP",
											"source": 9,
											"value": "[in]"
										},
										{
											"begin": 1025,
											"end": 1058,
											"name": "tag",
											"source": 9,
											"value": "35"
										},
										{
											"begin": 1025,
											"end": 1058,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 925,
											"end": 1064,
											"name": "SWAP3",
											"source": 9
										},
										{
											"begin": 925,
											"end": 1064,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 925,
											"end": 1064,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 925,
											"end": 1064,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 925,
											"end": 1064,
											"name": "JUMP",
											"source": 9,
											"value": "[out]"
										},
										{
											"begin": 1070,
											"end": 2013,
											"name": "tag",
											"source": 9,
											"value": "6"
										},
										{
											"begin": 1070,
											"end": 2013,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 1165,
											"end": 1171,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 1173,
											"end": 1179,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 1181,
											"end": 1187,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 1189,
											"end": 1195,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 1238,
											"end": 1241,
											"name": "PUSH",
											"source": 9,
											"value": "80"
										},
										{
											"begin": 1226,
											"end": 1235,
											"name": "DUP6",
											"source": 9
										},
										{
											"begin": 1217,
											"end": 1224,
											"name": "DUP8",
											"source": 9
										},
										{
											"begin": 1213,
											"end": 1236,
											"name": "SUB",
											"source": 9
										},
										{
											"begin": 1209,
											"end": 1242,
											"name": "SLT",
											"source": 9
										},
										{
											"begin": 1206,
											"end": 1326,
											"name": "ISZERO",
											"source": 9
										},
										{
											"begin": 1206,
											"end": 1326,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "38"
										},
										{
											"begin": 1206,
											"end": 1326,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 1245,
											"end": 1324,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "39"
										},
										{
											"begin": 1245,
											"end": 1324,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "40"
										},
										{
											"begin": 1245,
											"end": 1324,
											"name": "JUMP",
											"source": 9,
											"value": "[in]"
										},
										{
											"begin": 1245,
											"end": 1324,
											"name": "tag",
											"source": 9,
											"value": "39"
										},
										{
											"begin": 1245,
											"end": 1324,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 1206,
											"end": 1326,
											"name": "tag",
											"source": 9,
											"value": "38"
										},
										{
											"begin": 1206,
											"end": 1326,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 1365,
											"end": 1366,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 1390,
											"end": 1443,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "41"
										},
										{
											"begin": 1435,
											"end": 1442,
											"name": "DUP8",
											"source": 9
										},
										{
											"begin": 1426,
											"end": 1432,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 1415,
											"end": 1424,
											"name": "DUP9",
											"source": 9
										},
										{
											"begin": 1411,
											"end": 1433,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 1390,
											"end": 1443,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "23"
										},
										{
											"begin": 1390,
											"end": 1443,
											"name": "JUMP",
											"source": 9,
											"value": "[in]"
										},
										{
											"begin": 1390,
											"end": 1443,
											"name": "tag",
											"source": 9,
											"value": "41"
										},
										{
											"begin": 1390,
											"end": 1443,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 1380,
											"end": 1443,
											"name": "SWAP5",
											"source": 9
										},
										{
											"begin": 1380,
											"end": 1443,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 1336,
											"end": 1453,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 1492,
											"end": 1494,
											"name": "PUSH",
											"source": 9,
											"value": "20"
										},
										{
											"begin": 1518,
											"end": 1571,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "42"
										},
										{
											"begin": 1563,
											"end": 1570,
											"name": "DUP8",
											"source": 9
										},
										{
											"begin": 1554,
											"end": 1560,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 1543,
											"end": 1552,
											"name": "DUP9",
											"source": 9
										},
										{
											"begin": 1539,
											"end": 1561,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 1518,
											"end": 1571,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "23"
										},
										{
											"begin": 1518,
											"end": 1571,
											"name": "JUMP",
											"source": 9,
											"value": "[in]"
										},
										{
											"begin": 1518,
											"end": 1571,
											"name": "tag",
											"source": 9,
											"value": "42"
										},
										{
											"begin": 1518,
											"end": 1571,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 1508,
											"end": 1571,
											"name": "SWAP4",
											"source": 9
										},
										{
											"begin": 1508,
											"end": 1571,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 1463,
											"end": 1581,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 1620,
											"end": 1622,
											"name": "PUSH",
											"source": 9,
											"value": "40"
										},
										{
											"begin": 1646,
											"end": 1699,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "43"
										},
										{
											"begin": 1691,
											"end": 1698,
											"name": "DUP8",
											"source": 9
										},
										{
											"begin": 1682,
											"end": 1688,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 1671,
											"end": 1680,
											"name": "DUP9",
											"source": 9
										},
										{
											"begin": 1667,
											"end": 1689,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 1646,
											"end": 1699,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "33"
										},
										{
											"begin": 1646,
											"end": 1699,
											"name": "JUMP",
											"source": 9,
											"value": "[in]"
										},
										{
											"begin": 1646,
											"end": 1699,
											"name": "tag",
											"source": 9,
											"value": "43"
										},
										{
											"begin": 1646,
											"end": 1699,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 1636,
											"end": 1699,
											"name": "SWAP3",
											"source": 9
										},
										{
											"begin": 1636,
											"end": 1699,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 1591,
											"end": 1709,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 1776,
											"end": 1778,
											"name": "PUSH",
											"source": 9,
											"value": "60"
										},
										{
											"begin": 1765,
											"end": 1774,
											"name": "DUP6",
											"source": 9
										},
										{
											"begin": 1761,
											"end": 1779,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 1748,
											"end": 1780,
											"name": "CALLDATALOAD",
											"source": 9
										},
										{
											"begin": 1807,
											"end": 1825,
											"name": "PUSH",
											"source": 9,
											"value": "FFFFFFFFFFFFFFFF"
										},
										{
											"begin": 1799,
											"end": 1805,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 1796,
											"end": 1826,
											"name": "GT",
											"source": 9
										},
										{
											"begin": 1793,
											"end": 1910,
											"name": "ISZERO",
											"source": 9
										},
										{
											"begin": 1793,
											"end": 1910,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "44"
										},
										{
											"begin": 1793,
											"end": 1910,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 1829,
											"end": 1908,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "45"
										},
										{
											"begin": 1829,
											"end": 1908,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "46"
										},
										{
											"begin": 1829,
											"end": 1908,
											"name": "JUMP",
											"source": 9,
											"value": "[in]"
										},
										{
											"begin": 1829,
											"end": 1908,
											"name": "tag",
											"source": 9,
											"value": "45"
										},
										{
											"begin": 1829,
											"end": 1908,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 1793,
											"end": 1910,
											"name": "tag",
											"source": 9,
											"value": "44"
										},
										{
											"begin": 1793,
											"end": 1910,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 1934,
											"end": 1996,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "47"
										},
										{
											"begin": 1988,
											"end": 1995,
											"name": "DUP8",
											"source": 9
										},
										{
											"begin": 1979,
											"end": 1985,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 1968,
											"end": 1977,
											"name": "DUP9",
											"source": 9
										},
										{
											"begin": 1964,
											"end": 1986,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 1934,
											"end": 1996,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "27"
										},
										{
											"begin": 1934,
											"end": 1996,
											"name": "JUMP",
											"source": 9,
											"value": "[in]"
										},
										{
											"begin": 1934,
											"end": 1996,
											"name": "tag",
											"source": 9,
											"value": "47"
										},
										{
											"begin": 1934,
											"end": 1996,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 1924,
											"end": 1996,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 1924,
											"end": 1996,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 1719,
											"end": 2006,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 1070,
											"end": 2013,
											"name": "SWAP3",
											"source": 9
										},
										{
											"begin": 1070,
											"end": 2013,
											"name": "SWAP6",
											"source": 9
										},
										{
											"begin": 1070,
											"end": 2013,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 1070,
											"end": 2013,
											"name": "SWAP5",
											"source": 9
										},
										{
											"begin": 1070,
											"end": 2013,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 1070,
											"end": 2013,
											"name": "SWAP3",
											"source": 9
										},
										{
											"begin": 1070,
											"end": 2013,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 1070,
											"end": 2013,
											"name": "JUMP",
											"source": 9,
											"value": "[out]"
										},
										{
											"begin": 2019,
											"end": 2134,
											"name": "tag",
											"source": 9,
											"value": "48"
										},
										{
											"begin": 2019,
											"end": 2134,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 2104,
											"end": 2127,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "50"
										},
										{
											"begin": 2121,
											"end": 2126,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 2104,
											"end": 2127,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "51"
										},
										{
											"begin": 2104,
											"end": 2127,
											"name": "JUMP",
											"source": 9,
											"value": "[in]"
										},
										{
											"begin": 2104,
											"end": 2127,
											"name": "tag",
											"source": 9,
											"value": "50"
										},
										{
											"begin": 2104,
											"end": 2127,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 2099,
											"end": 2102,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 2092,
											"end": 2128,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 2019,
											"end": 2134,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 2019,
											"end": 2134,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 2019,
											"end": 2134,
											"name": "JUMP",
											"source": 9,
											"value": "[out]"
										},
										{
											"begin": 2140,
											"end": 2358,
											"name": "tag",
											"source": 9,
											"value": "9"
										},
										{
											"begin": 2140,
											"end": 2358,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 2231,
											"end": 2235,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 2269,
											"end": 2271,
											"name": "PUSH",
											"source": 9,
											"value": "20"
										},
										{
											"begin": 2258,
											"end": 2267,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 2254,
											"end": 2272,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 2246,
											"end": 2272,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 2246,
											"end": 2272,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 2282,
											"end": 2351,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "53"
										},
										{
											"begin": 2348,
											"end": 2349,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 2337,
											"end": 2346,
											"name": "DUP4",
											"source": 9
										},
										{
											"begin": 2333,
											"end": 2350,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 2324,
											"end": 2330,
											"name": "DUP5",
											"source": 9
										},
										{
											"begin": 2282,
											"end": 2351,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "48"
										},
										{
											"begin": 2282,
											"end": 2351,
											"name": "JUMP",
											"source": 9,
											"value": "[in]"
										},
										{
											"begin": 2282,
											"end": 2351,
											"name": "tag",
											"source": 9,
											"value": "53"
										},
										{
											"begin": 2282,
											"end": 2351,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 2140,
											"end": 2358,
											"name": "SWAP3",
											"source": 9
										},
										{
											"begin": 2140,
											"end": 2358,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 2140,
											"end": 2358,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 2140,
											"end": 2358,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 2140,
											"end": 2358,
											"name": "JUMP",
											"source": 9,
											"value": "[out]"
										},
										{
											"begin": 2364,
											"end": 2493,
											"name": "tag",
											"source": 9,
											"value": "17"
										},
										{
											"begin": 2364,
											"end": 2493,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 2398,
											"end": 2404,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 2425,
											"end": 2445,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "55"
										},
										{
											"begin": 2425,
											"end": 2445,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "56"
										},
										{
											"begin": 2425,
											"end": 2445,
											"name": "JUMP",
											"source": 9,
											"value": "[in]"
										},
										{
											"begin": 2425,
											"end": 2445,
											"name": "tag",
											"source": 9,
											"value": "55"
										},
										{
											"begin": 2425,
											"end": 2445,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 2415,
											"end": 2445,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 2415,
											"end": 2445,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 2454,
											"end": 2487,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "57"
										},
										{
											"begin": 2482,
											"end": 2486,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 2474,
											"end": 2480,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 2454,
											"end": 2487,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "58"
										},
										{
											"begin": 2454,
											"end": 2487,
											"name": "JUMP",
											"source": 9,
											"value": "[in]"
										},
										{
											"begin": 2454,
											"end": 2487,
											"name": "tag",
											"source": 9,
											"value": "57"
										},
										{
											"begin": 2454,
											"end": 2487,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 2364,
											"end": 2493,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 2364,
											"end": 2493,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 2364,
											"end": 2493,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 2364,
											"end": 2493,
											"name": "JUMP",
											"source": 9,
											"value": "[out]"
										},
										{
											"begin": 2499,
											"end": 2574,
											"name": "tag",
											"source": 9,
											"value": "56"
										},
										{
											"begin": 2499,
											"end": 2574,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 2532,
											"end": 2538,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 2565,
											"end": 2567,
											"name": "PUSH",
											"source": 9,
											"value": "40"
										},
										{
											"begin": 2559,
											"end": 2568,
											"name": "MLOAD",
											"source": 9
										},
										{
											"begin": 2549,
											"end": 2568,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 2549,
											"end": 2568,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 2499,
											"end": 2574,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 2499,
											"end": 2574,
											"name": "JUMP",
											"source": 9,
											"value": "[out]"
										},
										{
											"begin": 2580,
											"end": 2887,
											"name": "tag",
											"source": 9,
											"value": "16"
										},
										{
											"begin": 2580,
											"end": 2887,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 2641,
											"end": 2645,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 2731,
											"end": 2749,
											"name": "PUSH",
											"source": 9,
											"value": "FFFFFFFFFFFFFFFF"
										},
										{
											"begin": 2723,
											"end": 2729,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 2720,
											"end": 2750,
											"name": "GT",
											"source": 9
										},
										{
											"begin": 2717,
											"end": 2773,
											"name": "ISZERO",
											"source": 9
										},
										{
											"begin": 2717,
											"end": 2773,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "61"
										},
										{
											"begin": 2717,
											"end": 2773,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 2753,
											"end": 2771,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "62"
										},
										{
											"begin": 2753,
											"end": 2771,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "63"
										},
										{
											"begin": 2753,
											"end": 2771,
											"name": "JUMP",
											"source": 9,
											"value": "[in]"
										},
										{
											"begin": 2753,
											"end": 2771,
											"name": "tag",
											"source": 9,
											"value": "62"
										},
										{
											"begin": 2753,
											"end": 2771,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 2717,
											"end": 2773,
											"name": "tag",
											"source": 9,
											"value": "61"
										},
										{
											"begin": 2717,
											"end": 2773,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 2791,
											"end": 2820,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "64"
										},
										{
											"begin": 2813,
											"end": 2819,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 2791,
											"end": 2820,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "65"
										},
										{
											"begin": 2791,
											"end": 2820,
											"name": "JUMP",
											"source": 9,
											"value": "[in]"
										},
										{
											"begin": 2791,
											"end": 2820,
											"name": "tag",
											"source": 9,
											"value": "64"
										},
										{
											"begin": 2791,
											"end": 2820,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 2783,
											"end": 2820,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 2783,
											"end": 2820,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 2875,
											"end": 2879,
											"name": "PUSH",
											"source": 9,
											"value": "20"
										},
										{
											"begin": 2869,
											"end": 2873,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 2865,
											"end": 2880,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 2857,
											"end": 2880,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 2857,
											"end": 2880,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 2580,
											"end": 2887,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 2580,
											"end": 2887,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 2580,
											"end": 2887,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 2580,
											"end": 2887,
											"name": "JUMP",
											"source": 9,
											"value": "[out]"
										},
										{
											"begin": 2893,
											"end": 2989,
											"name": "tag",
											"source": 9,
											"value": "66"
										},
										{
											"begin": 2893,
											"end": 2989,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 2930,
											"end": 2937,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 2959,
											"end": 2983,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "68"
										},
										{
											"begin": 2977,
											"end": 2982,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 2959,
											"end": 2983,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "69"
										},
										{
											"begin": 2959,
											"end": 2983,
											"name": "JUMP",
											"source": 9,
											"value": "[in]"
										},
										{
											"begin": 2959,
											"end": 2983,
											"name": "tag",
											"source": 9,
											"value": "68"
										},
										{
											"begin": 2959,
											"end": 2983,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 2948,
											"end": 2983,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 2948,
											"end": 2983,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 2893,
											"end": 2989,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 2893,
											"end": 2989,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 2893,
											"end": 2989,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 2893,
											"end": 2989,
											"name": "JUMP",
											"source": 9,
											"value": "[out]"
										},
										{
											"begin": 2995,
											"end": 3144,
											"name": "tag",
											"source": 9,
											"value": "51"
										},
										{
											"begin": 2995,
											"end": 3144,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 3031,
											"end": 3038,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 3071,
											"end": 3137,
											"name": "PUSH",
											"source": 9,
											"value": "FFFFFFFF00000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 3064,
											"end": 3069,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 3060,
											"end": 3138,
											"name": "AND",
											"source": 9
										},
										{
											"begin": 3049,
											"end": 3138,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 3049,
											"end": 3138,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 2995,
											"end": 3144,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 2995,
											"end": 3144,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 2995,
											"end": 3144,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 2995,
											"end": 3144,
											"name": "JUMP",
											"source": 9,
											"value": "[out]"
										},
										{
											"begin": 3150,
											"end": 3276,
											"name": "tag",
											"source": 9,
											"value": "69"
										},
										{
											"begin": 3150,
											"end": 3276,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 3187,
											"end": 3194,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 3227,
											"end": 3269,
											"name": "PUSH",
											"source": 9,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 3220,
											"end": 3225,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 3216,
											"end": 3270,
											"name": "AND",
											"source": 9
										},
										{
											"begin": 3205,
											"end": 3270,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 3205,
											"end": 3270,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 3150,
											"end": 3276,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 3150,
											"end": 3276,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 3150,
											"end": 3276,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 3150,
											"end": 3276,
											"name": "JUMP",
											"source": 9,
											"value": "[out]"
										},
										{
											"begin": 3282,
											"end": 3359,
											"name": "tag",
											"source": 9,
											"value": "72"
										},
										{
											"begin": 3282,
											"end": 3359,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 3319,
											"end": 3326,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 3348,
											"end": 3353,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 3337,
											"end": 3353,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 3337,
											"end": 3353,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 3282,
											"end": 3359,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 3282,
											"end": 3359,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 3282,
											"end": 3359,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 3282,
											"end": 3359,
											"name": "JUMP",
											"source": 9,
											"value": "[out]"
										},
										{
											"begin": 3365,
											"end": 3519,
											"name": "tag",
											"source": 9,
											"value": "22"
										},
										{
											"begin": 3365,
											"end": 3519,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 3449,
											"end": 3455,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 3444,
											"end": 3447,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 3439,
											"end": 3442,
											"name": "DUP4",
											"source": 9
										},
										{
											"begin": 3426,
											"end": 3456,
											"name": "CALLDATACOPY",
											"source": 9
										},
										{
											"begin": 3511,
											"end": 3512,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 3502,
											"end": 3508,
											"name": "DUP4",
											"source": 9
										},
										{
											"begin": 3497,
											"end": 3500,
											"name": "DUP4",
											"source": 9
										},
										{
											"begin": 3493,
											"end": 3509,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 3486,
											"end": 3513,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 3365,
											"end": 3519,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 3365,
											"end": 3519,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 3365,
											"end": 3519,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 3365,
											"end": 3519,
											"name": "JUMP",
											"source": 9,
											"value": "[out]"
										},
										{
											"begin": 3525,
											"end": 3806,
											"name": "tag",
											"source": 9,
											"value": "58"
										},
										{
											"begin": 3525,
											"end": 3806,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 3608,
											"end": 3635,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "76"
										},
										{
											"begin": 3630,
											"end": 3634,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 3608,
											"end": 3635,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "65"
										},
										{
											"begin": 3608,
											"end": 3635,
											"name": "JUMP",
											"source": 9,
											"value": "[in]"
										},
										{
											"begin": 3608,
											"end": 3635,
											"name": "tag",
											"source": 9,
											"value": "76"
										},
										{
											"begin": 3608,
											"end": 3635,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 3600,
											"end": 3606,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 3596,
											"end": 3636,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 3738,
											"end": 3744,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 3726,
											"end": 3736,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 3723,
											"end": 3745,
											"name": "LT",
											"source": 9
										},
										{
											"begin": 3702,
											"end": 3720,
											"name": "PUSH",
											"source": 9,
											"value": "FFFFFFFFFFFFFFFF"
										},
										{
											"begin": 3690,
											"end": 3700,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 3687,
											"end": 3721,
											"name": "GT",
											"source": 9
										},
										{
											"begin": 3684,
											"end": 3746,
											"name": "OR",
											"source": 9
										},
										{
											"begin": 3681,
											"end": 3769,
											"name": "ISZERO",
											"source": 9
										},
										{
											"begin": 3681,
											"end": 3769,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "77"
										},
										{
											"begin": 3681,
											"end": 3769,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 3749,
											"end": 3767,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "78"
										},
										{
											"begin": 3749,
											"end": 3767,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "63"
										},
										{
											"begin": 3749,
											"end": 3767,
											"name": "JUMP",
											"source": 9,
											"value": "[in]"
										},
										{
											"begin": 3749,
											"end": 3767,
											"name": "tag",
											"source": 9,
											"value": "78"
										},
										{
											"begin": 3749,
											"end": 3767,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 3681,
											"end": 3769,
											"name": "tag",
											"source": 9,
											"value": "77"
										},
										{
											"begin": 3681,
											"end": 3769,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 3789,
											"end": 3799,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 3785,
											"end": 3787,
											"name": "PUSH",
											"source": 9,
											"value": "40"
										},
										{
											"begin": 3778,
											"end": 3800,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 3568,
											"end": 3806,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 3525,
											"end": 3806,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 3525,
											"end": 3806,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 3525,
											"end": 3806,
											"name": "JUMP",
											"source": 9,
											"value": "[out]"
										},
										{
											"begin": 3812,
											"end": 3992,
											"name": "tag",
											"source": 9,
											"value": "63"
										},
										{
											"begin": 3812,
											"end": 3992,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 3860,
											"end": 3937,
											"name": "PUSH",
											"source": 9,
											"value": "4E487B7100000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 3857,
											"end": 3858,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 3850,
											"end": 3938,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 3957,
											"end": 3961,
											"name": "PUSH",
											"source": 9,
											"value": "41"
										},
										{
											"begin": 3954,
											"end": 3955,
											"name": "PUSH",
											"source": 9,
											"value": "4"
										},
										{
											"begin": 3947,
											"end": 3962,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 3981,
											"end": 3985,
											"name": "PUSH",
											"source": 9,
											"value": "24"
										},
										{
											"begin": 3978,
											"end": 3979,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 3971,
											"end": 3986,
											"name": "REVERT",
											"source": 9
										},
										{
											"begin": 3998,
											"end": 4115,
											"name": "tag",
											"source": 9,
											"value": "31"
										},
										{
											"begin": 3998,
											"end": 4115,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 4107,
											"end": 4108,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 4104,
											"end": 4105,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 4097,
											"end": 4109,
											"name": "REVERT",
											"source": 9
										},
										{
											"begin": 4121,
											"end": 4238,
											"name": "tag",
											"source": 9,
											"value": "20"
										},
										{
											"begin": 4121,
											"end": 4238,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 4230,
											"end": 4231,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 4227,
											"end": 4228,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 4220,
											"end": 4232,
											"name": "REVERT",
											"source": 9
										},
										{
											"begin": 4244,
											"end": 4361,
											"name": "tag",
											"source": 9,
											"value": "46"
										},
										{
											"begin": 4244,
											"end": 4361,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 4353,
											"end": 4354,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 4350,
											"end": 4351,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 4343,
											"end": 4355,
											"name": "REVERT",
											"source": 9
										},
										{
											"begin": 4367,
											"end": 4484,
											"name": "tag",
											"source": 9,
											"value": "40"
										},
										{
											"begin": 4367,
											"end": 4484,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 4476,
											"end": 4477,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 4473,
											"end": 4474,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 4466,
											"end": 4478,
											"name": "REVERT",
											"source": 9
										},
										{
											"begin": 4490,
											"end": 4592,
											"name": "tag",
											"source": 9,
											"value": "65"
										},
										{
											"begin": 4490,
											"end": 4592,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 4531,
											"end": 4537,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 4582,
											"end": 4584,
											"name": "PUSH",
											"source": 9,
											"value": "1F"
										},
										{
											"begin": 4578,
											"end": 4585,
											"name": "NOT",
											"source": 9
										},
										{
											"begin": 4573,
											"end": 4575,
											"name": "PUSH",
											"source": 9,
											"value": "1F"
										},
										{
											"begin": 4566,
											"end": 4571,
											"name": "DUP4",
											"source": 9
										},
										{
											"begin": 4562,
											"end": 4576,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 4558,
											"end": 4586,
											"name": "AND",
											"source": 9
										},
										{
											"begin": 4548,
											"end": 4586,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 4548,
											"end": 4586,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 4490,
											"end": 4592,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 4490,
											"end": 4592,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 4490,
											"end": 4592,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 4490,
											"end": 4592,
											"name": "JUMP",
											"source": 9,
											"value": "[out]"
										},
										{
											"begin": 4598,
											"end": 4720,
											"name": "tag",
											"source": 9,
											"value": "26"
										},
										{
											"begin": 4598,
											"end": 4720,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 4671,
											"end": 4695,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "86"
										},
										{
											"begin": 4689,
											"end": 4694,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 4671,
											"end": 4695,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "66"
										},
										{
											"begin": 4671,
											"end": 4695,
											"name": "JUMP",
											"source": 9,
											"value": "[in]"
										},
										{
											"begin": 4671,
											"end": 4695,
											"name": "tag",
											"source": 9,
											"value": "86"
										},
										{
											"begin": 4671,
											"end": 4695,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 4664,
											"end": 4669,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 4661,
											"end": 4696,
											"name": "EQ",
											"source": 9
										},
										{
											"begin": 4651,
											"end": 4714,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "87"
										},
										{
											"begin": 4651,
											"end": 4714,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 4710,
											"end": 4711,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 4707,
											"end": 4708,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 4700,
											"end": 4712,
											"name": "REVERT",
											"source": 9
										},
										{
											"begin": 4651,
											"end": 4714,
											"name": "tag",
											"source": 9,
											"value": "87"
										},
										{
											"begin": 4651,
											"end": 4714,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 4598,
											"end": 4720,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 4598,
											"end": 4720,
											"name": "JUMP",
											"source": 9,
											"value": "[out]"
										},
										{
											"begin": 4726,
											"end": 4848,
											"name": "tag",
											"source": 9,
											"value": "36"
										},
										{
											"begin": 4726,
											"end": 4848,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 4799,
											"end": 4823,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "89"
										},
										{
											"begin": 4817,
											"end": 4822,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 4799,
											"end": 4823,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "72"
										},
										{
											"begin": 4799,
											"end": 4823,
											"name": "JUMP",
											"source": 9,
											"value": "[in]"
										},
										{
											"begin": 4799,
											"end": 4823,
											"name": "tag",
											"source": 9,
											"value": "89"
										},
										{
											"begin": 4799,
											"end": 4823,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 4792,
											"end": 4797,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 4789,
											"end": 4824,
											"name": "EQ",
											"source": 9
										},
										{
											"begin": 4779,
											"end": 4842,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "90"
										},
										{
											"begin": 4779,
											"end": 4842,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 4838,
											"end": 4839,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 4835,
											"end": 4836,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 4828,
											"end": 4840,
											"name": "REVERT",
											"source": 9
										},
										{
											"begin": 4779,
											"end": 4842,
											"name": "tag",
											"source": 9,
											"value": "90"
										},
										{
											"begin": 4779,
											"end": 4842,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 4726,
											"end": 4848,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 4726,
											"end": 4848,
											"name": "JUMP",
											"source": 9,
											"value": "[out]"
										}
									]
								}
							}
						},
						"methodIdentifiers": {
							"onERC721Received(address,address,uint256,bytes)": "150b7a02"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.7+commit.e28d00a7\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC721Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Implementation of the {IERC721Receiver} interface. Accepts all token transfers. Make sure the contract is able to use its token with {IERC721-safeTransferFrom}, {IERC721-approve} or {IERC721-setApprovalForAll}.\",\"kind\":\"dev\",\"methods\":{\"onERC721Received(address,address,uint256,bytes)\":{\"details\":\"See {IERC721Receiver-onERC721Received}. Always returns `IERC721Receiver.onERC721Received.selector`.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts@4.7.3/token/ERC721/utils/ERC721Holder.sol\":\"ERC721Holder\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts@4.7.3/token/ERC721/IERC721Receiver.sol\":{\"keccak256\":\"0xa82b58eca1ee256be466e536706850163d2ec7821945abd6b4778cfb3bee37da\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://6e75cf83beb757b8855791088546b8337e9d4684e169400c20d44a515353b708\",\"dweb:/ipfs/QmYvPafLfoquiDMEj7CKHtvbgHu7TJNPSVPSCjrtjV8HjV\"]},\"@openzeppelin/contracts@4.7.3/token/ERC721/utils/ERC721Holder.sol\":{\"keccak256\":\"0x0108bf6a6ebd5f96678bed33a35947537263f96766131ee91461fb6485805028\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://ae2d274bf3d56a6d49a9bbd0a4871c54997a82551eb3eb1c0c39dc98698ff8bf\",\"dweb:/ipfs/QmTT7ty5DPGAmRnx94Xu3TUDYGSPDVLN2bppJAjjedrg1e\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"@openzeppelin/contracts@4.7.3/utils/Context.sol": {
				"Context": {
					"abi": [],
					"devdoc": {
						"details": "Provides information about the current execution context, including the sender of the transaction and its data. While these are generally available via msg.sender and msg.data, they should not be accessed in such a direct manner, since when dealing with meta-transactions the account sending and paying for execution may not be the actual sender (as far as an application is concerned). This contract is only required for intermediate, library-like contracts.",
						"kind": "dev",
						"methods": {},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.7+commit.e28d00a7\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Provides information about the current execution context, including the sender of the transaction and its data. While these are generally available via msg.sender and msg.data, they should not be accessed in such a direct manner, since when dealing with meta-transactions the account sending and paying for execution may not be the actual sender (as far as an application is concerned). This contract is only required for intermediate, library-like contracts.\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts@4.7.3/utils/Context.sol\":\"Context\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts@4.7.3/utils/Context.sol\":{\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://6df0ddf21ce9f58271bdfaa85cde98b200ef242a05a3f85c2bc10a8294800a92\",\"dweb:/ipfs/QmRK2Y5Yc6BK7tGKkgsgn3aJEQGi5aakeSPZvS65PV8Xp3\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"@openzeppelin/contracts@4.7.3/utils/Counters.sol": {
				"Counters": {
					"abi": [],
					"devdoc": {
						"author": "Matt Condon (@shrugs)",
						"details": "Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number of elements in a mapping, issuing ERC721 ids, or counting request ids. Include with `using Counters for Counters.Counter;`",
						"kind": "dev",
						"methods": {},
						"title": "Counters",
						"version": 1
					},
					"evm": {
						"assembly": "    /* \"@openzeppelin/contracts@4.7.3/utils/Counters.sol\":424:1395  library Counters {... */\n  dataSize(sub_0)\n  dataOffset(sub_0)\n  0x0b\n  dup3\n  dup3\n  dup3\n  codecopy\n  dup1\n  mload\n  0x00\n  byte\n  0x73\n  eq\n  tag_1\n  jumpi\n  mstore(0x00, 0x4e487b7100000000000000000000000000000000000000000000000000000000)\n  mstore(0x04, 0x00)\n  revert(0x00, 0x24)\ntag_1:\n  mstore(0x00, address)\n  0x73\n  dup2\n  mstore8\n  dup3\n  dup2\n  return\nstop\n\nsub_0: assembly {\n        /* \"@openzeppelin/contracts@4.7.3/utils/Counters.sol\":424:1395  library Counters {... */\n      eq(address, deployTimeAddress())\n      mstore(0x40, 0x80)\n      0x00\n      dup1\n      revert\n\n    auxdata: 0xa26469706673582212200b36608db0ea5bc4dd633c21f81b3e8c2fbe48bb0a88a4525f71a36b1fe7b76464736f6c63430008070033\n}\n",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "60566050600b82828239805160001a6073146043577f4e487b7100000000000000000000000000000000000000000000000000000000600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea26469706673582212200b36608db0ea5bc4dd633c21f81b3e8c2fbe48bb0a88a4525f71a36b1fe7b76464736f6c63430008070033",
							"opcodes": "PUSH1 0x56 PUSH1 0x50 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x43 JUMPI PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 SIGNEXTEND CALLDATASIZE PUSH1 0x8D 0xB0 0xEA JUMPDEST 0xC4 0xDD PUSH4 0x3C21F81B RETURNDATACOPY DUP13 0x2F 0xBE BASEFEE 0xBB EXP DUP9 LOG4 MSTORE 0x5F PUSH18 0xA36B1FE7B76464736F6C6343000807003300 ",
							"sourceMap": "424:971:6:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "73000000000000000000000000000000000000000030146080604052600080fdfea26469706673582212200b36608db0ea5bc4dd633c21f81b3e8c2fbe48bb0a88a4525f71a36b1fe7b76464736f6c63430008070033",
							"opcodes": "PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 SIGNEXTEND CALLDATASIZE PUSH1 0x8D 0xB0 0xEA JUMPDEST 0xC4 0xDD PUSH4 0x3C21F81B RETURNDATACOPY DUP13 0x2F 0xBE BASEFEE 0xBB EXP DUP9 LOG4 MSTORE 0x5F PUSH18 0xA36B1FE7B76464736F6C6343000807003300 ",
							"sourceMap": "424:971:6:-:0;;;;;;;;"
						},
						"gasEstimates": {
							"creation": {
								"codeDepositCost": "17200",
								"executionCost": "97",
								"totalCost": "17297"
							},
							"internal": {
								"current(struct Counters.Counter storage pointer)": "infinite",
								"decrement(struct Counters.Counter storage pointer)": "infinite",
								"increment(struct Counters.Counter storage pointer)": "infinite",
								"reset(struct Counters.Counter storage pointer)": "infinite"
							}
						},
						"legacyAssembly": {
							".code": [
								{
									"begin": 424,
									"end": 1395,
									"name": "PUSH #[$]",
									"source": 6,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 424,
									"end": 1395,
									"name": "PUSH [$]",
									"source": 6,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 424,
									"end": 1395,
									"name": "PUSH",
									"source": 6,
									"value": "B"
								},
								{
									"begin": 424,
									"end": 1395,
									"name": "DUP3",
									"source": 6
								},
								{
									"begin": 424,
									"end": 1395,
									"name": "DUP3",
									"source": 6
								},
								{
									"begin": 424,
									"end": 1395,
									"name": "DUP3",
									"source": 6
								},
								{
									"begin": 424,
									"end": 1395,
									"name": "CODECOPY",
									"source": 6
								},
								{
									"begin": 424,
									"end": 1395,
									"name": "DUP1",
									"source": 6
								},
								{
									"begin": 424,
									"end": 1395,
									"name": "MLOAD",
									"source": 6
								},
								{
									"begin": 424,
									"end": 1395,
									"name": "PUSH",
									"source": 6,
									"value": "0"
								},
								{
									"begin": 424,
									"end": 1395,
									"name": "BYTE",
									"source": 6
								},
								{
									"begin": 424,
									"end": 1395,
									"name": "PUSH",
									"source": 6,
									"value": "73"
								},
								{
									"begin": 424,
									"end": 1395,
									"name": "EQ",
									"source": 6
								},
								{
									"begin": 424,
									"end": 1395,
									"name": "PUSH [tag]",
									"source": 6,
									"value": "1"
								},
								{
									"begin": 424,
									"end": 1395,
									"name": "JUMPI",
									"source": 6
								},
								{
									"begin": 424,
									"end": 1395,
									"name": "PUSH",
									"source": 6,
									"value": "4E487B7100000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 424,
									"end": 1395,
									"name": "PUSH",
									"source": 6,
									"value": "0"
								},
								{
									"begin": 424,
									"end": 1395,
									"name": "MSTORE",
									"source": 6
								},
								{
									"begin": 424,
									"end": 1395,
									"name": "PUSH",
									"source": 6,
									"value": "0"
								},
								{
									"begin": 424,
									"end": 1395,
									"name": "PUSH",
									"source": 6,
									"value": "4"
								},
								{
									"begin": 424,
									"end": 1395,
									"name": "MSTORE",
									"source": 6
								},
								{
									"begin": 424,
									"end": 1395,
									"name": "PUSH",
									"source": 6,
									"value": "24"
								},
								{
									"begin": 424,
									"end": 1395,
									"name": "PUSH",
									"source": 6,
									"value": "0"
								},
								{
									"begin": 424,
									"end": 1395,
									"name": "REVERT",
									"source": 6
								},
								{
									"begin": 424,
									"end": 1395,
									"name": "tag",
									"source": 6,
									"value": "1"
								},
								{
									"begin": 424,
									"end": 1395,
									"name": "JUMPDEST",
									"source": 6
								},
								{
									"begin": 424,
									"end": 1395,
									"name": "ADDRESS",
									"source": 6
								},
								{
									"begin": 424,
									"end": 1395,
									"name": "PUSH",
									"source": 6,
									"value": "0"
								},
								{
									"begin": 424,
									"end": 1395,
									"name": "MSTORE",
									"source": 6
								},
								{
									"begin": 424,
									"end": 1395,
									"name": "PUSH",
									"source": 6,
									"value": "73"
								},
								{
									"begin": 424,
									"end": 1395,
									"name": "DUP2",
									"source": 6
								},
								{
									"begin": 424,
									"end": 1395,
									"name": "MSTORE8",
									"source": 6
								},
								{
									"begin": 424,
									"end": 1395,
									"name": "DUP3",
									"source": 6
								},
								{
									"begin": 424,
									"end": 1395,
									"name": "DUP2",
									"source": 6
								},
								{
									"begin": 424,
									"end": 1395,
									"name": "RETURN",
									"source": 6
								}
							],
							".data": {
								"0": {
									".auxdata": "a26469706673582212200b36608db0ea5bc4dd633c21f81b3e8c2fbe48bb0a88a4525f71a36b1fe7b76464736f6c63430008070033",
									".code": [
										{
											"begin": 424,
											"end": 1395,
											"name": "PUSHDEPLOYADDRESS",
											"source": 6
										},
										{
											"begin": 424,
											"end": 1395,
											"name": "ADDRESS",
											"source": 6
										},
										{
											"begin": 424,
											"end": 1395,
											"name": "EQ",
											"source": 6
										},
										{
											"begin": 424,
											"end": 1395,
											"name": "PUSH",
											"source": 6,
											"value": "80"
										},
										{
											"begin": 424,
											"end": 1395,
											"name": "PUSH",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 424,
											"end": 1395,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 424,
											"end": 1395,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 424,
											"end": 1395,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 424,
											"end": 1395,
											"name": "REVERT",
											"source": 6
										}
									]
								}
							}
						},
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.7+commit.e28d00a7\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"author\":\"Matt Condon (@shrugs)\",\"details\":\"Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number of elements in a mapping, issuing ERC721 ids, or counting request ids. Include with `using Counters for Counters.Counter;`\",\"kind\":\"dev\",\"methods\":{},\"title\":\"Counters\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts@4.7.3/utils/Counters.sol\":\"Counters\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts@4.7.3/utils/Counters.sol\":{\"keccak256\":\"0xf0018c2440fbe238dd3a8732fa8e17a0f9dce84d31451dc8a32f6d62b349c9f1\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://59e1c62884d55b70f3ae5432b44bb3166ad71ae3acd19c57ab6ddc3c87c325ee\",\"dweb:/ipfs/QmezuXg5GK5oeA4F91EZhozBFekhq5TD966bHPH18cCqhu\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"@openzeppelin/contracts@4.7.3/utils/introspection/IERC165.sol": {
				"IERC165": {
					"abi": [
						{
							"inputs": [
								{
									"internalType": "bytes4",
									"name": "interfaceId",
									"type": "bytes4"
								}
							],
							"name": "supportsInterface",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						}
					],
					"devdoc": {
						"details": "Interface of the ERC165 standard, as defined in the https://eips.ethereum.org/EIPS/eip-165[EIP]. Implementers can declare support of contract interfaces, which can then be queried by others ({ERC165Checker}). For an implementation, see {ERC165}.",
						"kind": "dev",
						"methods": {
							"supportsInterface(bytes4)": {
								"details": "Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas."
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"supportsInterface(bytes4)": "01ffc9a7"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.7+commit.e28d00a7\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Interface of the ERC165 standard, as defined in the https://eips.ethereum.org/EIPS/eip-165[EIP]. Implementers can declare support of contract interfaces, which can then be queried by others ({ERC165Checker}). For an implementation, see {ERC165}.\",\"kind\":\"dev\",\"methods\":{\"supportsInterface(bytes4)\":{\"details\":\"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts@4.7.3/utils/introspection/IERC165.sol\":\"IERC165\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts@4.7.3/utils/introspection/IERC165.sol\":{\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://be161e54f24e5c6fae81a12db1a8ae87bc5ae1b0ddc805d82a1440a68455088f\",\"dweb:/ipfs/QmP7C3CHdY9urF4dEMb9wmsp1wMxHF6nhA2yQE5SKiPAdy\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"contracts/NFTStaking.sol": {
				"SacredTemple": {
					"abi": [
						{
							"inputs": [
								{
									"internalType": "contract IERC721",
									"name": "nftContract_",
									"type": "address"
								}
							],
							"stateMutability": "nonpayable",
							"type": "constructor"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": false,
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								}
							],
							"name": "Claimed",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": false,
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "NFTStaked",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": false,
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "NFTUnstaked",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "previousOwner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "newOwner",
									"type": "address"
								}
							],
							"name": "OwnershipTransferred",
							"type": "event"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								},
								{
									"internalType": "bytes",
									"name": "",
									"type": "bytes"
								}
							],
							"name": "onERC721Received",
							"outputs": [
								{
									"internalType": "bytes4",
									"name": "",
									"type": "bytes4"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "owner",
							"outputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "renounceOwnership",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								}
							],
							"name": "rewards",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "stake",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"name": "tokenOwnedBy",
							"outputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "newOwner",
									"type": "address"
								}
							],
							"name": "transferOwnership",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "unstake",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"stateMutability": "payable",
							"type": "receive"
						}
					],
					"devdoc": {
						"kind": "dev",
						"methods": {
							"onERC721Received(address,address,uint256,bytes)": {
								"details": "See {IERC721Receiver-onERC721Received}. Always returns `IERC721Receiver.onERC721Received.selector`."
							},
							"owner()": {
								"details": "Returns the address of the current owner."
							},
							"renounceOwnership()": {
								"details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
							},
							"transferOwnership(address)": {
								"details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "    /* \"contracts/NFTStaking.sol\":386:1568  contract SacredTemple is Ownable, ERC721Holder, ReentrancyGuard {... */\n  mstore(0x40, 0x80)\n    /* \"contracts/NFTStaking.sol\":866:945  constructor (IERC721 nftContract_) {... */\n  callvalue\n  dup1\n  iszero\n  tag_1\n  jumpi\n  0x00\n  dup1\n  revert\ntag_1:\n  pop\n  mload(0x40)\n  sub(codesize, bytecodeSize)\n  dup1\n  bytecodeSize\n  dup4\n  codecopy\n  dup2\n  dup2\n  add\n  0x40\n  mstore\n  dup2\n  add\n  swap1\n  tag_2\n  swap2\n  swap1\n  tag_3\n  jump\t// in\ntag_2:\n    /* \"@openzeppelin/contracts@4.7.3/access/Ownable.sol\":936:968  _transferOwnership(_msgSender()) */\n  tag_8\n    /* \"@openzeppelin/contracts@4.7.3/access/Ownable.sol\":955:967  _msgSender() */\n  tag_9\n    /* \"@openzeppelin/contracts@4.7.3/access/Ownable.sol\":955:965  _msgSender */\n  shl(0x20, tag_10)\n    /* \"@openzeppelin/contracts@4.7.3/access/Ownable.sol\":955:967  _msgSender() */\n  0x20\n  shr\n  jump\t// in\ntag_9:\n    /* \"@openzeppelin/contracts@4.7.3/access/Ownable.sol\":936:954  _transferOwnership */\n  shl(0x20, tag_11)\n    /* \"@openzeppelin/contracts@4.7.3/access/Ownable.sol\":936:968  _transferOwnership(_msgSender()) */\n  0x20\n  shr\n  jump\t// in\ntag_8:\n    /* \"@openzeppelin/contracts@4.7.3/security/ReentrancyGuard.sol\":1701:1702  1 */\n  0x01\n    /* \"@openzeppelin/contracts@4.7.3/security/ReentrancyGuard.sol\":1806:1813  _status */\n  dup1\n    /* \"@openzeppelin/contracts@4.7.3/security/ReentrancyGuard.sol\":1806:1828  _status = _NOT_ENTERED */\n  dup2\n  swap1\n  sstore\n  pop\n    /* \"contracts/NFTStaking.sol\":926:938  nftContract_ */\n  dup1\n    /* \"contracts/NFTStaking.sol\":911:923  _nftContract */\n  0x02\n  0x00\n    /* \"contracts/NFTStaking.sol\":911:938  _nftContract = nftContract_ */\n  0x0100\n  exp\n  dup2\n  sload\n  dup2\n  0xffffffffffffffffffffffffffffffffffffffff\n  mul\n  not\n  and\n  swap1\n  dup4\n  0xffffffffffffffffffffffffffffffffffffffff\n  and\n  mul\n  or\n  swap1\n  sstore\n  pop\n    /* \"contracts/NFTStaking.sol\":866:945  constructor (IERC721 nftContract_) {... */\n  pop\n    /* \"contracts/NFTStaking.sol\":386:1568  contract SacredTemple is Ownable, ERC721Holder, ReentrancyGuard {... */\n  jump(tag_14)\n    /* \"@openzeppelin/contracts@4.7.3/utils/Context.sol\":640:736  function _msgSender() internal view virtual returns (address) {... */\ntag_10:\n    /* \"@openzeppelin/contracts@4.7.3/utils/Context.sol\":693:700  address */\n  0x00\n    /* \"@openzeppelin/contracts@4.7.3/utils/Context.sol\":719:729  msg.sender */\n  caller\n    /* \"@openzeppelin/contracts@4.7.3/utils/Context.sol\":712:729  return msg.sender */\n  swap1\n  pop\n    /* \"@openzeppelin/contracts@4.7.3/utils/Context.sol\":640:736  function _msgSender() internal view virtual returns (address) {... */\n  swap1\n  jump\t// out\n    /* \"@openzeppelin/contracts@4.7.3/access/Ownable.sol\":2433:2620  function _transferOwnership(address newOwner) internal virtual {... */\ntag_11:\n    /* \"@openzeppelin/contracts@4.7.3/access/Ownable.sol\":2506:2522  address oldOwner */\n  0x00\n    /* \"@openzeppelin/contracts@4.7.3/access/Ownable.sol\":2525:2531  _owner */\n  dup1\n  0x00\n  swap1\n  sload\n  swap1\n  0x0100\n  exp\n  swap1\n  div\n  0xffffffffffffffffffffffffffffffffffffffff\n  and\n    /* \"@openzeppelin/contracts@4.7.3/access/Ownable.sol\":2506:2531  address oldOwner = _owner */\n  swap1\n  pop\n    /* \"@openzeppelin/contracts@4.7.3/access/Ownable.sol\":2550:2558  newOwner */\n  dup2\n    /* \"@openzeppelin/contracts@4.7.3/access/Ownable.sol\":2541:2547  _owner */\n  0x00\n  dup1\n    /* \"@openzeppelin/contracts@4.7.3/access/Ownable.sol\":2541:2558  _owner = newOwner */\n  0x0100\n  exp\n  dup2\n  sload\n  dup2\n  0xffffffffffffffffffffffffffffffffffffffff\n  mul\n  not\n  and\n  swap1\n  dup4\n  0xffffffffffffffffffffffffffffffffffffffff\n  and\n  mul\n  or\n  swap1\n  sstore\n  pop\n    /* \"@openzeppelin/contracts@4.7.3/access/Ownable.sol\":2604:2612  newOwner */\n  dup2\n    /* \"@openzeppelin/contracts@4.7.3/access/Ownable.sol\":2573:2613  OwnershipTransferred(oldOwner, newOwner) */\n  0xffffffffffffffffffffffffffffffffffffffff\n  and\n    /* \"@openzeppelin/contracts@4.7.3/access/Ownable.sol\":2594:2602  oldOwner */\n  dup2\n    /* \"@openzeppelin/contracts@4.7.3/access/Ownable.sol\":2573:2613  OwnershipTransferred(oldOwner, newOwner) */\n  0xffffffffffffffffffffffffffffffffffffffff\n  and\n  0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0\n  mload(0x40)\n  mload(0x40)\n  dup1\n  swap2\n  sub\n  swap1\n  log3\n    /* \"@openzeppelin/contracts@4.7.3/access/Ownable.sol\":2496:2620  {... */\n  pop\n    /* \"@openzeppelin/contracts@4.7.3/access/Ownable.sol\":2433:2620  function _transferOwnership(address newOwner) internal virtual {... */\n  pop\n  jump\t// out\n    /* \"#utility.yul\":7:180   */\ntag_18:\n    /* \"#utility.yul\":79:84   */\n  0x00\n    /* \"#utility.yul\":110:116   */\n  dup2\n    /* \"#utility.yul\":104:117   */\n  mload\n    /* \"#utility.yul\":95:117   */\n  swap1\n  pop\n    /* \"#utility.yul\":126:174   */\n  tag_20\n    /* \"#utility.yul\":168:173   */\n  dup2\n    /* \"#utility.yul\":126:174   */\n  tag_21\n  jump\t// in\ntag_20:\n    /* \"#utility.yul\":7:180   */\n  swap3\n  swap2\n  pop\n  pop\n  jump\t// out\n    /* \"#utility.yul\":186:567   */\ntag_3:\n    /* \"#utility.yul\":271:277   */\n  0x00\n    /* \"#utility.yul\":320:322   */\n  0x20\n    /* \"#utility.yul\":308:317   */\n  dup3\n    /* \"#utility.yul\":299:306   */\n  dup5\n    /* \"#utility.yul\":295:318   */\n  sub\n    /* \"#utility.yul\":291:323   */\n  slt\n    /* \"#utility.yul\":288:407   */\n  iszero\n  tag_23\n  jumpi\n    /* \"#utility.yul\":326:405   */\n  tag_24\n  tag_25\n  jump\t// in\ntag_24:\n    /* \"#utility.yul\":288:407   */\ntag_23:\n    /* \"#utility.yul\":446:447   */\n  0x00\n    /* \"#utility.yul\":471:550   */\n  tag_26\n    /* \"#utility.yul\":542:549   */\n  dup5\n    /* \"#utility.yul\":533:539   */\n  dup3\n    /* \"#utility.yul\":522:531   */\n  dup6\n    /* \"#utility.yul\":518:540   */\n  add\n    /* \"#utility.yul\":471:550   */\n  tag_18\n  jump\t// in\ntag_26:\n    /* \"#utility.yul\":461:550   */\n  swap2\n  pop\n    /* \"#utility.yul\":417:560   */\n  pop\n    /* \"#utility.yul\":186:567   */\n  swap3\n  swap2\n  pop\n  pop\n  jump\t// out\n    /* \"#utility.yul\":654:750   */\ntag_29:\n    /* \"#utility.yul\":691:698   */\n  0x00\n    /* \"#utility.yul\":720:744   */\n  tag_31\n    /* \"#utility.yul\":738:743   */\n  dup3\n    /* \"#utility.yul\":720:744   */\n  tag_32\n  jump\t// in\ntag_31:\n    /* \"#utility.yul\":709:744   */\n  swap1\n  pop\n    /* \"#utility.yul\":654:750   */\n  swap2\n  swap1\n  pop\n  jump\t// out\n    /* \"#utility.yul\":756:867   */\ntag_33:\n    /* \"#utility.yul\":808:815   */\n  0x00\n    /* \"#utility.yul\":837:861   */\n  tag_35\n    /* \"#utility.yul\":855:860   */\n  dup3\n    /* \"#utility.yul\":837:861   */\n  tag_29\n  jump\t// in\ntag_35:\n    /* \"#utility.yul\":826:861   */\n  swap1\n  pop\n    /* \"#utility.yul\":756:867   */\n  swap2\n  swap1\n  pop\n  jump\t// out\n    /* \"#utility.yul\":873:999   */\ntag_32:\n    /* \"#utility.yul\":910:917   */\n  0x00\n    /* \"#utility.yul\":950:992   */\n  0xffffffffffffffffffffffffffffffffffffffff\n    /* \"#utility.yul\":943:948   */\n  dup3\n    /* \"#utility.yul\":939:993   */\n  and\n    /* \"#utility.yul\":928:993   */\n  swap1\n  pop\n    /* \"#utility.yul\":873:999   */\n  swap2\n  swap1\n  pop\n  jump\t// out\n    /* \"#utility.yul\":1128:1245   */\ntag_25:\n    /* \"#utility.yul\":1237:1238   */\n  0x00\n    /* \"#utility.yul\":1234:1235   */\n  dup1\n    /* \"#utility.yul\":1227:1239   */\n  revert\n    /* \"#utility.yul\":1251:1403   */\ntag_21:\n    /* \"#utility.yul\":1339:1378   */\n  tag_41\n    /* \"#utility.yul\":1372:1377   */\n  dup2\n    /* \"#utility.yul\":1339:1378   */\n  tag_33\n  jump\t// in\ntag_41:\n    /* \"#utility.yul\":1332:1337   */\n  dup2\n    /* \"#utility.yul\":1329:1379   */\n  eq\n    /* \"#utility.yul\":1319:1397   */\n  tag_42\n  jumpi\n    /* \"#utility.yul\":1393:1394   */\n  0x00\n    /* \"#utility.yul\":1390:1391   */\n  dup1\n    /* \"#utility.yul\":1383:1395   */\n  revert\n    /* \"#utility.yul\":1319:1397   */\ntag_42:\n    /* \"#utility.yul\":1251:1403   */\n  pop\n  jump\t// out\n    /* \"contracts/NFTStaking.sol\":386:1568  contract SacredTemple is Ownable, ERC721Holder, ReentrancyGuard {... */\ntag_14:\n  dataSize(sub_0)\n  dup1\n  dataOffset(sub_0)\n  0x00\n  codecopy\n  0x00\n  return\nstop\n\nsub_0: assembly {\n        /* \"contracts/NFTStaking.sol\":386:1568  contract SacredTemple is Ownable, ERC721Holder, ReentrancyGuard {... */\n      mstore(0x40, 0x80)\n      jumpi(tag_1, lt(calldatasize, 0x04))\n      shr(0xe0, calldataload(0x00))\n      dup1\n      0x8488cc41\n      gt\n      tag_11\n      jumpi\n      dup1\n      0x8488cc41\n      eq\n      tag_7\n      jumpi\n      dup1\n      0x8da5cb5b\n      eq\n      tag_8\n      jumpi\n      dup1\n      0xa694fc3a\n      eq\n      tag_9\n      jumpi\n      dup1\n      0xf2fde38b\n      eq\n      tag_10\n      jumpi\n      jump(tag_2)\n    tag_11:\n      dup1\n      0x0700037d\n      eq\n      tag_3\n      jumpi\n      dup1\n      0x150b7a02\n      eq\n      tag_4\n      jumpi\n      dup1\n      0x2e17de78\n      eq\n      tag_5\n      jumpi\n      dup1\n      0x715018a6\n      eq\n      tag_6\n      jumpi\n      jump(tag_2)\n    tag_1:\n      jumpi(tag_2, calldatasize)\n      stop\n    tag_2:\n      0x00\n      dup1\n      revert\n        /* \"contracts/NFTStaking.sol\":816:859  mapping (address => uint256) public rewards */\n    tag_3:\n      callvalue\n      dup1\n      iszero\n      tag_14\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_14:\n      pop\n      tag_15\n      0x04\n      dup1\n      calldatasize\n      sub\n      dup2\n      add\n      swap1\n      tag_16\n      swap2\n      swap1\n      tag_17\n      jump\t// in\n    tag_16:\n      tag_18\n      jump\t// in\n    tag_15:\n      mload(0x40)\n      tag_19\n      swap2\n      swap1\n      tag_20\n      jump\t// in\n    tag_19:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      return\n        /* \"@openzeppelin/contracts@4.7.3/token/ERC721/utils/ERC721Holder.sol\":588:788  function onERC721Received(... */\n    tag_4:\n      callvalue\n      dup1\n      iszero\n      tag_21\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_21:\n      pop\n      tag_22\n      0x04\n      dup1\n      calldatasize\n      sub\n      dup2\n      add\n      swap1\n      tag_23\n      swap2\n      swap1\n      tag_24\n      jump\t// in\n    tag_23:\n      tag_25\n      jump\t// in\n    tag_22:\n      mload(0x40)\n      tag_26\n      swap2\n      swap1\n      tag_27\n      jump\t// in\n    tag_26:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      return\n        /* \"contracts/NFTStaking.sol\":1163:1458  function unstake(uint256 tokenId) nonReentrant external {... */\n    tag_5:\n      callvalue\n      dup1\n      iszero\n      tag_28\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_28:\n      pop\n      tag_29\n      0x04\n      dup1\n      calldatasize\n      sub\n      dup2\n      add\n      swap1\n      tag_30\n      swap2\n      swap1\n      tag_31\n      jump\t// in\n    tag_30:\n      tag_32\n      jump\t// in\n    tag_29:\n      stop\n        /* \"@openzeppelin/contracts@4.7.3/access/Ownable.sol\":1831:1932  function renounceOwnership() public virtual onlyOwner {... */\n    tag_6:\n      callvalue\n      dup1\n      iszero\n      tag_33\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_33:\n      pop\n      tag_34\n      tag_35\n      jump\t// in\n    tag_34:\n      stop\n        /* \"contracts/NFTStaking.sol\":762:810  mapping (uint256 => address) public tokenOwnedBy */\n    tag_7:\n      callvalue\n      dup1\n      iszero\n      tag_36\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_36:\n      pop\n      tag_37\n      0x04\n      dup1\n      calldatasize\n      sub\n      dup2\n      add\n      swap1\n      tag_38\n      swap2\n      swap1\n      tag_31\n      jump\t// in\n    tag_38:\n      tag_39\n      jump\t// in\n    tag_37:\n      mload(0x40)\n      tag_40\n      swap2\n      swap1\n      tag_41\n      jump\t// in\n    tag_40:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      return\n        /* \"@openzeppelin/contracts@4.7.3/access/Ownable.sol\":1201:1286  function owner() public view virtual returns (address) {... */\n    tag_8:\n      callvalue\n      dup1\n      iszero\n      tag_42\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_42:\n      pop\n      tag_43\n      tag_44\n      jump\t// in\n    tag_43:\n      mload(0x40)\n      tag_45\n      swap2\n      swap1\n      tag_41\n      jump\t// in\n    tag_45:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      return\n        /* \"contracts/NFTStaking.sol\":951:1157  function stake(uint256 tokenId) external {... */\n    tag_9:\n      callvalue\n      dup1\n      iszero\n      tag_46\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_46:\n      pop\n      tag_47\n      0x04\n      dup1\n      calldatasize\n      sub\n      dup2\n      add\n      swap1\n      tag_48\n      swap2\n      swap1\n      tag_31\n      jump\t// in\n    tag_48:\n      tag_49\n      jump\t// in\n    tag_47:\n      stop\n        /* \"@openzeppelin/contracts@4.7.3/access/Ownable.sol\":2081:2279  function transferOwnership(address newOwner) public virtual onlyOwner {... */\n    tag_10:\n      callvalue\n      dup1\n      iszero\n      tag_50\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_50:\n      pop\n      tag_51\n      0x04\n      dup1\n      calldatasize\n      sub\n      dup2\n      add\n      swap1\n      tag_52\n      swap2\n      swap1\n      tag_17\n      jump\t// in\n    tag_52:\n      tag_53\n      jump\t// in\n    tag_51:\n      stop\n        /* \"contracts/NFTStaking.sol\":816:859  mapping (address => uint256) public rewards */\n    tag_18:\n      mstore(0x20, 0x05)\n      dup1\n      0x00\n      mstore\n      keccak256(0x00, 0x40)\n      0x00\n      swap2\n      pop\n      swap1\n      pop\n      sload\n      dup2\n      jump\t// out\n        /* \"@openzeppelin/contracts@4.7.3/token/ERC721/utils/ERC721Holder.sol\":588:788  function onERC721Received(... */\n    tag_25:\n        /* \"@openzeppelin/contracts@4.7.3/token/ERC721/utils/ERC721Holder.sol\":726:732  bytes4 */\n      0x00\n        /* \"@openzeppelin/contracts@4.7.3/token/ERC721/utils/ERC721Holder.sol\":751:781  this.onERC721Received.selector */\n      shl(0xe0, 0x150b7a02)\n        /* \"@openzeppelin/contracts@4.7.3/token/ERC721/utils/ERC721Holder.sol\":744:781  return this.onERC721Received.selector */\n      swap1\n      pop\n        /* \"@openzeppelin/contracts@4.7.3/token/ERC721/utils/ERC721Holder.sol\":588:788  function onERC721Received(... */\n      swap5\n      swap4\n      pop\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"contracts/NFTStaking.sol\":1163:1458  function unstake(uint256 tokenId) nonReentrant external {... */\n    tag_32:\n        /* \"@openzeppelin/contracts@4.7.3/security/ReentrancyGuard.sol\":1744:1745  2 */\n      0x02\n        /* \"@openzeppelin/contracts@4.7.3/security/ReentrancyGuard.sol\":2325:2332  _status */\n      sload(0x01)\n        /* \"@openzeppelin/contracts@4.7.3/security/ReentrancyGuard.sol\":2325:2344  _status != _ENTERED */\n      eq\n      iszero\n        /* \"@openzeppelin/contracts@4.7.3/security/ReentrancyGuard.sol\":2317:2380  require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\") */\n      tag_56\n      jumpi\n      mload(0x40)\n      0x08c379a000000000000000000000000000000000000000000000000000000000\n      dup2\n      mstore\n      0x04\n      add\n      tag_57\n      swap1\n      tag_58\n      jump\t// in\n    tag_57:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n    tag_56:\n        /* \"@openzeppelin/contracts@4.7.3/security/ReentrancyGuard.sol\":1744:1745  2 */\n      0x02\n        /* \"@openzeppelin/contracts@4.7.3/security/ReentrancyGuard.sol\":2455:2462  _status */\n      0x01\n        /* \"@openzeppelin/contracts@4.7.3/security/ReentrancyGuard.sol\":2455:2473  _status = _ENTERED */\n      dup2\n      swap1\n      sstore\n      pop\n        /* \"contracts/NFTStaking.sol\":1262:1272  msg.sender */\n      caller\n        /* \"contracts/NFTStaking.sol\":1237:1272  tokenOwnedBy[tokenId] == msg.sender */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n        /* \"contracts/NFTStaking.sol\":1237:1249  tokenOwnedBy */\n      0x04\n        /* \"contracts/NFTStaking.sol\":1237:1258  tokenOwnedBy[tokenId] */\n      0x00\n        /* \"contracts/NFTStaking.sol\":1250:1257  tokenId */\n      dup4\n        /* \"contracts/NFTStaking.sol\":1237:1258  tokenOwnedBy[tokenId] */\n      dup2\n      mstore\n      0x20\n      add\n      swap1\n      dup2\n      mstore\n      0x20\n      add\n      0x00\n      keccak256\n      0x00\n      swap1\n      sload\n      swap1\n      0x0100\n      exp\n      swap1\n      div\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n        /* \"contracts/NFTStaking.sol\":1237:1272  tokenOwnedBy[tokenId] == msg.sender */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      eq\n        /* \"contracts/NFTStaking.sol\":1229:1299  require(tokenOwnedBy[tokenId] == msg.sender, \"You are not the owner.\") */\n      tag_60\n      jumpi\n      mload(0x40)\n      0x08c379a000000000000000000000000000000000000000000000000000000000\n      dup2\n      mstore\n      0x04\n      add\n      tag_61\n      swap1\n      tag_62\n      jump\t// in\n    tag_61:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n    tag_60:\n        /* \"contracts/NFTStaking.sol\":1316:1328  tokenOwnedBy */\n      0x04\n        /* \"contracts/NFTStaking.sol\":1316:1337  tokenOwnedBy[tokenId] */\n      0x00\n        /* \"contracts/NFTStaking.sol\":1329:1336  tokenId */\n      dup3\n        /* \"contracts/NFTStaking.sol\":1316:1337  tokenOwnedBy[tokenId] */\n      dup2\n      mstore\n      0x20\n      add\n      swap1\n      dup2\n      mstore\n      0x20\n      add\n      0x00\n      keccak256\n      0x00\n        /* \"contracts/NFTStaking.sol\":1309:1337  delete tokenOwnedBy[tokenId] */\n      0x0100\n      exp\n      dup2\n      sload\n      swap1\n      0xffffffffffffffffffffffffffffffffffffffff\n      mul\n      not\n      and\n      swap1\n      sstore\n        /* \"contracts/NFTStaking.sol\":1347:1376  _stakedNFTCounter.decrement() */\n      tag_63\n        /* \"contracts/NFTStaking.sol\":1347:1364  _stakedNFTCounter */\n      0x03\n        /* \"contracts/NFTStaking.sol\":1347:1374  _stakedNFTCounter.decrement */\n      tag_64\n        /* \"contracts/NFTStaking.sol\":1347:1376  _stakedNFTCounter.decrement() */\n      jump\t// in\n    tag_63:\n        /* \"contracts/NFTStaking.sol\":1386:1398  _nftContract */\n      0x02\n      0x00\n      swap1\n      sload\n      swap1\n      0x0100\n      exp\n      swap1\n      div\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n        /* \"contracts/NFTStaking.sol\":1386:1415  _nftContract.safeTransferFrom */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      0x42842e0e\n        /* \"contracts/NFTStaking.sol\":1424:1428  this */\n      address\n        /* \"contracts/NFTStaking.sol\":1431:1441  msg.sender */\n      caller\n        /* \"contracts/NFTStaking.sol\":1443:1450  tokenId */\n      dup5\n        /* \"contracts/NFTStaking.sol\":1386:1451  _nftContract.safeTransferFrom(address(this), msg.sender, tokenId) */\n      mload(0x40)\n      dup5\n      0xffffffff\n      and\n      0xe0\n      shl\n      dup2\n      mstore\n      0x04\n      add\n      tag_65\n      swap4\n      swap3\n      swap2\n      swap1\n      tag_66\n      jump\t// in\n    tag_65:\n      0x00\n      mload(0x40)\n      dup1\n      dup4\n      sub\n      dup2\n      0x00\n      dup8\n      dup1\n      extcodesize\n      iszero\n      dup1\n      iszero\n      tag_67\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_67:\n      pop\n      gas\n      call\n      iszero\n      dup1\n      iszero\n      tag_69\n      jumpi\n      returndatasize\n      0x00\n      dup1\n      returndatacopy\n      revert(0x00, returndatasize)\n    tag_69:\n      pop\n      pop\n      pop\n      pop\n        /* \"@openzeppelin/contracts@4.7.3/security/ReentrancyGuard.sol\":1701:1702  1 */\n      0x01\n        /* \"@openzeppelin/contracts@4.7.3/security/ReentrancyGuard.sol\":2628:2635  _status */\n      dup1\n        /* \"@openzeppelin/contracts@4.7.3/security/ReentrancyGuard.sol\":2628:2650  _status = _NOT_ENTERED */\n      dup2\n      swap1\n      sstore\n      pop\n        /* \"contracts/NFTStaking.sol\":1163:1458  function unstake(uint256 tokenId) nonReentrant external {... */\n      pop\n      jump\t// out\n        /* \"@openzeppelin/contracts@4.7.3/access/Ownable.sol\":1831:1932  function renounceOwnership() public virtual onlyOwner {... */\n    tag_35:\n        /* \"@openzeppelin/contracts@4.7.3/access/Ownable.sol\":1094:1107  _checkOwner() */\n      tag_71\n        /* \"@openzeppelin/contracts@4.7.3/access/Ownable.sol\":1094:1105  _checkOwner */\n      tag_72\n        /* \"@openzeppelin/contracts@4.7.3/access/Ownable.sol\":1094:1107  _checkOwner() */\n      jump\t// in\n    tag_71:\n        /* \"@openzeppelin/contracts@4.7.3/access/Ownable.sol\":1895:1925  _transferOwnership(address(0)) */\n      tag_74\n        /* \"@openzeppelin/contracts@4.7.3/access/Ownable.sol\":1922:1923  0 */\n      0x00\n        /* \"@openzeppelin/contracts@4.7.3/access/Ownable.sol\":1895:1913  _transferOwnership */\n      tag_75\n        /* \"@openzeppelin/contracts@4.7.3/access/Ownable.sol\":1895:1925  _transferOwnership(address(0)) */\n      jump\t// in\n    tag_74:\n        /* \"@openzeppelin/contracts@4.7.3/access/Ownable.sol\":1831:1932  function renounceOwnership() public virtual onlyOwner {... */\n      jump\t// out\n        /* \"contracts/NFTStaking.sol\":762:810  mapping (uint256 => address) public tokenOwnedBy */\n    tag_39:\n      mstore(0x20, 0x04)\n      dup1\n      0x00\n      mstore\n      keccak256(0x00, 0x40)\n      0x00\n      swap2\n      pop\n      sload\n      swap1\n      0x0100\n      exp\n      swap1\n      div\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      dup2\n      jump\t// out\n        /* \"@openzeppelin/contracts@4.7.3/access/Ownable.sol\":1201:1286  function owner() public view virtual returns (address) {... */\n    tag_44:\n        /* \"@openzeppelin/contracts@4.7.3/access/Ownable.sol\":1247:1254  address */\n      0x00\n        /* \"@openzeppelin/contracts@4.7.3/access/Ownable.sol\":1273:1279  _owner */\n      dup1\n      0x00\n      swap1\n      sload\n      swap1\n      0x0100\n      exp\n      swap1\n      div\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n        /* \"@openzeppelin/contracts@4.7.3/access/Ownable.sol\":1266:1279  return _owner */\n      swap1\n      pop\n        /* \"@openzeppelin/contracts@4.7.3/access/Ownable.sol\":1201:1286  function owner() public view virtual returns (address) {... */\n      swap1\n      jump\t// out\n        /* \"contracts/NFTStaking.sol\":951:1157  function stake(uint256 tokenId) external {... */\n    tag_49:\n        /* \"contracts/NFTStaking.sol\":1002:1014  _nftContract */\n      0x02\n      0x00\n      swap1\n      sload\n      swap1\n      0x0100\n      exp\n      swap1\n      div\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n        /* \"contracts/NFTStaking.sol\":1002:1031  _nftContract.safeTransferFrom */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      0x42842e0e\n        /* \"contracts/NFTStaking.sol\":1032:1042  msg.sender */\n      caller\n        /* \"contracts/NFTStaking.sol\":1052:1056  this */\n      address\n        /* \"contracts/NFTStaking.sol\":1059:1066  tokenId */\n      dup5\n        /* \"contracts/NFTStaking.sol\":1002:1067  _nftContract.safeTransferFrom(msg.sender, address(this), tokenId) */\n      mload(0x40)\n      dup5\n      0xffffffff\n      and\n      0xe0\n      shl\n      dup2\n      mstore\n      0x04\n      add\n      tag_78\n      swap4\n      swap3\n      swap2\n      swap1\n      tag_66\n      jump\t// in\n    tag_78:\n      0x00\n      mload(0x40)\n      dup1\n      dup4\n      sub\n      dup2\n      0x00\n      dup8\n      dup1\n      extcodesize\n      iszero\n      dup1\n      iszero\n      tag_79\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_79:\n      pop\n      gas\n      call\n      iszero\n      dup1\n      iszero\n      tag_81\n      jumpi\n      returndatasize\n      0x00\n      dup1\n      returndatacopy\n      revert(0x00, returndatasize)\n    tag_81:\n      pop\n      pop\n      pop\n      pop\n        /* \"contracts/NFTStaking.sol\":1101:1111  msg.sender */\n      caller\n        /* \"contracts/NFTStaking.sol\":1077:1089  tokenOwnedBy */\n      0x04\n        /* \"contracts/NFTStaking.sol\":1077:1098  tokenOwnedBy[tokenId] */\n      0x00\n        /* \"contracts/NFTStaking.sol\":1090:1097  tokenId */\n      dup4\n        /* \"contracts/NFTStaking.sol\":1077:1098  tokenOwnedBy[tokenId] */\n      dup2\n      mstore\n      0x20\n      add\n      swap1\n      dup2\n      mstore\n      0x20\n      add\n      0x00\n      keccak256\n      0x00\n        /* \"contracts/NFTStaking.sol\":1077:1111  tokenOwnedBy[tokenId] = msg.sender */\n      0x0100\n      exp\n      dup2\n      sload\n      dup2\n      0xffffffffffffffffffffffffffffffffffffffff\n      mul\n      not\n      and\n      swap1\n      dup4\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      mul\n      or\n      swap1\n      sstore\n      pop\n        /* \"contracts/NFTStaking.sol\":1121:1150  _stakedNFTCounter.increment() */\n      tag_82\n        /* \"contracts/NFTStaking.sol\":1121:1138  _stakedNFTCounter */\n      0x03\n        /* \"contracts/NFTStaking.sol\":1121:1148  _stakedNFTCounter.increment */\n      tag_83\n        /* \"contracts/NFTStaking.sol\":1121:1150  _stakedNFTCounter.increment() */\n      jump\t// in\n    tag_82:\n        /* \"contracts/NFTStaking.sol\":951:1157  function stake(uint256 tokenId) external {... */\n      pop\n      jump\t// out\n        /* \"@openzeppelin/contracts@4.7.3/access/Ownable.sol\":2081:2279  function transferOwnership(address newOwner) public virtual onlyOwner {... */\n    tag_53:\n        /* \"@openzeppelin/contracts@4.7.3/access/Ownable.sol\":1094:1107  _checkOwner() */\n      tag_85\n        /* \"@openzeppelin/contracts@4.7.3/access/Ownable.sol\":1094:1105  _checkOwner */\n      tag_72\n        /* \"@openzeppelin/contracts@4.7.3/access/Ownable.sol\":1094:1107  _checkOwner() */\n      jump\t// in\n    tag_85:\n        /* \"@openzeppelin/contracts@4.7.3/access/Ownable.sol\":2189:2190  0 */\n      0x00\n        /* \"@openzeppelin/contracts@4.7.3/access/Ownable.sol\":2169:2191  newOwner != address(0) */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n        /* \"@openzeppelin/contracts@4.7.3/access/Ownable.sol\":2169:2177  newOwner */\n      dup2\n        /* \"@openzeppelin/contracts@4.7.3/access/Ownable.sol\":2169:2191  newOwner != address(0) */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      eq\n      iszero\n        /* \"@openzeppelin/contracts@4.7.3/access/Ownable.sol\":2161:2234  require(newOwner != address(0), \"Ownable: new owner is the zero address\") */\n      tag_87\n      jumpi\n      mload(0x40)\n      0x08c379a000000000000000000000000000000000000000000000000000000000\n      dup2\n      mstore\n      0x04\n      add\n      tag_88\n      swap1\n      tag_89\n      jump\t// in\n    tag_88:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n    tag_87:\n        /* \"@openzeppelin/contracts@4.7.3/access/Ownable.sol\":2244:2272  _transferOwnership(newOwner) */\n      tag_90\n        /* \"@openzeppelin/contracts@4.7.3/access/Ownable.sol\":2263:2271  newOwner */\n      dup2\n        /* \"@openzeppelin/contracts@4.7.3/access/Ownable.sol\":2244:2262  _transferOwnership */\n      tag_75\n        /* \"@openzeppelin/contracts@4.7.3/access/Ownable.sol\":2244:2272  _transferOwnership(newOwner) */\n      jump\t// in\n    tag_90:\n        /* \"@openzeppelin/contracts@4.7.3/access/Ownable.sol\":2081:2279  function transferOwnership(address newOwner) public virtual onlyOwner {... */\n      pop\n      jump\t// out\n        /* \"@openzeppelin/contracts@4.7.3/utils/Counters.sol\":1074:1303  function decrement(Counter storage counter) internal {... */\n    tag_64:\n        /* \"@openzeppelin/contracts@4.7.3/utils/Counters.sol\":1137:1150  uint256 value */\n      0x00\n        /* \"@openzeppelin/contracts@4.7.3/utils/Counters.sol\":1153:1160  counter */\n      dup2\n        /* \"@openzeppelin/contracts@4.7.3/utils/Counters.sol\":1153:1167  counter._value */\n      0x00\n      add\n      sload\n        /* \"@openzeppelin/contracts@4.7.3/utils/Counters.sol\":1137:1167  uint256 value = counter._value */\n      swap1\n      pop\n        /* \"@openzeppelin/contracts@4.7.3/utils/Counters.sol\":1193:1194  0 */\n      0x00\n        /* \"@openzeppelin/contracts@4.7.3/utils/Counters.sol\":1185:1190  value */\n      dup2\n        /* \"@openzeppelin/contracts@4.7.3/utils/Counters.sol\":1185:1194  value > 0 */\n      gt\n        /* \"@openzeppelin/contracts@4.7.3/utils/Counters.sol\":1177:1226  require(value > 0, \"Counter: decrement overflow\") */\n      tag_92\n      jumpi\n      mload(0x40)\n      0x08c379a000000000000000000000000000000000000000000000000000000000\n      dup2\n      mstore\n      0x04\n      add\n      tag_93\n      swap1\n      tag_94\n      jump\t// in\n    tag_93:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n    tag_92:\n        /* \"@openzeppelin/contracts@4.7.3/utils/Counters.sol\":1285:1286  1 */\n      0x01\n        /* \"@openzeppelin/contracts@4.7.3/utils/Counters.sol\":1277:1282  value */\n      dup2\n        /* \"@openzeppelin/contracts@4.7.3/utils/Counters.sol\":1277:1286  value - 1 */\n      sub\n        /* \"@openzeppelin/contracts@4.7.3/utils/Counters.sol\":1260:1267  counter */\n      dup3\n        /* \"@openzeppelin/contracts@4.7.3/utils/Counters.sol\":1260:1274  counter._value */\n      0x00\n      add\n        /* \"@openzeppelin/contracts@4.7.3/utils/Counters.sol\":1260:1286  counter._value = value - 1 */\n      dup2\n      swap1\n      sstore\n      pop\n        /* \"@openzeppelin/contracts@4.7.3/utils/Counters.sol\":1127:1303  {... */\n      pop\n        /* \"@openzeppelin/contracts@4.7.3/utils/Counters.sol\":1074:1303  function decrement(Counter storage counter) internal {... */\n      pop\n      jump\t// out\n        /* \"@openzeppelin/contracts@4.7.3/access/Ownable.sol\":1359:1489  function _checkOwner() internal view virtual {... */\n    tag_72:\n        /* \"@openzeppelin/contracts@4.7.3/access/Ownable.sol\":1433:1445  _msgSender() */\n      tag_96\n        /* \"@openzeppelin/contracts@4.7.3/access/Ownable.sol\":1433:1443  _msgSender */\n      tag_97\n        /* \"@openzeppelin/contracts@4.7.3/access/Ownable.sol\":1433:1445  _msgSender() */\n      jump\t// in\n    tag_96:\n        /* \"@openzeppelin/contracts@4.7.3/access/Ownable.sol\":1422:1445  owner() == _msgSender() */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n        /* \"@openzeppelin/contracts@4.7.3/access/Ownable.sol\":1422:1429  owner() */\n      tag_98\n        /* \"@openzeppelin/contracts@4.7.3/access/Ownable.sol\":1422:1427  owner */\n      tag_44\n        /* \"@openzeppelin/contracts@4.7.3/access/Ownable.sol\":1422:1429  owner() */\n      jump\t// in\n    tag_98:\n        /* \"@openzeppelin/contracts@4.7.3/access/Ownable.sol\":1422:1445  owner() == _msgSender() */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      eq\n        /* \"@openzeppelin/contracts@4.7.3/access/Ownable.sol\":1414:1482  require(owner() == _msgSender(), \"Ownable: caller is not the owner\") */\n      tag_99\n      jumpi\n      mload(0x40)\n      0x08c379a000000000000000000000000000000000000000000000000000000000\n      dup2\n      mstore\n      0x04\n      add\n      tag_100\n      swap1\n      tag_101\n      jump\t// in\n    tag_100:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n    tag_99:\n        /* \"@openzeppelin/contracts@4.7.3/access/Ownable.sol\":1359:1489  function _checkOwner() internal view virtual {... */\n      jump\t// out\n        /* \"@openzeppelin/contracts@4.7.3/access/Ownable.sol\":2433:2620  function _transferOwnership(address newOwner) internal virtual {... */\n    tag_75:\n        /* \"@openzeppelin/contracts@4.7.3/access/Ownable.sol\":2506:2522  address oldOwner */\n      0x00\n        /* \"@openzeppelin/contracts@4.7.3/access/Ownable.sol\":2525:2531  _owner */\n      dup1\n      0x00\n      swap1\n      sload\n      swap1\n      0x0100\n      exp\n      swap1\n      div\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n        /* \"@openzeppelin/contracts@4.7.3/access/Ownable.sol\":2506:2531  address oldOwner = _owner */\n      swap1\n      pop\n        /* \"@openzeppelin/contracts@4.7.3/access/Ownable.sol\":2550:2558  newOwner */\n      dup2\n        /* \"@openzeppelin/contracts@4.7.3/access/Ownable.sol\":2541:2547  _owner */\n      0x00\n      dup1\n        /* \"@openzeppelin/contracts@4.7.3/access/Ownable.sol\":2541:2558  _owner = newOwner */\n      0x0100\n      exp\n      dup2\n      sload\n      dup2\n      0xffffffffffffffffffffffffffffffffffffffff\n      mul\n      not\n      and\n      swap1\n      dup4\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      mul\n      or\n      swap1\n      sstore\n      pop\n        /* \"@openzeppelin/contracts@4.7.3/access/Ownable.sol\":2604:2612  newOwner */\n      dup2\n        /* \"@openzeppelin/contracts@4.7.3/access/Ownable.sol\":2573:2613  OwnershipTransferred(oldOwner, newOwner) */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n        /* \"@openzeppelin/contracts@4.7.3/access/Ownable.sol\":2594:2602  oldOwner */\n      dup2\n        /* \"@openzeppelin/contracts@4.7.3/access/Ownable.sol\":2573:2613  OwnershipTransferred(oldOwner, newOwner) */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0\n      mload(0x40)\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      log3\n        /* \"@openzeppelin/contracts@4.7.3/access/Ownable.sol\":2496:2620  {... */\n      pop\n        /* \"@openzeppelin/contracts@4.7.3/access/Ownable.sol\":2433:2620  function _transferOwnership(address newOwner) internal virtual {... */\n      pop\n      jump\t// out\n        /* \"@openzeppelin/contracts@4.7.3/utils/Counters.sol\":945:1068  function increment(Counter storage counter) internal {... */\n    tag_83:\n        /* \"@openzeppelin/contracts@4.7.3/utils/Counters.sol\":1050:1051  1 */\n      0x01\n        /* \"@openzeppelin/contracts@4.7.3/utils/Counters.sol\":1032:1039  counter */\n      dup2\n        /* \"@openzeppelin/contracts@4.7.3/utils/Counters.sol\":1032:1046  counter._value */\n      0x00\n      add\n      0x00\n        /* \"@openzeppelin/contracts@4.7.3/utils/Counters.sol\":1032:1051  counter._value += 1 */\n      dup3\n      dup3\n      sload\n      add\n      swap3\n      pop\n      pop\n      dup2\n      swap1\n      sstore\n      pop\n        /* \"@openzeppelin/contracts@4.7.3/utils/Counters.sol\":945:1068  function increment(Counter storage counter) internal {... */\n      pop\n      jump\t// out\n        /* \"@openzeppelin/contracts@4.7.3/utils/Context.sol\":640:736  function _msgSender() internal view virtual returns (address) {... */\n    tag_97:\n        /* \"@openzeppelin/contracts@4.7.3/utils/Context.sol\":693:700  address */\n      0x00\n        /* \"@openzeppelin/contracts@4.7.3/utils/Context.sol\":719:729  msg.sender */\n      caller\n        /* \"@openzeppelin/contracts@4.7.3/utils/Context.sol\":712:729  return msg.sender */\n      swap1\n      pop\n        /* \"@openzeppelin/contracts@4.7.3/utils/Context.sol\":640:736  function _msgSender() internal view virtual returns (address) {... */\n      swap1\n      jump\t// out\n        /* \"#utility.yul\":7:417   */\n    tag_106:\n        /* \"#utility.yul\":84:89   */\n      0x00\n        /* \"#utility.yul\":109:174   */\n      tag_108\n        /* \"#utility.yul\":125:173   */\n      tag_109\n        /* \"#utility.yul\":166:172   */\n      dup5\n        /* \"#utility.yul\":125:173   */\n      tag_110\n      jump\t// in\n    tag_109:\n        /* \"#utility.yul\":109:174   */\n      tag_111\n      jump\t// in\n    tag_108:\n        /* \"#utility.yul\":100:174   */\n      swap1\n      pop\n        /* \"#utility.yul\":197:203   */\n      dup3\n        /* \"#utility.yul\":190:195   */\n      dup2\n        /* \"#utility.yul\":183:204   */\n      mstore\n        /* \"#utility.yul\":235:239   */\n      0x20\n        /* \"#utility.yul\":228:233   */\n      dup2\n        /* \"#utility.yul\":224:240   */\n      add\n        /* \"#utility.yul\":273:276   */\n      dup5\n        /* \"#utility.yul\":264:270   */\n      dup5\n        /* \"#utility.yul\":259:262   */\n      dup5\n        /* \"#utility.yul\":255:271   */\n      add\n        /* \"#utility.yul\":252:277   */\n      gt\n        /* \"#utility.yul\":249:361   */\n      iszero\n      tag_112\n      jumpi\n        /* \"#utility.yul\":280:359   */\n      tag_113\n      tag_114\n      jump\t// in\n    tag_113:\n        /* \"#utility.yul\":249:361   */\n    tag_112:\n        /* \"#utility.yul\":370:411   */\n      tag_115\n        /* \"#utility.yul\":404:410   */\n      dup5\n        /* \"#utility.yul\":399:402   */\n      dup3\n        /* \"#utility.yul\":394:397   */\n      dup6\n        /* \"#utility.yul\":370:411   */\n      tag_116\n      jump\t// in\n    tag_115:\n        /* \"#utility.yul\":90:417   */\n      pop\n        /* \"#utility.yul\":7:417   */\n      swap4\n      swap3\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":423:562   */\n    tag_117:\n        /* \"#utility.yul\":469:474   */\n      0x00\n        /* \"#utility.yul\":507:513   */\n      dup2\n        /* \"#utility.yul\":494:514   */\n      calldataload\n        /* \"#utility.yul\":485:514   */\n      swap1\n      pop\n        /* \"#utility.yul\":523:556   */\n      tag_119\n        /* \"#utility.yul\":550:555   */\n      dup2\n        /* \"#utility.yul\":523:556   */\n      tag_120\n      jump\t// in\n    tag_119:\n        /* \"#utility.yul\":423:562   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":581:919   */\n    tag_121:\n        /* \"#utility.yul\":636:641   */\n      0x00\n        /* \"#utility.yul\":685:688   */\n      dup3\n        /* \"#utility.yul\":678:682   */\n      0x1f\n        /* \"#utility.yul\":670:676   */\n      dup4\n        /* \"#utility.yul\":666:683   */\n      add\n        /* \"#utility.yul\":662:689   */\n      slt\n        /* \"#utility.yul\":652:774   */\n      tag_123\n      jumpi\n        /* \"#utility.yul\":693:772   */\n      tag_124\n      tag_125\n      jump\t// in\n    tag_124:\n        /* \"#utility.yul\":652:774   */\n    tag_123:\n        /* \"#utility.yul\":810:816   */\n      dup2\n        /* \"#utility.yul\":797:817   */\n      calldataload\n        /* \"#utility.yul\":835:913   */\n      tag_126\n        /* \"#utility.yul\":909:912   */\n      dup5\n        /* \"#utility.yul\":901:907   */\n      dup3\n        /* \"#utility.yul\":894:898   */\n      0x20\n        /* \"#utility.yul\":886:892   */\n      dup7\n        /* \"#utility.yul\":882:899   */\n      add\n        /* \"#utility.yul\":835:913   */\n      tag_106\n      jump\t// in\n    tag_126:\n        /* \"#utility.yul\":826:913   */\n      swap2\n      pop\n        /* \"#utility.yul\":642:919   */\n      pop\n        /* \"#utility.yul\":581:919   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":925:1064   */\n    tag_127:\n        /* \"#utility.yul\":971:976   */\n      0x00\n        /* \"#utility.yul\":1009:1015   */\n      dup2\n        /* \"#utility.yul\":996:1016   */\n      calldataload\n        /* \"#utility.yul\":987:1016   */\n      swap1\n      pop\n        /* \"#utility.yul\":1025:1058   */\n      tag_129\n        /* \"#utility.yul\":1052:1057   */\n      dup2\n        /* \"#utility.yul\":1025:1058   */\n      tag_130\n      jump\t// in\n    tag_129:\n        /* \"#utility.yul\":925:1064   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":1070:1399   */\n    tag_17:\n        /* \"#utility.yul\":1129:1135   */\n      0x00\n        /* \"#utility.yul\":1178:1180   */\n      0x20\n        /* \"#utility.yul\":1166:1175   */\n      dup3\n        /* \"#utility.yul\":1157:1164   */\n      dup5\n        /* \"#utility.yul\":1153:1176   */\n      sub\n        /* \"#utility.yul\":1149:1181   */\n      slt\n        /* \"#utility.yul\":1146:1265   */\n      iszero\n      tag_132\n      jumpi\n        /* \"#utility.yul\":1184:1263   */\n      tag_133\n      tag_134\n      jump\t// in\n    tag_133:\n        /* \"#utility.yul\":1146:1265   */\n    tag_132:\n        /* \"#utility.yul\":1304:1305   */\n      0x00\n        /* \"#utility.yul\":1329:1382   */\n      tag_135\n        /* \"#utility.yul\":1374:1381   */\n      dup5\n        /* \"#utility.yul\":1365:1371   */\n      dup3\n        /* \"#utility.yul\":1354:1363   */\n      dup6\n        /* \"#utility.yul\":1350:1372   */\n      add\n        /* \"#utility.yul\":1329:1382   */\n      tag_117\n      jump\t// in\n    tag_135:\n        /* \"#utility.yul\":1319:1382   */\n      swap2\n      pop\n        /* \"#utility.yul\":1275:1392   */\n      pop\n        /* \"#utility.yul\":1070:1399   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":1405:2348   */\n    tag_24:\n        /* \"#utility.yul\":1500:1506   */\n      0x00\n        /* \"#utility.yul\":1508:1514   */\n      dup1\n        /* \"#utility.yul\":1516:1522   */\n      0x00\n        /* \"#utility.yul\":1524:1530   */\n      dup1\n        /* \"#utility.yul\":1573:1576   */\n      0x80\n        /* \"#utility.yul\":1561:1570   */\n      dup6\n        /* \"#utility.yul\":1552:1559   */\n      dup8\n        /* \"#utility.yul\":1548:1571   */\n      sub\n        /* \"#utility.yul\":1544:1577   */\n      slt\n        /* \"#utility.yul\":1541:1661   */\n      iszero\n      tag_137\n      jumpi\n        /* \"#utility.yul\":1580:1659   */\n      tag_138\n      tag_134\n      jump\t// in\n    tag_138:\n        /* \"#utility.yul\":1541:1661   */\n    tag_137:\n        /* \"#utility.yul\":1700:1701   */\n      0x00\n        /* \"#utility.yul\":1725:1778   */\n      tag_139\n        /* \"#utility.yul\":1770:1777   */\n      dup8\n        /* \"#utility.yul\":1761:1767   */\n      dup3\n        /* \"#utility.yul\":1750:1759   */\n      dup9\n        /* \"#utility.yul\":1746:1768   */\n      add\n        /* \"#utility.yul\":1725:1778   */\n      tag_117\n      jump\t// in\n    tag_139:\n        /* \"#utility.yul\":1715:1778   */\n      swap5\n      pop\n        /* \"#utility.yul\":1671:1788   */\n      pop\n        /* \"#utility.yul\":1827:1829   */\n      0x20\n        /* \"#utility.yul\":1853:1906   */\n      tag_140\n        /* \"#utility.yul\":1898:1905   */\n      dup8\n        /* \"#utility.yul\":1889:1895   */\n      dup3\n        /* \"#utility.yul\":1878:1887   */\n      dup9\n        /* \"#utility.yul\":1874:1896   */\n      add\n        /* \"#utility.yul\":1853:1906   */\n      tag_117\n      jump\t// in\n    tag_140:\n        /* \"#utility.yul\":1843:1906   */\n      swap4\n      pop\n        /* \"#utility.yul\":1798:1916   */\n      pop\n        /* \"#utility.yul\":1955:1957   */\n      0x40\n        /* \"#utility.yul\":1981:2034   */\n      tag_141\n        /* \"#utility.yul\":2026:2033   */\n      dup8\n        /* \"#utility.yul\":2017:2023   */\n      dup3\n        /* \"#utility.yul\":2006:2015   */\n      dup9\n        /* \"#utility.yul\":2002:2024   */\n      add\n        /* \"#utility.yul\":1981:2034   */\n      tag_127\n      jump\t// in\n    tag_141:\n        /* \"#utility.yul\":1971:2034   */\n      swap3\n      pop\n        /* \"#utility.yul\":1926:2044   */\n      pop\n        /* \"#utility.yul\":2111:2113   */\n      0x60\n        /* \"#utility.yul\":2100:2109   */\n      dup6\n        /* \"#utility.yul\":2096:2114   */\n      add\n        /* \"#utility.yul\":2083:2115   */\n      calldataload\n        /* \"#utility.yul\":2142:2160   */\n      0xffffffffffffffff\n        /* \"#utility.yul\":2134:2140   */\n      dup2\n        /* \"#utility.yul\":2131:2161   */\n      gt\n        /* \"#utility.yul\":2128:2245   */\n      iszero\n      tag_142\n      jumpi\n        /* \"#utility.yul\":2164:2243   */\n      tag_143\n      tag_144\n      jump\t// in\n    tag_143:\n        /* \"#utility.yul\":2128:2245   */\n    tag_142:\n        /* \"#utility.yul\":2269:2331   */\n      tag_145\n        /* \"#utility.yul\":2323:2330   */\n      dup8\n        /* \"#utility.yul\":2314:2320   */\n      dup3\n        /* \"#utility.yul\":2303:2312   */\n      dup9\n        /* \"#utility.yul\":2299:2321   */\n      add\n        /* \"#utility.yul\":2269:2331   */\n      tag_121\n      jump\t// in\n    tag_145:\n        /* \"#utility.yul\":2259:2331   */\n      swap2\n      pop\n        /* \"#utility.yul\":2054:2341   */\n      pop\n        /* \"#utility.yul\":1405:2348   */\n      swap3\n      swap6\n      swap2\n      swap5\n      pop\n      swap3\n      pop\n      jump\t// out\n        /* \"#utility.yul\":2354:2683   */\n    tag_31:\n        /* \"#utility.yul\":2413:2419   */\n      0x00\n        /* \"#utility.yul\":2462:2464   */\n      0x20\n        /* \"#utility.yul\":2450:2459   */\n      dup3\n        /* \"#utility.yul\":2441:2448   */\n      dup5\n        /* \"#utility.yul\":2437:2460   */\n      sub\n        /* \"#utility.yul\":2433:2465   */\n      slt\n        /* \"#utility.yul\":2430:2549   */\n      iszero\n      tag_147\n      jumpi\n        /* \"#utility.yul\":2468:2547   */\n      tag_148\n      tag_134\n      jump\t// in\n    tag_148:\n        /* \"#utility.yul\":2430:2549   */\n    tag_147:\n        /* \"#utility.yul\":2588:2589   */\n      0x00\n        /* \"#utility.yul\":2613:2666   */\n      tag_149\n        /* \"#utility.yul\":2658:2665   */\n      dup5\n        /* \"#utility.yul\":2649:2655   */\n      dup3\n        /* \"#utility.yul\":2638:2647   */\n      dup6\n        /* \"#utility.yul\":2634:2656   */\n      add\n        /* \"#utility.yul\":2613:2666   */\n      tag_127\n      jump\t// in\n    tag_149:\n        /* \"#utility.yul\":2603:2666   */\n      swap2\n      pop\n        /* \"#utility.yul\":2559:2676   */\n      pop\n        /* \"#utility.yul\":2354:2683   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":2689:2807   */\n    tag_150:\n        /* \"#utility.yul\":2776:2800   */\n      tag_152\n        /* \"#utility.yul\":2794:2799   */\n      dup2\n        /* \"#utility.yul\":2776:2800   */\n      tag_153\n      jump\t// in\n    tag_152:\n        /* \"#utility.yul\":2771:2774   */\n      dup3\n        /* \"#utility.yul\":2764:2801   */\n      mstore\n        /* \"#utility.yul\":2689:2807   */\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":2813:2928   */\n    tag_154:\n        /* \"#utility.yul\":2898:2921   */\n      tag_156\n        /* \"#utility.yul\":2915:2920   */\n      dup2\n        /* \"#utility.yul\":2898:2921   */\n      tag_157\n      jump\t// in\n    tag_156:\n        /* \"#utility.yul\":2893:2896   */\n      dup3\n        /* \"#utility.yul\":2886:2922   */\n      mstore\n        /* \"#utility.yul\":2813:2928   */\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":2934:3300   */\n    tag_158:\n        /* \"#utility.yul\":3076:3079   */\n      0x00\n        /* \"#utility.yul\":3097:3164   */\n      tag_160\n        /* \"#utility.yul\":3161:3163   */\n      0x1b\n        /* \"#utility.yul\":3156:3159   */\n      dup4\n        /* \"#utility.yul\":3097:3164   */\n      tag_161\n      jump\t// in\n    tag_160:\n        /* \"#utility.yul\":3090:3164   */\n      swap2\n      pop\n        /* \"#utility.yul\":3173:3266   */\n      tag_162\n        /* \"#utility.yul\":3262:3265   */\n      dup3\n        /* \"#utility.yul\":3173:3266   */\n      tag_163\n      jump\t// in\n    tag_162:\n        /* \"#utility.yul\":3291:3293   */\n      0x20\n        /* \"#utility.yul\":3286:3289   */\n      dup3\n        /* \"#utility.yul\":3282:3294   */\n      add\n        /* \"#utility.yul\":3275:3294   */\n      swap1\n      pop\n        /* \"#utility.yul\":2934:3300   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":3306:3672   */\n    tag_164:\n        /* \"#utility.yul\":3448:3451   */\n      0x00\n        /* \"#utility.yul\":3469:3536   */\n      tag_166\n        /* \"#utility.yul\":3533:3535   */\n      0x26\n        /* \"#utility.yul\":3528:3531   */\n      dup4\n        /* \"#utility.yul\":3469:3536   */\n      tag_161\n      jump\t// in\n    tag_166:\n        /* \"#utility.yul\":3462:3536   */\n      swap2\n      pop\n        /* \"#utility.yul\":3545:3638   */\n      tag_167\n        /* \"#utility.yul\":3634:3637   */\n      dup3\n        /* \"#utility.yul\":3545:3638   */\n      tag_168\n      jump\t// in\n    tag_167:\n        /* \"#utility.yul\":3663:3665   */\n      0x40\n        /* \"#utility.yul\":3658:3661   */\n      dup3\n        /* \"#utility.yul\":3654:3666   */\n      add\n        /* \"#utility.yul\":3647:3666   */\n      swap1\n      pop\n        /* \"#utility.yul\":3306:3672   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":3678:4044   */\n    tag_169:\n        /* \"#utility.yul\":3820:3823   */\n      0x00\n        /* \"#utility.yul\":3841:3908   */\n      tag_171\n        /* \"#utility.yul\":3905:3907   */\n      0x20\n        /* \"#utility.yul\":3900:3903   */\n      dup4\n        /* \"#utility.yul\":3841:3908   */\n      tag_161\n      jump\t// in\n    tag_171:\n        /* \"#utility.yul\":3834:3908   */\n      swap2\n      pop\n        /* \"#utility.yul\":3917:4010   */\n      tag_172\n        /* \"#utility.yul\":4006:4009   */\n      dup3\n        /* \"#utility.yul\":3917:4010   */\n      tag_173\n      jump\t// in\n    tag_172:\n        /* \"#utility.yul\":4035:4037   */\n      0x20\n        /* \"#utility.yul\":4030:4033   */\n      dup3\n        /* \"#utility.yul\":4026:4038   */\n      add\n        /* \"#utility.yul\":4019:4038   */\n      swap1\n      pop\n        /* \"#utility.yul\":3678:4044   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":4050:4416   */\n    tag_174:\n        /* \"#utility.yul\":4192:4195   */\n      0x00\n        /* \"#utility.yul\":4213:4280   */\n      tag_176\n        /* \"#utility.yul\":4277:4279   */\n      0x16\n        /* \"#utility.yul\":4272:4275   */\n      dup4\n        /* \"#utility.yul\":4213:4280   */\n      tag_161\n      jump\t// in\n    tag_176:\n        /* \"#utility.yul\":4206:4280   */\n      swap2\n      pop\n        /* \"#utility.yul\":4289:4382   */\n      tag_177\n        /* \"#utility.yul\":4378:4381   */\n      dup3\n        /* \"#utility.yul\":4289:4382   */\n      tag_178\n      jump\t// in\n    tag_177:\n        /* \"#utility.yul\":4407:4409   */\n      0x20\n        /* \"#utility.yul\":4402:4405   */\n      dup3\n        /* \"#utility.yul\":4398:4410   */\n      add\n        /* \"#utility.yul\":4391:4410   */\n      swap1\n      pop\n        /* \"#utility.yul\":4050:4416   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":4422:4788   */\n    tag_179:\n        /* \"#utility.yul\":4564:4567   */\n      0x00\n        /* \"#utility.yul\":4585:4652   */\n      tag_181\n        /* \"#utility.yul\":4649:4651   */\n      0x1f\n        /* \"#utility.yul\":4644:4647   */\n      dup4\n        /* \"#utility.yul\":4585:4652   */\n      tag_161\n      jump\t// in\n    tag_181:\n        /* \"#utility.yul\":4578:4652   */\n      swap2\n      pop\n        /* \"#utility.yul\":4661:4754   */\n      tag_182\n        /* \"#utility.yul\":4750:4753   */\n      dup3\n        /* \"#utility.yul\":4661:4754   */\n      tag_183\n      jump\t// in\n    tag_182:\n        /* \"#utility.yul\":4779:4781   */\n      0x20\n        /* \"#utility.yul\":4774:4777   */\n      dup3\n        /* \"#utility.yul\":4770:4782   */\n      add\n        /* \"#utility.yul\":4763:4782   */\n      swap1\n      pop\n        /* \"#utility.yul\":4422:4788   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":4794:4912   */\n    tag_184:\n        /* \"#utility.yul\":4881:4905   */\n      tag_186\n        /* \"#utility.yul\":4899:4904   */\n      dup2\n        /* \"#utility.yul\":4881:4905   */\n      tag_187\n      jump\t// in\n    tag_186:\n        /* \"#utility.yul\":4876:4879   */\n      dup3\n        /* \"#utility.yul\":4869:4906   */\n      mstore\n        /* \"#utility.yul\":4794:4912   */\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":4918:5140   */\n    tag_41:\n        /* \"#utility.yul\":5011:5015   */\n      0x00\n        /* \"#utility.yul\":5049:5051   */\n      0x20\n        /* \"#utility.yul\":5038:5047   */\n      dup3\n        /* \"#utility.yul\":5034:5052   */\n      add\n        /* \"#utility.yul\":5026:5052   */\n      swap1\n      pop\n        /* \"#utility.yul\":5062:5133   */\n      tag_189\n        /* \"#utility.yul\":5130:5131   */\n      0x00\n        /* \"#utility.yul\":5119:5128   */\n      dup4\n        /* \"#utility.yul\":5115:5132   */\n      add\n        /* \"#utility.yul\":5106:5112   */\n      dup5\n        /* \"#utility.yul\":5062:5133   */\n      tag_150\n      jump\t// in\n    tag_189:\n        /* \"#utility.yul\":4918:5140   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":5146:5588   */\n    tag_66:\n        /* \"#utility.yul\":5295:5299   */\n      0x00\n        /* \"#utility.yul\":5333:5335   */\n      0x60\n        /* \"#utility.yul\":5322:5331   */\n      dup3\n        /* \"#utility.yul\":5318:5336   */\n      add\n        /* \"#utility.yul\":5310:5336   */\n      swap1\n      pop\n        /* \"#utility.yul\":5346:5417   */\n      tag_191\n        /* \"#utility.yul\":5414:5415   */\n      0x00\n        /* \"#utility.yul\":5403:5412   */\n      dup4\n        /* \"#utility.yul\":5399:5416   */\n      add\n        /* \"#utility.yul\":5390:5396   */\n      dup7\n        /* \"#utility.yul\":5346:5417   */\n      tag_150\n      jump\t// in\n    tag_191:\n        /* \"#utility.yul\":5427:5499   */\n      tag_192\n        /* \"#utility.yul\":5495:5497   */\n      0x20\n        /* \"#utility.yul\":5484:5493   */\n      dup4\n        /* \"#utility.yul\":5480:5498   */\n      add\n        /* \"#utility.yul\":5471:5477   */\n      dup6\n        /* \"#utility.yul\":5427:5499   */\n      tag_150\n      jump\t// in\n    tag_192:\n        /* \"#utility.yul\":5509:5581   */\n      tag_193\n        /* \"#utility.yul\":5577:5579   */\n      0x40\n        /* \"#utility.yul\":5566:5575   */\n      dup4\n        /* \"#utility.yul\":5562:5580   */\n      add\n        /* \"#utility.yul\":5553:5559   */\n      dup5\n        /* \"#utility.yul\":5509:5581   */\n      tag_184\n      jump\t// in\n    tag_193:\n        /* \"#utility.yul\":5146:5588   */\n      swap5\n      swap4\n      pop\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":5594:5812   */\n    tag_27:\n        /* \"#utility.yul\":5685:5689   */\n      0x00\n        /* \"#utility.yul\":5723:5725   */\n      0x20\n        /* \"#utility.yul\":5712:5721   */\n      dup3\n        /* \"#utility.yul\":5708:5726   */\n      add\n        /* \"#utility.yul\":5700:5726   */\n      swap1\n      pop\n        /* \"#utility.yul\":5736:5805   */\n      tag_195\n        /* \"#utility.yul\":5802:5803   */\n      0x00\n        /* \"#utility.yul\":5791:5800   */\n      dup4\n        /* \"#utility.yul\":5787:5804   */\n      add\n        /* \"#utility.yul\":5778:5784   */\n      dup5\n        /* \"#utility.yul\":5736:5805   */\n      tag_154\n      jump\t// in\n    tag_195:\n        /* \"#utility.yul\":5594:5812   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":5818:6237   */\n    tag_94:\n        /* \"#utility.yul\":5984:5988   */\n      0x00\n        /* \"#utility.yul\":6022:6024   */\n      0x20\n        /* \"#utility.yul\":6011:6020   */\n      dup3\n        /* \"#utility.yul\":6007:6025   */\n      add\n        /* \"#utility.yul\":5999:6025   */\n      swap1\n      pop\n        /* \"#utility.yul\":6071:6080   */\n      dup2\n        /* \"#utility.yul\":6065:6069   */\n      dup2\n        /* \"#utility.yul\":6061:6081   */\n      sub\n        /* \"#utility.yul\":6057:6058   */\n      0x00\n        /* \"#utility.yul\":6046:6055   */\n      dup4\n        /* \"#utility.yul\":6042:6059   */\n      add\n        /* \"#utility.yul\":6035:6082   */\n      mstore\n        /* \"#utility.yul\":6099:6230   */\n      tag_197\n        /* \"#utility.yul\":6225:6229   */\n      dup2\n        /* \"#utility.yul\":6099:6230   */\n      tag_158\n      jump\t// in\n    tag_197:\n        /* \"#utility.yul\":6091:6230   */\n      swap1\n      pop\n        /* \"#utility.yul\":5818:6237   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":6243:6662   */\n    tag_89:\n        /* \"#utility.yul\":6409:6413   */\n      0x00\n        /* \"#utility.yul\":6447:6449   */\n      0x20\n        /* \"#utility.yul\":6436:6445   */\n      dup3\n        /* \"#utility.yul\":6432:6450   */\n      add\n        /* \"#utility.yul\":6424:6450   */\n      swap1\n      pop\n        /* \"#utility.yul\":6496:6505   */\n      dup2\n        /* \"#utility.yul\":6490:6494   */\n      dup2\n        /* \"#utility.yul\":6486:6506   */\n      sub\n        /* \"#utility.yul\":6482:6483   */\n      0x00\n        /* \"#utility.yul\":6471:6480   */\n      dup4\n        /* \"#utility.yul\":6467:6484   */\n      add\n        /* \"#utility.yul\":6460:6507   */\n      mstore\n        /* \"#utility.yul\":6524:6655   */\n      tag_199\n        /* \"#utility.yul\":6650:6654   */\n      dup2\n        /* \"#utility.yul\":6524:6655   */\n      tag_164\n      jump\t// in\n    tag_199:\n        /* \"#utility.yul\":6516:6655   */\n      swap1\n      pop\n        /* \"#utility.yul\":6243:6662   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":6668:7087   */\n    tag_101:\n        /* \"#utility.yul\":6834:6838   */\n      0x00\n        /* \"#utility.yul\":6872:6874   */\n      0x20\n        /* \"#utility.yul\":6861:6870   */\n      dup3\n        /* \"#utility.yul\":6857:6875   */\n      add\n        /* \"#utility.yul\":6849:6875   */\n      swap1\n      pop\n        /* \"#utility.yul\":6921:6930   */\n      dup2\n        /* \"#utility.yul\":6915:6919   */\n      dup2\n        /* \"#utility.yul\":6911:6931   */\n      sub\n        /* \"#utility.yul\":6907:6908   */\n      0x00\n        /* \"#utility.yul\":6896:6905   */\n      dup4\n        /* \"#utility.yul\":6892:6909   */\n      add\n        /* \"#utility.yul\":6885:6932   */\n      mstore\n        /* \"#utility.yul\":6949:7080   */\n      tag_201\n        /* \"#utility.yul\":7075:7079   */\n      dup2\n        /* \"#utility.yul\":6949:7080   */\n      tag_169\n      jump\t// in\n    tag_201:\n        /* \"#utility.yul\":6941:7080   */\n      swap1\n      pop\n        /* \"#utility.yul\":6668:7087   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":7093:7512   */\n    tag_62:\n        /* \"#utility.yul\":7259:7263   */\n      0x00\n        /* \"#utility.yul\":7297:7299   */\n      0x20\n        /* \"#utility.yul\":7286:7295   */\n      dup3\n        /* \"#utility.yul\":7282:7300   */\n      add\n        /* \"#utility.yul\":7274:7300   */\n      swap1\n      pop\n        /* \"#utility.yul\":7346:7355   */\n      dup2\n        /* \"#utility.yul\":7340:7344   */\n      dup2\n        /* \"#utility.yul\":7336:7356   */\n      sub\n        /* \"#utility.yul\":7332:7333   */\n      0x00\n        /* \"#utility.yul\":7321:7330   */\n      dup4\n        /* \"#utility.yul\":7317:7334   */\n      add\n        /* \"#utility.yul\":7310:7357   */\n      mstore\n        /* \"#utility.yul\":7374:7505   */\n      tag_203\n        /* \"#utility.yul\":7500:7504   */\n      dup2\n        /* \"#utility.yul\":7374:7505   */\n      tag_174\n      jump\t// in\n    tag_203:\n        /* \"#utility.yul\":7366:7505   */\n      swap1\n      pop\n        /* \"#utility.yul\":7093:7512   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":7518:7937   */\n    tag_58:\n        /* \"#utility.yul\":7684:7688   */\n      0x00\n        /* \"#utility.yul\":7722:7724   */\n      0x20\n        /* \"#utility.yul\":7711:7720   */\n      dup3\n        /* \"#utility.yul\":7707:7725   */\n      add\n        /* \"#utility.yul\":7699:7725   */\n      swap1\n      pop\n        /* \"#utility.yul\":7771:7780   */\n      dup2\n        /* \"#utility.yul\":7765:7769   */\n      dup2\n        /* \"#utility.yul\":7761:7781   */\n      sub\n        /* \"#utility.yul\":7757:7758   */\n      0x00\n        /* \"#utility.yul\":7746:7755   */\n      dup4\n        /* \"#utility.yul\":7742:7759   */\n      add\n        /* \"#utility.yul\":7735:7782   */\n      mstore\n        /* \"#utility.yul\":7799:7930   */\n      tag_205\n        /* \"#utility.yul\":7925:7929   */\n      dup2\n        /* \"#utility.yul\":7799:7930   */\n      tag_179\n      jump\t// in\n    tag_205:\n        /* \"#utility.yul\":7791:7930   */\n      swap1\n      pop\n        /* \"#utility.yul\":7518:7937   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":7943:8165   */\n    tag_20:\n        /* \"#utility.yul\":8036:8040   */\n      0x00\n        /* \"#utility.yul\":8074:8076   */\n      0x20\n        /* \"#utility.yul\":8063:8072   */\n      dup3\n        /* \"#utility.yul\":8059:8077   */\n      add\n        /* \"#utility.yul\":8051:8077   */\n      swap1\n      pop\n        /* \"#utility.yul\":8087:8158   */\n      tag_207\n        /* \"#utility.yul\":8155:8156   */\n      0x00\n        /* \"#utility.yul\":8144:8153   */\n      dup4\n        /* \"#utility.yul\":8140:8157   */\n      add\n        /* \"#utility.yul\":8131:8137   */\n      dup5\n        /* \"#utility.yul\":8087:8158   */\n      tag_184\n      jump\t// in\n    tag_207:\n        /* \"#utility.yul\":7943:8165   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":8171:8300   */\n    tag_111:\n        /* \"#utility.yul\":8205:8211   */\n      0x00\n        /* \"#utility.yul\":8232:8252   */\n      tag_209\n      tag_210\n      jump\t// in\n    tag_209:\n        /* \"#utility.yul\":8222:8252   */\n      swap1\n      pop\n        /* \"#utility.yul\":8261:8294   */\n      tag_211\n        /* \"#utility.yul\":8289:8293   */\n      dup3\n        /* \"#utility.yul\":8281:8287   */\n      dup3\n        /* \"#utility.yul\":8261:8294   */\n      tag_212\n      jump\t// in\n    tag_211:\n        /* \"#utility.yul\":8171:8300   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":8306:8381   */\n    tag_210:\n        /* \"#utility.yul\":8339:8345   */\n      0x00\n        /* \"#utility.yul\":8372:8374   */\n      0x40\n        /* \"#utility.yul\":8366:8375   */\n      mload\n        /* \"#utility.yul\":8356:8375   */\n      swap1\n      pop\n        /* \"#utility.yul\":8306:8381   */\n      swap1\n      jump\t// out\n        /* \"#utility.yul\":8387:8694   */\n    tag_110:\n        /* \"#utility.yul\":8448:8452   */\n      0x00\n        /* \"#utility.yul\":8538:8556   */\n      0xffffffffffffffff\n        /* \"#utility.yul\":8530:8536   */\n      dup3\n        /* \"#utility.yul\":8527:8557   */\n      gt\n        /* \"#utility.yul\":8524:8580   */\n      iszero\n      tag_215\n      jumpi\n        /* \"#utility.yul\":8560:8578   */\n      tag_216\n      tag_217\n      jump\t// in\n    tag_216:\n        /* \"#utility.yul\":8524:8580   */\n    tag_215:\n        /* \"#utility.yul\":8598:8627   */\n      tag_218\n        /* \"#utility.yul\":8620:8626   */\n      dup3\n        /* \"#utility.yul\":8598:8627   */\n      tag_219\n      jump\t// in\n    tag_218:\n        /* \"#utility.yul\":8590:8627   */\n      swap1\n      pop\n        /* \"#utility.yul\":8682:8686   */\n      0x20\n        /* \"#utility.yul\":8676:8680   */\n      dup2\n        /* \"#utility.yul\":8672:8687   */\n      add\n        /* \"#utility.yul\":8664:8687   */\n      swap1\n      pop\n        /* \"#utility.yul\":8387:8694   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":8700:8869   */\n    tag_161:\n        /* \"#utility.yul\":8784:8795   */\n      0x00\n        /* \"#utility.yul\":8818:8824   */\n      dup3\n        /* \"#utility.yul\":8813:8816   */\n      dup3\n        /* \"#utility.yul\":8806:8825   */\n      mstore\n        /* \"#utility.yul\":8858:8862   */\n      0x20\n        /* \"#utility.yul\":8853:8856   */\n      dup3\n        /* \"#utility.yul\":8849:8863   */\n      add\n        /* \"#utility.yul\":8834:8863   */\n      swap1\n      pop\n        /* \"#utility.yul\":8700:8869   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":8875:8971   */\n    tag_153:\n        /* \"#utility.yul\":8912:8919   */\n      0x00\n        /* \"#utility.yul\":8941:8965   */\n      tag_222\n        /* \"#utility.yul\":8959:8964   */\n      dup3\n        /* \"#utility.yul\":8941:8965   */\n      tag_223\n      jump\t// in\n    tag_222:\n        /* \"#utility.yul\":8930:8965   */\n      swap1\n      pop\n        /* \"#utility.yul\":8875:8971   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":8977:9126   */\n    tag_157:\n        /* \"#utility.yul\":9013:9020   */\n      0x00\n        /* \"#utility.yul\":9053:9119   */\n      0xffffffff00000000000000000000000000000000000000000000000000000000\n        /* \"#utility.yul\":9046:9051   */\n      dup3\n        /* \"#utility.yul\":9042:9120   */\n      and\n        /* \"#utility.yul\":9031:9120   */\n      swap1\n      pop\n        /* \"#utility.yul\":8977:9126   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":9132:9258   */\n    tag_223:\n        /* \"#utility.yul\":9169:9176   */\n      0x00\n        /* \"#utility.yul\":9209:9251   */\n      0xffffffffffffffffffffffffffffffffffffffff\n        /* \"#utility.yul\":9202:9207   */\n      dup3\n        /* \"#utility.yul\":9198:9252   */\n      and\n        /* \"#utility.yul\":9187:9252   */\n      swap1\n      pop\n        /* \"#utility.yul\":9132:9258   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":9264:9341   */\n    tag_187:\n        /* \"#utility.yul\":9301:9308   */\n      0x00\n        /* \"#utility.yul\":9330:9335   */\n      dup2\n        /* \"#utility.yul\":9319:9335   */\n      swap1\n      pop\n        /* \"#utility.yul\":9264:9341   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":9347:9501   */\n    tag_116:\n        /* \"#utility.yul\":9431:9437   */\n      dup3\n        /* \"#utility.yul\":9426:9429   */\n      dup2\n        /* \"#utility.yul\":9421:9424   */\n      dup4\n        /* \"#utility.yul\":9408:9438   */\n      calldatacopy\n        /* \"#utility.yul\":9493:9494   */\n      0x00\n        /* \"#utility.yul\":9484:9490   */\n      dup4\n        /* \"#utility.yul\":9479:9482   */\n      dup4\n        /* \"#utility.yul\":9475:9491   */\n      add\n        /* \"#utility.yul\":9468:9495   */\n      mstore\n        /* \"#utility.yul\":9347:9501   */\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":9507:9788   */\n    tag_212:\n        /* \"#utility.yul\":9590:9617   */\n      tag_229\n        /* \"#utility.yul\":9612:9616   */\n      dup3\n        /* \"#utility.yul\":9590:9617   */\n      tag_219\n      jump\t// in\n    tag_229:\n        /* \"#utility.yul\":9582:9588   */\n      dup2\n        /* \"#utility.yul\":9578:9618   */\n      add\n        /* \"#utility.yul\":9720:9726   */\n      dup2\n        /* \"#utility.yul\":9708:9718   */\n      dup2\n        /* \"#utility.yul\":9705:9727   */\n      lt\n        /* \"#utility.yul\":9684:9702   */\n      0xffffffffffffffff\n        /* \"#utility.yul\":9672:9682   */\n      dup3\n        /* \"#utility.yul\":9669:9703   */\n      gt\n        /* \"#utility.yul\":9666:9728   */\n      or\n        /* \"#utility.yul\":9663:9751   */\n      iszero\n      tag_230\n      jumpi\n        /* \"#utility.yul\":9731:9749   */\n      tag_231\n      tag_217\n      jump\t// in\n    tag_231:\n        /* \"#utility.yul\":9663:9751   */\n    tag_230:\n        /* \"#utility.yul\":9771:9781   */\n      dup1\n        /* \"#utility.yul\":9767:9769   */\n      0x40\n        /* \"#utility.yul\":9760:9782   */\n      mstore\n        /* \"#utility.yul\":9550:9788   */\n      pop\n        /* \"#utility.yul\":9507:9788   */\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":9794:9974   */\n    tag_217:\n        /* \"#utility.yul\":9842:9919   */\n      0x4e487b7100000000000000000000000000000000000000000000000000000000\n        /* \"#utility.yul\":9839:9840   */\n      0x00\n        /* \"#utility.yul\":9832:9920   */\n      mstore\n        /* \"#utility.yul\":9939:9943   */\n      0x41\n        /* \"#utility.yul\":9936:9937   */\n      0x04\n        /* \"#utility.yul\":9929:9944   */\n      mstore\n        /* \"#utility.yul\":9963:9967   */\n      0x24\n        /* \"#utility.yul\":9960:9961   */\n      0x00\n        /* \"#utility.yul\":9953:9968   */\n      revert\n        /* \"#utility.yul\":9980:10097   */\n    tag_125:\n        /* \"#utility.yul\":10089:10090   */\n      0x00\n        /* \"#utility.yul\":10086:10087   */\n      dup1\n        /* \"#utility.yul\":10079:10091   */\n      revert\n        /* \"#utility.yul\":10103:10220   */\n    tag_114:\n        /* \"#utility.yul\":10212:10213   */\n      0x00\n        /* \"#utility.yul\":10209:10210   */\n      dup1\n        /* \"#utility.yul\":10202:10214   */\n      revert\n        /* \"#utility.yul\":10226:10343   */\n    tag_144:\n        /* \"#utility.yul\":10335:10336   */\n      0x00\n        /* \"#utility.yul\":10332:10333   */\n      dup1\n        /* \"#utility.yul\":10325:10337   */\n      revert\n        /* \"#utility.yul\":10349:10466   */\n    tag_134:\n        /* \"#utility.yul\":10458:10459   */\n      0x00\n        /* \"#utility.yul\":10455:10456   */\n      dup1\n        /* \"#utility.yul\":10448:10460   */\n      revert\n        /* \"#utility.yul\":10472:10574   */\n    tag_219:\n        /* \"#utility.yul\":10513:10519   */\n      0x00\n        /* \"#utility.yul\":10564:10566   */\n      0x1f\n        /* \"#utility.yul\":10560:10567   */\n      not\n        /* \"#utility.yul\":10555:10557   */\n      0x1f\n        /* \"#utility.yul\":10548:10553   */\n      dup4\n        /* \"#utility.yul\":10544:10558   */\n      add\n        /* \"#utility.yul\":10540:10568   */\n      and\n        /* \"#utility.yul\":10530:10568   */\n      swap1\n      pop\n        /* \"#utility.yul\":10472:10574   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":10580:10757   */\n    tag_163:\n        /* \"#utility.yul\":10720:10749   */\n      0x436f756e7465723a2064656372656d656e74206f766572666c6f770000000000\n        /* \"#utility.yul\":10716:10717   */\n      0x00\n        /* \"#utility.yul\":10708:10714   */\n      dup3\n        /* \"#utility.yul\":10704:10718   */\n      add\n        /* \"#utility.yul\":10697:10750   */\n      mstore\n        /* \"#utility.yul\":10580:10757   */\n      pop\n      jump\t// out\n        /* \"#utility.yul\":10763:10988   */\n    tag_168:\n        /* \"#utility.yul\":10903:10937   */\n      0x4f776e61626c653a206e6577206f776e657220697320746865207a65726f2061\n        /* \"#utility.yul\":10899:10900   */\n      0x00\n        /* \"#utility.yul\":10891:10897   */\n      dup3\n        /* \"#utility.yul\":10887:10901   */\n      add\n        /* \"#utility.yul\":10880:10938   */\n      mstore\n        /* \"#utility.yul\":10972:10980   */\n      0x6464726573730000000000000000000000000000000000000000000000000000\n        /* \"#utility.yul\":10967:10969   */\n      0x20\n        /* \"#utility.yul\":10959:10965   */\n      dup3\n        /* \"#utility.yul\":10955:10970   */\n      add\n        /* \"#utility.yul\":10948:10981   */\n      mstore\n        /* \"#utility.yul\":10763:10988   */\n      pop\n      jump\t// out\n        /* \"#utility.yul\":10994:11176   */\n    tag_173:\n        /* \"#utility.yul\":11134:11168   */\n      0x4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572\n        /* \"#utility.yul\":11130:11131   */\n      0x00\n        /* \"#utility.yul\":11122:11128   */\n      dup3\n        /* \"#utility.yul\":11118:11132   */\n      add\n        /* \"#utility.yul\":11111:11169   */\n      mstore\n        /* \"#utility.yul\":10994:11176   */\n      pop\n      jump\t// out\n        /* \"#utility.yul\":11182:11354   */\n    tag_178:\n        /* \"#utility.yul\":11322:11346   */\n      0x596f7520617265206e6f7420746865206f776e65722e00000000000000000000\n        /* \"#utility.yul\":11318:11319   */\n      0x00\n        /* \"#utility.yul\":11310:11316   */\n      dup3\n        /* \"#utility.yul\":11306:11320   */\n      add\n        /* \"#utility.yul\":11299:11347   */\n      mstore\n        /* \"#utility.yul\":11182:11354   */\n      pop\n      jump\t// out\n        /* \"#utility.yul\":11360:11541   */\n    tag_183:\n        /* \"#utility.yul\":11500:11533   */\n      0x5265656e7472616e637947756172643a207265656e7472616e742063616c6c00\n        /* \"#utility.yul\":11496:11497   */\n      0x00\n        /* \"#utility.yul\":11488:11494   */\n      dup3\n        /* \"#utility.yul\":11484:11498   */\n      add\n        /* \"#utility.yul\":11477:11534   */\n      mstore\n        /* \"#utility.yul\":11360:11541   */\n      pop\n      jump\t// out\n        /* \"#utility.yul\":11547:11669   */\n    tag_120:\n        /* \"#utility.yul\":11620:11644   */\n      tag_244\n        /* \"#utility.yul\":11638:11643   */\n      dup2\n        /* \"#utility.yul\":11620:11644   */\n      tag_153\n      jump\t// in\n    tag_244:\n        /* \"#utility.yul\":11613:11618   */\n      dup2\n        /* \"#utility.yul\":11610:11645   */\n      eq\n        /* \"#utility.yul\":11600:11663   */\n      tag_245\n      jumpi\n        /* \"#utility.yul\":11659:11660   */\n      0x00\n        /* \"#utility.yul\":11656:11657   */\n      dup1\n        /* \"#utility.yul\":11649:11661   */\n      revert\n        /* \"#utility.yul\":11600:11663   */\n    tag_245:\n        /* \"#utility.yul\":11547:11669   */\n      pop\n      jump\t// out\n        /* \"#utility.yul\":11675:11797   */\n    tag_130:\n        /* \"#utility.yul\":11748:11772   */\n      tag_247\n        /* \"#utility.yul\":11766:11771   */\n      dup2\n        /* \"#utility.yul\":11748:11772   */\n      tag_187\n      jump\t// in\n    tag_247:\n        /* \"#utility.yul\":11741:11746   */\n      dup2\n        /* \"#utility.yul\":11738:11773   */\n      eq\n        /* \"#utility.yul\":11728:11791   */\n      tag_248\n      jumpi\n        /* \"#utility.yul\":11787:11788   */\n      0x00\n        /* \"#utility.yul\":11784:11785   */\n      dup1\n        /* \"#utility.yul\":11777:11789   */\n      revert\n        /* \"#utility.yul\":11728:11791   */\n    tag_248:\n        /* \"#utility.yul\":11675:11797   */\n      pop\n      jump\t// out\n\n    auxdata: 0xa2646970667358221220ca278c13e82d0859db6101bf3d49c5a514a613a2a95d3d546e577de540f1e82a64736f6c63430008070033\n}\n",
						"bytecode": {
							"functionDebugData": {
								"@_131": {
									"entryPoint": null,
									"id": 131,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"@_23": {
									"entryPoint": null,
									"id": 23,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"@_485": {
									"entryPoint": null,
									"id": 485,
									"parameterSlots": 1,
									"returnSlots": 0
								},
								"@_msgSender_325": {
									"entryPoint": 166,
									"id": 325,
									"parameterSlots": 0,
									"returnSlots": 1
								},
								"@_transferOwnership_111": {
									"entryPoint": 174,
									"id": 111,
									"parameterSlots": 1,
									"returnSlots": 0
								},
								"abi_decode_t_contract$_IERC721_$268_fromMemory": {
									"entryPoint": 370,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_decode_tuple_t_contract$_IERC721_$268_fromMemory": {
									"entryPoint": 393,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"allocate_unbounded": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 0,
									"returnSlots": 1
								},
								"cleanup_t_address": {
									"entryPoint": 443,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"cleanup_t_contract$_IERC721_$268": {
									"entryPoint": 463,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"cleanup_t_uint160": {
									"entryPoint": 483,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b": {
									"entryPoint": 515,
									"id": null,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"validator_revert_t_contract$_IERC721_$268": {
									"entryPoint": 520,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 0
								}
							},
							"generatedSources": [
								{
									"ast": {
										"nodeType": "YulBlock",
										"src": "0:1406:9",
										"statements": [
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "85:95:9",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "95:22:9",
															"value": {
																"arguments": [
																	{
																		"name": "offset",
																		"nodeType": "YulIdentifier",
																		"src": "110:6:9"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nodeType": "YulIdentifier",
																	"src": "104:5:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "104:13:9"
															},
															"variableNames": [
																{
																	"name": "value",
																	"nodeType": "YulIdentifier",
																	"src": "95:5:9"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value",
																		"nodeType": "YulIdentifier",
																		"src": "168:5:9"
																	}
																],
																"functionName": {
																	"name": "validator_revert_t_contract$_IERC721_$268",
																	"nodeType": "YulIdentifier",
																	"src": "126:41:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "126:48:9"
															},
															"nodeType": "YulExpressionStatement",
															"src": "126:48:9"
														}
													]
												},
												"name": "abi_decode_t_contract$_IERC721_$268_fromMemory",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "offset",
														"nodeType": "YulTypedName",
														"src": "63:6:9",
														"type": ""
													},
													{
														"name": "end",
														"nodeType": "YulTypedName",
														"src": "71:3:9",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "79:5:9",
														"type": ""
													}
												],
												"src": "7:173:9"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "278:289:9",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "324:83:9",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b",
																				"nodeType": "YulIdentifier",
																				"src": "326:77:9"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "326:79:9"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "326:79:9"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "299:7:9"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "308:9:9"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "295:3:9"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "295:23:9"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "320:2:9",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nodeType": "YulIdentifier",
																	"src": "291:3:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "291:32:9"
															},
															"nodeType": "YulIf",
															"src": "288:119:9"
														},
														{
															"nodeType": "YulBlock",
															"src": "417:143:9",
															"statements": [
																{
																	"nodeType": "YulVariableDeclaration",
																	"src": "432:15:9",
																	"value": {
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "446:1:9",
																		"type": "",
																		"value": "0"
																	},
																	"variables": [
																		{
																			"name": "offset",
																			"nodeType": "YulTypedName",
																			"src": "436:6:9",
																			"type": ""
																		}
																	]
																},
																{
																	"nodeType": "YulAssignment",
																	"src": "461:89:9",
																	"value": {
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "headStart",
																						"nodeType": "YulIdentifier",
																						"src": "522:9:9"
																					},
																					{
																						"name": "offset",
																						"nodeType": "YulIdentifier",
																						"src": "533:6:9"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "518:3:9"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "518:22:9"
																			},
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "542:7:9"
																			}
																		],
																		"functionName": {
																			"name": "abi_decode_t_contract$_IERC721_$268_fromMemory",
																			"nodeType": "YulIdentifier",
																			"src": "471:46:9"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "471:79:9"
																	},
																	"variableNames": [
																		{
																			"name": "value0",
																			"nodeType": "YulIdentifier",
																			"src": "461:6:9"
																		}
																	]
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_contract$_IERC721_$268_fromMemory",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "248:9:9",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nodeType": "YulTypedName",
														"src": "259:7:9",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "271:6:9",
														"type": ""
													}
												],
												"src": "186:381:9"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "613:35:9",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "623:19:9",
															"value": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "639:2:9",
																		"type": "",
																		"value": "64"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nodeType": "YulIdentifier",
																	"src": "633:5:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "633:9:9"
															},
															"variableNames": [
																{
																	"name": "memPtr",
																	"nodeType": "YulIdentifier",
																	"src": "623:6:9"
																}
															]
														}
													]
												},
												"name": "allocate_unbounded",
												"nodeType": "YulFunctionDefinition",
												"returnVariables": [
													{
														"name": "memPtr",
														"nodeType": "YulTypedName",
														"src": "606:6:9",
														"type": ""
													}
												],
												"src": "573:75:9"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "699:51:9",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "709:35:9",
															"value": {
																"arguments": [
																	{
																		"name": "value",
																		"nodeType": "YulIdentifier",
																		"src": "738:5:9"
																	}
																],
																"functionName": {
																	"name": "cleanup_t_uint160",
																	"nodeType": "YulIdentifier",
																	"src": "720:17:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "720:24:9"
															},
															"variableNames": [
																{
																	"name": "cleaned",
																	"nodeType": "YulIdentifier",
																	"src": "709:7:9"
																}
															]
														}
													]
												},
												"name": "cleanup_t_address",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "681:5:9",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "cleaned",
														"nodeType": "YulTypedName",
														"src": "691:7:9",
														"type": ""
													}
												],
												"src": "654:96:9"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "816:51:9",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "826:35:9",
															"value": {
																"arguments": [
																	{
																		"name": "value",
																		"nodeType": "YulIdentifier",
																		"src": "855:5:9"
																	}
																],
																"functionName": {
																	"name": "cleanup_t_address",
																	"nodeType": "YulIdentifier",
																	"src": "837:17:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "837:24:9"
															},
															"variableNames": [
																{
																	"name": "cleaned",
																	"nodeType": "YulIdentifier",
																	"src": "826:7:9"
																}
															]
														}
													]
												},
												"name": "cleanup_t_contract$_IERC721_$268",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "798:5:9",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "cleaned",
														"nodeType": "YulTypedName",
														"src": "808:7:9",
														"type": ""
													}
												],
												"src": "756:111:9"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "918:81:9",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "928:65:9",
															"value": {
																"arguments": [
																	{
																		"name": "value",
																		"nodeType": "YulIdentifier",
																		"src": "943:5:9"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "950:42:9",
																		"type": "",
																		"value": "0xffffffffffffffffffffffffffffffffffffffff"
																	}
																],
																"functionName": {
																	"name": "and",
																	"nodeType": "YulIdentifier",
																	"src": "939:3:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "939:54:9"
															},
															"variableNames": [
																{
																	"name": "cleaned",
																	"nodeType": "YulIdentifier",
																	"src": "928:7:9"
																}
															]
														}
													]
												},
												"name": "cleanup_t_uint160",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "900:5:9",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "cleaned",
														"nodeType": "YulTypedName",
														"src": "910:7:9",
														"type": ""
													}
												],
												"src": "873:126:9"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "1094:28:9",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1111:1:9",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1114:1:9",
																		"type": "",
																		"value": "0"
																	}
																],
																"functionName": {
																	"name": "revert",
																	"nodeType": "YulIdentifier",
																	"src": "1104:6:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "1104:12:9"
															},
															"nodeType": "YulExpressionStatement",
															"src": "1104:12:9"
														}
													]
												},
												"name": "revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db",
												"nodeType": "YulFunctionDefinition",
												"src": "1005:117:9"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "1217:28:9",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1234:1:9",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1237:1:9",
																		"type": "",
																		"value": "0"
																	}
																],
																"functionName": {
																	"name": "revert",
																	"nodeType": "YulIdentifier",
																	"src": "1227:6:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "1227:12:9"
															},
															"nodeType": "YulExpressionStatement",
															"src": "1227:12:9"
														}
													]
												},
												"name": "revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b",
												"nodeType": "YulFunctionDefinition",
												"src": "1128:117:9"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "1309:94:9",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "1381:16:9",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "1390:1:9",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "1393:1:9",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "1383:6:9"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "1383:12:9"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "1383:12:9"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nodeType": "YulIdentifier",
																				"src": "1332:5:9"
																			},
																			{
																				"arguments": [
																					{
																						"name": "value",
																						"nodeType": "YulIdentifier",
																						"src": "1372:5:9"
																					}
																				],
																				"functionName": {
																					"name": "cleanup_t_contract$_IERC721_$268",
																					"nodeType": "YulIdentifier",
																					"src": "1339:32:9"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "1339:39:9"
																			}
																		],
																		"functionName": {
																			"name": "eq",
																			"nodeType": "YulIdentifier",
																			"src": "1329:2:9"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1329:50:9"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nodeType": "YulIdentifier",
																	"src": "1322:6:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "1322:58:9"
															},
															"nodeType": "YulIf",
															"src": "1319:78:9"
														}
													]
												},
												"name": "validator_revert_t_contract$_IERC721_$268",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "1302:5:9",
														"type": ""
													}
												],
												"src": "1251:152:9"
											}
										]
									},
									"contents": "{\n\n    function abi_decode_t_contract$_IERC721_$268_fromMemory(offset, end) -> value {\n        value := mload(offset)\n        validator_revert_t_contract$_IERC721_$268(value)\n    }\n\n    function abi_decode_tuple_t_contract$_IERC721_$268_fromMemory(headStart, dataEnd) -> value0 {\n        if slt(sub(dataEnd, headStart), 32) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_contract$_IERC721_$268_fromMemory(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function allocate_unbounded() -> memPtr {\n        memPtr := mload(64)\n    }\n\n    function cleanup_t_address(value) -> cleaned {\n        cleaned := cleanup_t_uint160(value)\n    }\n\n    function cleanup_t_contract$_IERC721_$268(value) -> cleaned {\n        cleaned := cleanup_t_address(value)\n    }\n\n    function cleanup_t_uint160(value) -> cleaned {\n        cleaned := and(value, 0xffffffffffffffffffffffffffffffffffffffff)\n    }\n\n    function revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db() {\n        revert(0, 0)\n    }\n\n    function revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() {\n        revert(0, 0)\n    }\n\n    function validator_revert_t_contract$_IERC721_$268(value) {\n        if iszero(eq(value, cleanup_t_contract$_IERC721_$268(value))) { revert(0, 0) }\n    }\n\n}\n",
									"id": 9,
									"language": "Yul",
									"name": "#utility.yul"
								}
							],
							"linkReferences": {},
							"object": "60806040523480156200001157600080fd5b5060405162000ffc38038062000ffc833981810160405281019062000037919062000189565b620000576200004b620000a660201b60201c565b620000ae60201b60201c565b6001808190555080600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505062000222565b600033905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600081519050620001838162000208565b92915050565b600060208284031215620001a257620001a162000203565b5b6000620001b28482850162000172565b91505092915050565b6000620001c882620001e3565b9050919050565b6000620001dc82620001bb565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600080fd5b6200021381620001cf565b81146200021f57600080fd5b50565b610dca80620002326000396000f3fe60806040526004361061007f5760003560e01c80638488cc411161004e5780638488cc41146101455780638da5cb5b14610182578063a694fc3a146101ad578063f2fde38b146101d657610086565b80630700037d1461008b578063150b7a02146100c85780632e17de7814610105578063715018a61461012e57610086565b3661008657005b600080fd5b34801561009757600080fd5b506100b260048036038101906100ad919061082f565b6101ff565b6040516100bf9190610af5565b60405180910390f35b3480156100d457600080fd5b506100ef60048036038101906100ea919061085c565b610217565b6040516100fc9190610a3a565b60405180910390f35b34801561011157600080fd5b5061012c600480360381019061012791906108df565b61022b565b005b34801561013a57600080fd5b506101436103f5565b005b34801561015157600080fd5b5061016c600480360381019061016791906108df565b610409565b60405161017991906109e8565b60405180910390f35b34801561018e57600080fd5b5061019761043c565b6040516101a491906109e8565b60405180910390f35b3480156101b957600080fd5b506101d460048036038101906101cf91906108df565b610465565b005b3480156101e257600080fd5b506101fd60048036038101906101f8919061082f565b610555565b005b60056020528060005260406000206000915090505481565b600063150b7a0260e01b9050949350505050565b60026001541415610271576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161026890610ad5565b60405180910390fd5b60026001819055503373ffffffffffffffffffffffffffffffffffffffff166004600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161461031a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161031190610ab5565b60405180910390fd5b6004600082815260200190815260200160002060006101000a81549073ffffffffffffffffffffffffffffffffffffffff021916905561035a60036105d9565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166342842e0e3033846040518463ffffffff1660e01b81526004016103b993929190610a03565b600060405180830381600087803b1580156103d357600080fd5b505af11580156103e7573d6000803e3d6000fd5b505050506001808190555050565b6103fd610635565b61040760006106b3565b565b60046020528060005260406000206000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166342842e0e3330846040518463ffffffff1660e01b81526004016104c493929190610a03565b600060405180830381600087803b1580156104de57600080fd5b505af11580156104f2573d6000803e3d6000fd5b50505050336004600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506105526003610777565b50565b61055d610635565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614156105cd576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105c490610a75565b60405180910390fd5b6105d6816106b3565b50565b60008160000154905060008111610625576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161061c90610a55565b60405180910390fd5b6001810382600001819055505050565b61063d61078d565b73ffffffffffffffffffffffffffffffffffffffff1661065b61043c565b73ffffffffffffffffffffffffffffffffffffffff16146106b1576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106a890610a95565b60405180910390fd5b565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b6001816000016000828254019250508190555050565b600033905090565b60006107a86107a384610b35565b610b10565b9050828152602081018484840111156107c4576107c3610c53565b5b6107cf848285610bdf565b509392505050565b6000813590506107e681610d66565b92915050565b600082601f83011261080157610800610c4e565b5b8135610811848260208601610795565b91505092915050565b60008135905061082981610d7d565b92915050565b60006020828403121561084557610844610c5d565b5b6000610853848285016107d7565b91505092915050565b6000806000806080858703121561087657610875610c5d565b5b6000610884878288016107d7565b9450506020610895878288016107d7565b93505060406108a68782880161081a565b925050606085013567ffffffffffffffff8111156108c7576108c6610c58565b5b6108d3878288016107ec565b91505092959194509250565b6000602082840312156108f5576108f4610c5d565b5b60006109038482850161081a565b91505092915050565b61091581610b77565b82525050565b61092481610b89565b82525050565b6000610937601b83610b66565b915061094282610c73565b602082019050919050565b600061095a602683610b66565b915061096582610c9c565b604082019050919050565b600061097d602083610b66565b915061098882610ceb565b602082019050919050565b60006109a0601683610b66565b91506109ab82610d14565b602082019050919050565b60006109c3601f83610b66565b91506109ce82610d3d565b602082019050919050565b6109e281610bd5565b82525050565b60006020820190506109fd600083018461090c565b92915050565b6000606082019050610a18600083018661090c565b610a25602083018561090c565b610a3260408301846109d9565b949350505050565b6000602082019050610a4f600083018461091b565b92915050565b60006020820190508181036000830152610a6e8161092a565b9050919050565b60006020820190508181036000830152610a8e8161094d565b9050919050565b60006020820190508181036000830152610aae81610970565b9050919050565b60006020820190508181036000830152610ace81610993565b9050919050565b60006020820190508181036000830152610aee816109b6565b9050919050565b6000602082019050610b0a60008301846109d9565b92915050565b6000610b1a610b2b565b9050610b268282610bee565b919050565b6000604051905090565b600067ffffffffffffffff821115610b5057610b4f610c1f565b5b610b5982610c62565b9050602081019050919050565b600082825260208201905092915050565b6000610b8282610bb5565b9050919050565b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b82818337600083830152505050565b610bf782610c62565b810181811067ffffffffffffffff82111715610c1657610c15610c1f565b5b80604052505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f436f756e7465723a2064656372656d656e74206f766572666c6f770000000000600082015250565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b7f596f7520617265206e6f7420746865206f776e65722e00000000000000000000600082015250565b7f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00600082015250565b610d6f81610b77565b8114610d7a57600080fd5b50565b610d8681610bd5565b8114610d9157600080fd5b5056fea2646970667358221220ca278c13e82d0859db6101bf3d49c5a514a613a2a95d3d546e577de540f1e82a64736f6c63430008070033",
							"opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH3 0x11 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD PUSH3 0xFFC CODESIZE SUB DUP1 PUSH3 0xFFC DUP4 CODECOPY DUP2 DUP2 ADD PUSH1 0x40 MSTORE DUP2 ADD SWAP1 PUSH3 0x37 SWAP2 SWAP1 PUSH3 0x189 JUMP JUMPDEST PUSH3 0x57 PUSH3 0x4B PUSH3 0xA6 PUSH1 0x20 SHL PUSH1 0x20 SHR JUMP JUMPDEST PUSH3 0xAE PUSH1 0x20 SHL PUSH1 0x20 SHR JUMP JUMPDEST PUSH1 0x1 DUP1 DUP2 SWAP1 SSTORE POP DUP1 PUSH1 0x2 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP POP PUSH3 0x222 JUMP JUMPDEST PUSH1 0x0 CALLER SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP DUP2 PUSH1 0x0 DUP1 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP PUSH3 0x183 DUP2 PUSH3 0x208 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH3 0x1A2 JUMPI PUSH3 0x1A1 PUSH3 0x203 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH3 0x1B2 DUP5 DUP3 DUP6 ADD PUSH3 0x172 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH3 0x1C8 DUP3 PUSH3 0x1E3 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH3 0x1DC DUP3 PUSH3 0x1BB JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH3 0x213 DUP2 PUSH3 0x1CF JUMP JUMPDEST DUP2 EQ PUSH3 0x21F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH2 0xDCA DUP1 PUSH3 0x232 PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT PUSH2 0x7F JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x8488CC41 GT PUSH2 0x4E JUMPI DUP1 PUSH4 0x8488CC41 EQ PUSH2 0x145 JUMPI DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0x182 JUMPI DUP1 PUSH4 0xA694FC3A EQ PUSH2 0x1AD JUMPI DUP1 PUSH4 0xF2FDE38B EQ PUSH2 0x1D6 JUMPI PUSH2 0x86 JUMP JUMPDEST DUP1 PUSH4 0x700037D EQ PUSH2 0x8B JUMPI DUP1 PUSH4 0x150B7A02 EQ PUSH2 0xC8 JUMPI DUP1 PUSH4 0x2E17DE78 EQ PUSH2 0x105 JUMPI DUP1 PUSH4 0x715018A6 EQ PUSH2 0x12E JUMPI PUSH2 0x86 JUMP JUMPDEST CALLDATASIZE PUSH2 0x86 JUMPI STOP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x97 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xB2 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0xAD SWAP2 SWAP1 PUSH2 0x82F JUMP JUMPDEST PUSH2 0x1FF JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xBF SWAP2 SWAP1 PUSH2 0xAF5 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xD4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xEF PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0xEA SWAP2 SWAP1 PUSH2 0x85C JUMP JUMPDEST PUSH2 0x217 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xFC SWAP2 SWAP1 PUSH2 0xA3A JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x111 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x12C PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x127 SWAP2 SWAP1 PUSH2 0x8DF JUMP JUMPDEST PUSH2 0x22B JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x13A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x143 PUSH2 0x3F5 JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x151 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x16C PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x167 SWAP2 SWAP1 PUSH2 0x8DF JUMP JUMPDEST PUSH2 0x409 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x179 SWAP2 SWAP1 PUSH2 0x9E8 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x18E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x197 PUSH2 0x43C JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x1A4 SWAP2 SWAP1 PUSH2 0x9E8 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x1B9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1D4 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x1CF SWAP2 SWAP1 PUSH2 0x8DF JUMP JUMPDEST PUSH2 0x465 JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x1E2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1FD PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x1F8 SWAP2 SWAP1 PUSH2 0x82F JUMP JUMPDEST PUSH2 0x555 JUMP JUMPDEST STOP JUMPDEST PUSH1 0x5 PUSH1 0x20 MSTORE DUP1 PUSH1 0x0 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP2 POP SWAP1 POP SLOAD DUP2 JUMP JUMPDEST PUSH1 0x0 PUSH4 0x150B7A02 PUSH1 0xE0 SHL SWAP1 POP SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x2 PUSH1 0x1 SLOAD EQ ISZERO PUSH2 0x271 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x268 SWAP1 PUSH2 0xAD5 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x2 PUSH1 0x1 DUP2 SWAP1 SSTORE POP CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x4 PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x31A JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x311 SWAP1 PUSH2 0xAB5 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x4 PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD SWAP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 SSTORE PUSH2 0x35A PUSH1 0x3 PUSH2 0x5D9 JUMP JUMPDEST PUSH1 0x2 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x42842E0E ADDRESS CALLER DUP5 PUSH1 0x40 MLOAD DUP5 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x3B9 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0xA03 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x3D3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x3E7 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x1 DUP1 DUP2 SWAP1 SSTORE POP POP JUMP JUMPDEST PUSH2 0x3FD PUSH2 0x635 JUMP JUMPDEST PUSH2 0x407 PUSH1 0x0 PUSH2 0x6B3 JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x4 PUSH1 0x20 MSTORE DUP1 PUSH1 0x0 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP2 POP SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x2 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x42842E0E CALLER ADDRESS DUP5 PUSH1 0x40 MLOAD DUP5 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x4C4 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0xA03 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x4DE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x4F2 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP CALLER PUSH1 0x4 PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP PUSH2 0x552 PUSH1 0x3 PUSH2 0x777 JUMP JUMPDEST POP JUMP JUMPDEST PUSH2 0x55D PUSH2 0x635 JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO PUSH2 0x5CD JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x5C4 SWAP1 PUSH2 0xA75 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x5D6 DUP2 PUSH2 0x6B3 JUMP JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH1 0x0 ADD SLOAD SWAP1 POP PUSH1 0x0 DUP2 GT PUSH2 0x625 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x61C SWAP1 PUSH2 0xA55 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x1 DUP2 SUB DUP3 PUSH1 0x0 ADD DUP2 SWAP1 SSTORE POP POP POP JUMP JUMPDEST PUSH2 0x63D PUSH2 0x78D JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x65B PUSH2 0x43C JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x6B1 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x6A8 SWAP1 PUSH2 0xA95 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP DUP2 PUSH1 0x0 DUP1 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP JUMP JUMPDEST PUSH1 0x1 DUP2 PUSH1 0x0 ADD PUSH1 0x0 DUP3 DUP3 SLOAD ADD SWAP3 POP POP DUP2 SWAP1 SSTORE POP POP JUMP JUMPDEST PUSH1 0x0 CALLER SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x7A8 PUSH2 0x7A3 DUP5 PUSH2 0xB35 JUMP JUMPDEST PUSH2 0xB10 JUMP JUMPDEST SWAP1 POP DUP3 DUP2 MSTORE PUSH1 0x20 DUP2 ADD DUP5 DUP5 DUP5 ADD GT ISZERO PUSH2 0x7C4 JUMPI PUSH2 0x7C3 PUSH2 0xC53 JUMP JUMPDEST JUMPDEST PUSH2 0x7CF DUP5 DUP3 DUP6 PUSH2 0xBDF JUMP JUMPDEST POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x7E6 DUP2 PUSH2 0xD66 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x801 JUMPI PUSH2 0x800 PUSH2 0xC4E JUMP JUMPDEST JUMPDEST DUP2 CALLDATALOAD PUSH2 0x811 DUP5 DUP3 PUSH1 0x20 DUP7 ADD PUSH2 0x795 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x829 DUP2 PUSH2 0xD7D JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x845 JUMPI PUSH2 0x844 PUSH2 0xC5D JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x853 DUP5 DUP3 DUP6 ADD PUSH2 0x7D7 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x80 DUP6 DUP8 SUB SLT ISZERO PUSH2 0x876 JUMPI PUSH2 0x875 PUSH2 0xC5D JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x884 DUP8 DUP3 DUP9 ADD PUSH2 0x7D7 JUMP JUMPDEST SWAP5 POP POP PUSH1 0x20 PUSH2 0x895 DUP8 DUP3 DUP9 ADD PUSH2 0x7D7 JUMP JUMPDEST SWAP4 POP POP PUSH1 0x40 PUSH2 0x8A6 DUP8 DUP3 DUP9 ADD PUSH2 0x81A JUMP JUMPDEST SWAP3 POP POP PUSH1 0x60 DUP6 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x8C7 JUMPI PUSH2 0x8C6 PUSH2 0xC58 JUMP JUMPDEST JUMPDEST PUSH2 0x8D3 DUP8 DUP3 DUP9 ADD PUSH2 0x7EC JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP6 SWAP2 SWAP5 POP SWAP3 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x8F5 JUMPI PUSH2 0x8F4 PUSH2 0xC5D JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x903 DUP5 DUP3 DUP6 ADD PUSH2 0x81A JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x915 DUP2 PUSH2 0xB77 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH2 0x924 DUP2 PUSH2 0xB89 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x937 PUSH1 0x1B DUP4 PUSH2 0xB66 JUMP JUMPDEST SWAP2 POP PUSH2 0x942 DUP3 PUSH2 0xC73 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x95A PUSH1 0x26 DUP4 PUSH2 0xB66 JUMP JUMPDEST SWAP2 POP PUSH2 0x965 DUP3 PUSH2 0xC9C JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x97D PUSH1 0x20 DUP4 PUSH2 0xB66 JUMP JUMPDEST SWAP2 POP PUSH2 0x988 DUP3 PUSH2 0xCEB JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x9A0 PUSH1 0x16 DUP4 PUSH2 0xB66 JUMP JUMPDEST SWAP2 POP PUSH2 0x9AB DUP3 PUSH2 0xD14 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x9C3 PUSH1 0x1F DUP4 PUSH2 0xB66 JUMP JUMPDEST SWAP2 POP PUSH2 0x9CE DUP3 PUSH2 0xD3D JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x9E2 DUP2 PUSH2 0xBD5 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x9FD PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x90C JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x60 DUP3 ADD SWAP1 POP PUSH2 0xA18 PUSH1 0x0 DUP4 ADD DUP7 PUSH2 0x90C JUMP JUMPDEST PUSH2 0xA25 PUSH1 0x20 DUP4 ADD DUP6 PUSH2 0x90C JUMP JUMPDEST PUSH2 0xA32 PUSH1 0x40 DUP4 ADD DUP5 PUSH2 0x9D9 JUMP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0xA4F PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x91B JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0xA6E DUP2 PUSH2 0x92A JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0xA8E DUP2 PUSH2 0x94D JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0xAAE DUP2 PUSH2 0x970 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0xACE DUP2 PUSH2 0x993 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0xAEE DUP2 PUSH2 0x9B6 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0xB0A PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x9D9 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xB1A PUSH2 0xB2B JUMP JUMPDEST SWAP1 POP PUSH2 0xB26 DUP3 DUP3 PUSH2 0xBEE JUMP JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT ISZERO PUSH2 0xB50 JUMPI PUSH2 0xB4F PUSH2 0xC1F JUMP JUMPDEST JUMPDEST PUSH2 0xB59 DUP3 PUSH2 0xC62 JUMP JUMPDEST SWAP1 POP PUSH1 0x20 DUP2 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xB82 DUP3 PUSH2 0xBB5 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST DUP3 DUP2 DUP4 CALLDATACOPY PUSH1 0x0 DUP4 DUP4 ADD MSTORE POP POP POP JUMP JUMPDEST PUSH2 0xBF7 DUP3 PUSH2 0xC62 JUMP JUMPDEST DUP2 ADD DUP2 DUP2 LT PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT OR ISZERO PUSH2 0xC16 JUMPI PUSH2 0xC15 PUSH2 0xC1F JUMP JUMPDEST JUMPDEST DUP1 PUSH1 0x40 MSTORE POP POP POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x1F NOT PUSH1 0x1F DUP4 ADD AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x436F756E7465723A2064656372656D656E74206F766572666C6F770000000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH32 0x4F776E61626C653A206E6577206F776E657220697320746865207A65726F2061 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x6464726573730000000000000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH32 0x4F776E61626C653A2063616C6C6572206973206E6F7420746865206F776E6572 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH32 0x596F7520617265206E6F7420746865206F776E65722E00000000000000000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH32 0x5265656E7472616E637947756172643A207265656E7472616E742063616C6C00 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH2 0xD6F DUP2 PUSH2 0xB77 JUMP JUMPDEST DUP2 EQ PUSH2 0xD7A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH2 0xD86 DUP2 PUSH2 0xBD5 JUMP JUMPDEST DUP2 EQ PUSH2 0xD91 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xCA 0x27 DUP13 SGT 0xE8 0x2D ADDMOD MSIZE 0xDB PUSH2 0x1BF RETURNDATASIZE 0x49 0xC5 0xA5 EQ 0xA6 SGT LOG2 0xA9 0x5D RETURNDATASIZE SLOAD PUSH15 0x577DE540F1E82A64736F6C63430008 SMOD STOP CALLER ",
							"sourceMap": "386:1182:8:-:0;;;866:79;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;936:32:0;955:12;:10;;;:12;;:::i;:::-;936:18;;;:32;;:::i;:::-;1701:1:1;1806:7;:22;;;;926:12:8;911;;:27;;;;;;;;;;;;;;;;;;866:79;386:1182;;640:96:5;693:7;719:10;712:17;;640:96;:::o;2433:187:0:-;2506:16;2525:6;;;;;;;;;;;2506:25;;2550:8;2541:6;;:17;;;;;;;;;;;;;;;;;;2604:8;2573:40;;2594:8;2573:40;;;;;;;;;;;;2496:124;2433:187;:::o;7:173:9:-;79:5;110:6;104:13;95:22;;126:48;168:5;126:48;:::i;:::-;7:173;;;;:::o;186:381::-;271:6;320:2;308:9;299:7;295:23;291:32;288:119;;;326:79;;:::i;:::-;288:119;446:1;471:79;542:7;533:6;522:9;518:22;471:79;:::i;:::-;461:89;;417:143;186:381;;;;:::o;654:96::-;691:7;720:24;738:5;720:24;:::i;:::-;709:35;;654:96;;;:::o;756:111::-;808:7;837:24;855:5;837:24;:::i;:::-;826:35;;756:111;;;:::o;873:126::-;910:7;950:42;943:5;939:54;928:65;;873:126;;;:::o;1128:117::-;1237:1;1234;1227:12;1251:152;1339:39;1372:5;1339:39;:::i;:::-;1332:5;1329:50;1319:78;;1393:1;1390;1383:12;1319:78;1251:152;:::o;386:1182:8:-;;;;;;;"
						},
						"deployedBytecode": {
							"functionDebugData": {
								"@_559": {
									"entryPoint": null,
									"id": 559,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"@_checkOwner_54": {
									"entryPoint": 1589,
									"id": 54,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"@_msgSender_325": {
									"entryPoint": 1933,
									"id": 325,
									"parameterSlots": 0,
									"returnSlots": 1
								},
								"@_transferOwnership_111": {
									"entryPoint": 1715,
									"id": 111,
									"parameterSlots": 1,
									"returnSlots": 0
								},
								"@decrement_395": {
									"entryPoint": 1497,
									"id": 395,
									"parameterSlots": 1,
									"returnSlots": 0
								},
								"@increment_367": {
									"entryPoint": 1911,
									"id": 367,
									"parameterSlots": 1,
									"returnSlots": 0
								},
								"@onERC721Received_312": {
									"entryPoint": 535,
									"id": 312,
									"parameterSlots": 4,
									"returnSlots": 1
								},
								"@owner_40": {
									"entryPoint": 1084,
									"id": 40,
									"parameterSlots": 0,
									"returnSlots": 1
								},
								"@renounceOwnership_68": {
									"entryPoint": 1013,
									"id": 68,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"@rewards_474": {
									"entryPoint": 511,
									"id": 474,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"@stake_515": {
									"entryPoint": 1125,
									"id": 515,
									"parameterSlots": 1,
									"returnSlots": 0
								},
								"@tokenOwnedBy_470": {
									"entryPoint": 1033,
									"id": 470,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"@transferOwnership_91": {
									"entryPoint": 1365,
									"id": 91,
									"parameterSlots": 1,
									"returnSlots": 0
								},
								"@unstake_555": {
									"entryPoint": 555,
									"id": 555,
									"parameterSlots": 1,
									"returnSlots": 0
								},
								"abi_decode_available_length_t_bytes_memory_ptr": {
									"entryPoint": 1941,
									"id": null,
									"parameterSlots": 3,
									"returnSlots": 1
								},
								"abi_decode_t_address": {
									"entryPoint": 2007,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_decode_t_bytes_memory_ptr": {
									"entryPoint": 2028,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_decode_t_uint256": {
									"entryPoint": 2074,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_decode_tuple_t_address": {
									"entryPoint": 2095,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_decode_tuple_t_addresst_addresst_uint256t_bytes_memory_ptr": {
									"entryPoint": 2140,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 4
								},
								"abi_decode_tuple_t_uint256": {
									"entryPoint": 2271,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_encode_t_address_to_t_address_fromStack": {
									"entryPoint": 2316,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 0
								},
								"abi_encode_t_bytes4_to_t_bytes4_fromStack": {
									"entryPoint": 2331,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 0
								},
								"abi_encode_t_stringliteral_1dfd0d5389474d871b8e8929aab9d4def041f55f90f625754fb5f9a9ba08af6f_to_t_string_memory_ptr_fromStack": {
									"entryPoint": 2346,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"abi_encode_t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe_to_t_string_memory_ptr_fromStack": {
									"entryPoint": 2381,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"abi_encode_t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe_to_t_string_memory_ptr_fromStack": {
									"entryPoint": 2416,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"abi_encode_t_stringliteral_d18e18996dbf7b96f1392a5c98d6c1530dd77cf511c83e06c26beea9e4342c3f_to_t_string_memory_ptr_fromStack": {
									"entryPoint": 2451,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"abi_encode_t_stringliteral_ebf73bba305590e4764d5cb53b69bffd6d4d092d1a67551cb346f8cfcdab8619_to_t_string_memory_ptr_fromStack": {
									"entryPoint": 2486,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"abi_encode_t_uint256_to_t_uint256_fromStack": {
									"entryPoint": 2521,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 0
								},
								"abi_encode_tuple_t_address__to_t_address__fromStack_reversed": {
									"entryPoint": 2536,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_address_t_address_t_uint256__to_t_address_t_address_t_uint256__fromStack_reversed": {
									"entryPoint": 2563,
									"id": null,
									"parameterSlots": 4,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_bytes4__to_t_bytes4__fromStack_reversed": {
									"entryPoint": 2618,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_stringliteral_1dfd0d5389474d871b8e8929aab9d4def041f55f90f625754fb5f9a9ba08af6f__to_t_string_memory_ptr__fromStack_reversed": {
									"entryPoint": 2645,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe__to_t_string_memory_ptr__fromStack_reversed": {
									"entryPoint": 2677,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe__to_t_string_memory_ptr__fromStack_reversed": {
									"entryPoint": 2709,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_stringliteral_d18e18996dbf7b96f1392a5c98d6c1530dd77cf511c83e06c26beea9e4342c3f__to_t_string_memory_ptr__fromStack_reversed": {
									"entryPoint": 2741,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_stringliteral_ebf73bba305590e4764d5cb53b69bffd6d4d092d1a67551cb346f8cfcdab8619__to_t_string_memory_ptr__fromStack_reversed": {
									"entryPoint": 2773,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed": {
									"entryPoint": 2805,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"allocate_memory": {
									"entryPoint": 2832,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"allocate_unbounded": {
									"entryPoint": 2859,
									"id": null,
									"parameterSlots": 0,
									"returnSlots": 1
								},
								"array_allocation_size_t_bytes_memory_ptr": {
									"entryPoint": 2869,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"array_storeLengthForEncoding_t_string_memory_ptr_fromStack": {
									"entryPoint": 2918,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"cleanup_t_address": {
									"entryPoint": 2935,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"cleanup_t_bytes4": {
									"entryPoint": 2953,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"cleanup_t_uint160": {
									"entryPoint": 2997,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"cleanup_t_uint256": {
									"entryPoint": 3029,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"copy_calldata_to_memory": {
									"entryPoint": 3039,
									"id": null,
									"parameterSlots": 3,
									"returnSlots": 0
								},
								"finalize_allocation": {
									"entryPoint": 3054,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 0
								},
								"panic_error_0x41": {
									"entryPoint": 3103,
									"id": null,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d": {
									"entryPoint": 3150,
									"id": null,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"revert_error_987264b3b1d58a9c7f8255e93e81c77d86d6299019c33110a076957a3e06e2ae": {
									"entryPoint": 3155,
									"id": null,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db": {
									"entryPoint": 3160,
									"id": null,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b": {
									"entryPoint": 3165,
									"id": null,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"round_up_to_mul_of_32": {
									"entryPoint": 3170,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"store_literal_in_memory_1dfd0d5389474d871b8e8929aab9d4def041f55f90f625754fb5f9a9ba08af6f": {
									"entryPoint": 3187,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 0
								},
								"store_literal_in_memory_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe": {
									"entryPoint": 3228,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 0
								},
								"store_literal_in_memory_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe": {
									"entryPoint": 3307,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 0
								},
								"store_literal_in_memory_d18e18996dbf7b96f1392a5c98d6c1530dd77cf511c83e06c26beea9e4342c3f": {
									"entryPoint": 3348,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 0
								},
								"store_literal_in_memory_ebf73bba305590e4764d5cb53b69bffd6d4d092d1a67551cb346f8cfcdab8619": {
									"entryPoint": 3389,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 0
								},
								"validator_revert_t_address": {
									"entryPoint": 3430,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 0
								},
								"validator_revert_t_uint256": {
									"entryPoint": 3453,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 0
								}
							},
							"generatedSources": [
								{
									"ast": {
										"nodeType": "YulBlock",
										"src": "0:11800:9",
										"statements": [
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "90:327:9",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "100:74:9",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "length",
																				"nodeType": "YulIdentifier",
																				"src": "166:6:9"
																			}
																		],
																		"functionName": {
																			"name": "array_allocation_size_t_bytes_memory_ptr",
																			"nodeType": "YulIdentifier",
																			"src": "125:40:9"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "125:48:9"
																	}
																],
																"functionName": {
																	"name": "allocate_memory",
																	"nodeType": "YulIdentifier",
																	"src": "109:15:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "109:65:9"
															},
															"variableNames": [
																{
																	"name": "array",
																	"nodeType": "YulIdentifier",
																	"src": "100:5:9"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "array",
																		"nodeType": "YulIdentifier",
																		"src": "190:5:9"
																	},
																	{
																		"name": "length",
																		"nodeType": "YulIdentifier",
																		"src": "197:6:9"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "183:6:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "183:21:9"
															},
															"nodeType": "YulExpressionStatement",
															"src": "183:21:9"
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "213:27:9",
															"value": {
																"arguments": [
																	{
																		"name": "array",
																		"nodeType": "YulIdentifier",
																		"src": "228:5:9"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "235:4:9",
																		"type": "",
																		"value": "0x20"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "224:3:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "224:16:9"
															},
															"variables": [
																{
																	"name": "dst",
																	"nodeType": "YulTypedName",
																	"src": "217:3:9",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "278:83:9",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "revert_error_987264b3b1d58a9c7f8255e93e81c77d86d6299019c33110a076957a3e06e2ae",
																				"nodeType": "YulIdentifier",
																				"src": "280:77:9"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "280:79:9"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "280:79:9"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "src",
																				"nodeType": "YulIdentifier",
																				"src": "259:3:9"
																			},
																			{
																				"name": "length",
																				"nodeType": "YulIdentifier",
																				"src": "264:6:9"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "255:3:9"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "255:16:9"
																	},
																	{
																		"name": "end",
																		"nodeType": "YulIdentifier",
																		"src": "273:3:9"
																	}
																],
																"functionName": {
																	"name": "gt",
																	"nodeType": "YulIdentifier",
																	"src": "252:2:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "252:25:9"
															},
															"nodeType": "YulIf",
															"src": "249:112:9"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "src",
																		"nodeType": "YulIdentifier",
																		"src": "394:3:9"
																	},
																	{
																		"name": "dst",
																		"nodeType": "YulIdentifier",
																		"src": "399:3:9"
																	},
																	{
																		"name": "length",
																		"nodeType": "YulIdentifier",
																		"src": "404:6:9"
																	}
																],
																"functionName": {
																	"name": "copy_calldata_to_memory",
																	"nodeType": "YulIdentifier",
																	"src": "370:23:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "370:41:9"
															},
															"nodeType": "YulExpressionStatement",
															"src": "370:41:9"
														}
													]
												},
												"name": "abi_decode_available_length_t_bytes_memory_ptr",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "src",
														"nodeType": "YulTypedName",
														"src": "63:3:9",
														"type": ""
													},
													{
														"name": "length",
														"nodeType": "YulTypedName",
														"src": "68:6:9",
														"type": ""
													},
													{
														"name": "end",
														"nodeType": "YulTypedName",
														"src": "76:3:9",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "array",
														"nodeType": "YulTypedName",
														"src": "84:5:9",
														"type": ""
													}
												],
												"src": "7:410:9"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "475:87:9",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "485:29:9",
															"value": {
																"arguments": [
																	{
																		"name": "offset",
																		"nodeType": "YulIdentifier",
																		"src": "507:6:9"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nodeType": "YulIdentifier",
																	"src": "494:12:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "494:20:9"
															},
															"variableNames": [
																{
																	"name": "value",
																	"nodeType": "YulIdentifier",
																	"src": "485:5:9"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value",
																		"nodeType": "YulIdentifier",
																		"src": "550:5:9"
																	}
																],
																"functionName": {
																	"name": "validator_revert_t_address",
																	"nodeType": "YulIdentifier",
																	"src": "523:26:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "523:33:9"
															},
															"nodeType": "YulExpressionStatement",
															"src": "523:33:9"
														}
													]
												},
												"name": "abi_decode_t_address",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "offset",
														"nodeType": "YulTypedName",
														"src": "453:6:9",
														"type": ""
													},
													{
														"name": "end",
														"nodeType": "YulTypedName",
														"src": "461:3:9",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "469:5:9",
														"type": ""
													}
												],
												"src": "423:139:9"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "642:277:9",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "691:83:9",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d",
																				"nodeType": "YulIdentifier",
																				"src": "693:77:9"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "693:79:9"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "693:79:9"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "offset",
																						"nodeType": "YulIdentifier",
																						"src": "670:6:9"
																					},
																					{
																						"kind": "number",
																						"nodeType": "YulLiteral",
																						"src": "678:4:9",
																						"type": "",
																						"value": "0x1f"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "666:3:9"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "666:17:9"
																			},
																			{
																				"name": "end",
																				"nodeType": "YulIdentifier",
																				"src": "685:3:9"
																			}
																		],
																		"functionName": {
																			"name": "slt",
																			"nodeType": "YulIdentifier",
																			"src": "662:3:9"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "662:27:9"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nodeType": "YulIdentifier",
																	"src": "655:6:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "655:35:9"
															},
															"nodeType": "YulIf",
															"src": "652:122:9"
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "783:34:9",
															"value": {
																"arguments": [
																	{
																		"name": "offset",
																		"nodeType": "YulIdentifier",
																		"src": "810:6:9"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nodeType": "YulIdentifier",
																	"src": "797:12:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "797:20:9"
															},
															"variables": [
																{
																	"name": "length",
																	"nodeType": "YulTypedName",
																	"src": "787:6:9",
																	"type": ""
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "826:87:9",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "offset",
																				"nodeType": "YulIdentifier",
																				"src": "886:6:9"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "894:4:9",
																				"type": "",
																				"value": "0x20"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "882:3:9"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "882:17:9"
																	},
																	{
																		"name": "length",
																		"nodeType": "YulIdentifier",
																		"src": "901:6:9"
																	},
																	{
																		"name": "end",
																		"nodeType": "YulIdentifier",
																		"src": "909:3:9"
																	}
																],
																"functionName": {
																	"name": "abi_decode_available_length_t_bytes_memory_ptr",
																	"nodeType": "YulIdentifier",
																	"src": "835:46:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "835:78:9"
															},
															"variableNames": [
																{
																	"name": "array",
																	"nodeType": "YulIdentifier",
																	"src": "826:5:9"
																}
															]
														}
													]
												},
												"name": "abi_decode_t_bytes_memory_ptr",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "offset",
														"nodeType": "YulTypedName",
														"src": "620:6:9",
														"type": ""
													},
													{
														"name": "end",
														"nodeType": "YulTypedName",
														"src": "628:3:9",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "array",
														"nodeType": "YulTypedName",
														"src": "636:5:9",
														"type": ""
													}
												],
												"src": "581:338:9"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "977:87:9",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "987:29:9",
															"value": {
																"arguments": [
																	{
																		"name": "offset",
																		"nodeType": "YulIdentifier",
																		"src": "1009:6:9"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nodeType": "YulIdentifier",
																	"src": "996:12:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "996:20:9"
															},
															"variableNames": [
																{
																	"name": "value",
																	"nodeType": "YulIdentifier",
																	"src": "987:5:9"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value",
																		"nodeType": "YulIdentifier",
																		"src": "1052:5:9"
																	}
																],
																"functionName": {
																	"name": "validator_revert_t_uint256",
																	"nodeType": "YulIdentifier",
																	"src": "1025:26:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "1025:33:9"
															},
															"nodeType": "YulExpressionStatement",
															"src": "1025:33:9"
														}
													]
												},
												"name": "abi_decode_t_uint256",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "offset",
														"nodeType": "YulTypedName",
														"src": "955:6:9",
														"type": ""
													},
													{
														"name": "end",
														"nodeType": "YulTypedName",
														"src": "963:3:9",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "971:5:9",
														"type": ""
													}
												],
												"src": "925:139:9"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "1136:263:9",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "1182:83:9",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b",
																				"nodeType": "YulIdentifier",
																				"src": "1184:77:9"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "1184:79:9"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "1184:79:9"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "1157:7:9"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "1166:9:9"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "1153:3:9"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1153:23:9"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1178:2:9",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nodeType": "YulIdentifier",
																	"src": "1149:3:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "1149:32:9"
															},
															"nodeType": "YulIf",
															"src": "1146:119:9"
														},
														{
															"nodeType": "YulBlock",
															"src": "1275:117:9",
															"statements": [
																{
																	"nodeType": "YulVariableDeclaration",
																	"src": "1290:15:9",
																	"value": {
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1304:1:9",
																		"type": "",
																		"value": "0"
																	},
																	"variables": [
																		{
																			"name": "offset",
																			"nodeType": "YulTypedName",
																			"src": "1294:6:9",
																			"type": ""
																		}
																	]
																},
																{
																	"nodeType": "YulAssignment",
																	"src": "1319:63:9",
																	"value": {
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "headStart",
																						"nodeType": "YulIdentifier",
																						"src": "1354:9:9"
																					},
																					{
																						"name": "offset",
																						"nodeType": "YulIdentifier",
																						"src": "1365:6:9"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "1350:3:9"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "1350:22:9"
																			},
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "1374:7:9"
																			}
																		],
																		"functionName": {
																			"name": "abi_decode_t_address",
																			"nodeType": "YulIdentifier",
																			"src": "1329:20:9"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1329:53:9"
																	},
																	"variableNames": [
																		{
																			"name": "value0",
																			"nodeType": "YulIdentifier",
																			"src": "1319:6:9"
																		}
																	]
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_address",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "1106:9:9",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nodeType": "YulTypedName",
														"src": "1117:7:9",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "1129:6:9",
														"type": ""
													}
												],
												"src": "1070:329:9"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "1531:817:9",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "1578:83:9",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b",
																				"nodeType": "YulIdentifier",
																				"src": "1580:77:9"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "1580:79:9"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "1580:79:9"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "1552:7:9"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "1561:9:9"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "1548:3:9"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1548:23:9"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1573:3:9",
																		"type": "",
																		"value": "128"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nodeType": "YulIdentifier",
																	"src": "1544:3:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "1544:33:9"
															},
															"nodeType": "YulIf",
															"src": "1541:120:9"
														},
														{
															"nodeType": "YulBlock",
															"src": "1671:117:9",
															"statements": [
																{
																	"nodeType": "YulVariableDeclaration",
																	"src": "1686:15:9",
																	"value": {
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1700:1:9",
																		"type": "",
																		"value": "0"
																	},
																	"variables": [
																		{
																			"name": "offset",
																			"nodeType": "YulTypedName",
																			"src": "1690:6:9",
																			"type": ""
																		}
																	]
																},
																{
																	"nodeType": "YulAssignment",
																	"src": "1715:63:9",
																	"value": {
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "headStart",
																						"nodeType": "YulIdentifier",
																						"src": "1750:9:9"
																					},
																					{
																						"name": "offset",
																						"nodeType": "YulIdentifier",
																						"src": "1761:6:9"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "1746:3:9"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "1746:22:9"
																			},
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "1770:7:9"
																			}
																		],
																		"functionName": {
																			"name": "abi_decode_t_address",
																			"nodeType": "YulIdentifier",
																			"src": "1725:20:9"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1725:53:9"
																	},
																	"variableNames": [
																		{
																			"name": "value0",
																			"nodeType": "YulIdentifier",
																			"src": "1715:6:9"
																		}
																	]
																}
															]
														},
														{
															"nodeType": "YulBlock",
															"src": "1798:118:9",
															"statements": [
																{
																	"nodeType": "YulVariableDeclaration",
																	"src": "1813:16:9",
																	"value": {
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1827:2:9",
																		"type": "",
																		"value": "32"
																	},
																	"variables": [
																		{
																			"name": "offset",
																			"nodeType": "YulTypedName",
																			"src": "1817:6:9",
																			"type": ""
																		}
																	]
																},
																{
																	"nodeType": "YulAssignment",
																	"src": "1843:63:9",
																	"value": {
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "headStart",
																						"nodeType": "YulIdentifier",
																						"src": "1878:9:9"
																					},
																					{
																						"name": "offset",
																						"nodeType": "YulIdentifier",
																						"src": "1889:6:9"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "1874:3:9"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "1874:22:9"
																			},
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "1898:7:9"
																			}
																		],
																		"functionName": {
																			"name": "abi_decode_t_address",
																			"nodeType": "YulIdentifier",
																			"src": "1853:20:9"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1853:53:9"
																	},
																	"variableNames": [
																		{
																			"name": "value1",
																			"nodeType": "YulIdentifier",
																			"src": "1843:6:9"
																		}
																	]
																}
															]
														},
														{
															"nodeType": "YulBlock",
															"src": "1926:118:9",
															"statements": [
																{
																	"nodeType": "YulVariableDeclaration",
																	"src": "1941:16:9",
																	"value": {
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1955:2:9",
																		"type": "",
																		"value": "64"
																	},
																	"variables": [
																		{
																			"name": "offset",
																			"nodeType": "YulTypedName",
																			"src": "1945:6:9",
																			"type": ""
																		}
																	]
																},
																{
																	"nodeType": "YulAssignment",
																	"src": "1971:63:9",
																	"value": {
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "headStart",
																						"nodeType": "YulIdentifier",
																						"src": "2006:9:9"
																					},
																					{
																						"name": "offset",
																						"nodeType": "YulIdentifier",
																						"src": "2017:6:9"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "2002:3:9"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "2002:22:9"
																			},
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "2026:7:9"
																			}
																		],
																		"functionName": {
																			"name": "abi_decode_t_uint256",
																			"nodeType": "YulIdentifier",
																			"src": "1981:20:9"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1981:53:9"
																	},
																	"variableNames": [
																		{
																			"name": "value2",
																			"nodeType": "YulIdentifier",
																			"src": "1971:6:9"
																		}
																	]
																}
															]
														},
														{
															"nodeType": "YulBlock",
															"src": "2054:287:9",
															"statements": [
																{
																	"nodeType": "YulVariableDeclaration",
																	"src": "2069:46:9",
																	"value": {
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "headStart",
																						"nodeType": "YulIdentifier",
																						"src": "2100:9:9"
																					},
																					{
																						"kind": "number",
																						"nodeType": "YulLiteral",
																						"src": "2111:2:9",
																						"type": "",
																						"value": "96"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "2096:3:9"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "2096:18:9"
																			}
																		],
																		"functionName": {
																			"name": "calldataload",
																			"nodeType": "YulIdentifier",
																			"src": "2083:12:9"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2083:32:9"
																	},
																	"variables": [
																		{
																			"name": "offset",
																			"nodeType": "YulTypedName",
																			"src": "2073:6:9",
																			"type": ""
																		}
																	]
																},
																{
																	"body": {
																		"nodeType": "YulBlock",
																		"src": "2162:83:9",
																		"statements": [
																			{
																				"expression": {
																					"arguments": [],
																					"functionName": {
																						"name": "revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db",
																						"nodeType": "YulIdentifier",
																						"src": "2164:77:9"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "2164:79:9"
																				},
																				"nodeType": "YulExpressionStatement",
																				"src": "2164:79:9"
																			}
																		]
																	},
																	"condition": {
																		"arguments": [
																			{
																				"name": "offset",
																				"nodeType": "YulIdentifier",
																				"src": "2134:6:9"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "2142:18:9",
																				"type": "",
																				"value": "0xffffffffffffffff"
																			}
																		],
																		"functionName": {
																			"name": "gt",
																			"nodeType": "YulIdentifier",
																			"src": "2131:2:9"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2131:30:9"
																	},
																	"nodeType": "YulIf",
																	"src": "2128:117:9"
																},
																{
																	"nodeType": "YulAssignment",
																	"src": "2259:72:9",
																	"value": {
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "headStart",
																						"nodeType": "YulIdentifier",
																						"src": "2303:9:9"
																					},
																					{
																						"name": "offset",
																						"nodeType": "YulIdentifier",
																						"src": "2314:6:9"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "2299:3:9"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "2299:22:9"
																			},
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "2323:7:9"
																			}
																		],
																		"functionName": {
																			"name": "abi_decode_t_bytes_memory_ptr",
																			"nodeType": "YulIdentifier",
																			"src": "2269:29:9"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2269:62:9"
																	},
																	"variableNames": [
																		{
																			"name": "value3",
																			"nodeType": "YulIdentifier",
																			"src": "2259:6:9"
																		}
																	]
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_addresst_addresst_uint256t_bytes_memory_ptr",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "1477:9:9",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nodeType": "YulTypedName",
														"src": "1488:7:9",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "1500:6:9",
														"type": ""
													},
													{
														"name": "value1",
														"nodeType": "YulTypedName",
														"src": "1508:6:9",
														"type": ""
													},
													{
														"name": "value2",
														"nodeType": "YulTypedName",
														"src": "1516:6:9",
														"type": ""
													},
													{
														"name": "value3",
														"nodeType": "YulTypedName",
														"src": "1524:6:9",
														"type": ""
													}
												],
												"src": "1405:943:9"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "2420:263:9",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "2466:83:9",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b",
																				"nodeType": "YulIdentifier",
																				"src": "2468:77:9"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "2468:79:9"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "2468:79:9"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "2441:7:9"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "2450:9:9"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "2437:3:9"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2437:23:9"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "2462:2:9",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nodeType": "YulIdentifier",
																	"src": "2433:3:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "2433:32:9"
															},
															"nodeType": "YulIf",
															"src": "2430:119:9"
														},
														{
															"nodeType": "YulBlock",
															"src": "2559:117:9",
															"statements": [
																{
																	"nodeType": "YulVariableDeclaration",
																	"src": "2574:15:9",
																	"value": {
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "2588:1:9",
																		"type": "",
																		"value": "0"
																	},
																	"variables": [
																		{
																			"name": "offset",
																			"nodeType": "YulTypedName",
																			"src": "2578:6:9",
																			"type": ""
																		}
																	]
																},
																{
																	"nodeType": "YulAssignment",
																	"src": "2603:63:9",
																	"value": {
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "headStart",
																						"nodeType": "YulIdentifier",
																						"src": "2638:9:9"
																					},
																					{
																						"name": "offset",
																						"nodeType": "YulIdentifier",
																						"src": "2649:6:9"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "2634:3:9"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "2634:22:9"
																			},
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "2658:7:9"
																			}
																		],
																		"functionName": {
																			"name": "abi_decode_t_uint256",
																			"nodeType": "YulIdentifier",
																			"src": "2613:20:9"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2613:53:9"
																	},
																	"variableNames": [
																		{
																			"name": "value0",
																			"nodeType": "YulIdentifier",
																			"src": "2603:6:9"
																		}
																	]
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_uint256",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "2390:9:9",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nodeType": "YulTypedName",
														"src": "2401:7:9",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "2413:6:9",
														"type": ""
													}
												],
												"src": "2354:329:9"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "2754:53:9",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "2771:3:9"
																	},
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nodeType": "YulIdentifier",
																				"src": "2794:5:9"
																			}
																		],
																		"functionName": {
																			"name": "cleanup_t_address",
																			"nodeType": "YulIdentifier",
																			"src": "2776:17:9"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2776:24:9"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "2764:6:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "2764:37:9"
															},
															"nodeType": "YulExpressionStatement",
															"src": "2764:37:9"
														}
													]
												},
												"name": "abi_encode_t_address_to_t_address_fromStack",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "2742:5:9",
														"type": ""
													},
													{
														"name": "pos",
														"nodeType": "YulTypedName",
														"src": "2749:3:9",
														"type": ""
													}
												],
												"src": "2689:118:9"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "2876:52:9",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "2893:3:9"
																	},
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nodeType": "YulIdentifier",
																				"src": "2915:5:9"
																			}
																		],
																		"functionName": {
																			"name": "cleanup_t_bytes4",
																			"nodeType": "YulIdentifier",
																			"src": "2898:16:9"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2898:23:9"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "2886:6:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "2886:36:9"
															},
															"nodeType": "YulExpressionStatement",
															"src": "2886:36:9"
														}
													]
												},
												"name": "abi_encode_t_bytes4_to_t_bytes4_fromStack",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "2864:5:9",
														"type": ""
													},
													{
														"name": "pos",
														"nodeType": "YulTypedName",
														"src": "2871:3:9",
														"type": ""
													}
												],
												"src": "2813:115:9"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "3080:220:9",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "3090:74:9",
															"value": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "3156:3:9"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "3161:2:9",
																		"type": "",
																		"value": "27"
																	}
																],
																"functionName": {
																	"name": "array_storeLengthForEncoding_t_string_memory_ptr_fromStack",
																	"nodeType": "YulIdentifier",
																	"src": "3097:58:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "3097:67:9"
															},
															"variableNames": [
																{
																	"name": "pos",
																	"nodeType": "YulIdentifier",
																	"src": "3090:3:9"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "3262:3:9"
																	}
																],
																"functionName": {
																	"name": "store_literal_in_memory_1dfd0d5389474d871b8e8929aab9d4def041f55f90f625754fb5f9a9ba08af6f",
																	"nodeType": "YulIdentifier",
																	"src": "3173:88:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "3173:93:9"
															},
															"nodeType": "YulExpressionStatement",
															"src": "3173:93:9"
														},
														{
															"nodeType": "YulAssignment",
															"src": "3275:19:9",
															"value": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "3286:3:9"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "3291:2:9",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "3282:3:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "3282:12:9"
															},
															"variableNames": [
																{
																	"name": "end",
																	"nodeType": "YulIdentifier",
																	"src": "3275:3:9"
																}
															]
														}
													]
												},
												"name": "abi_encode_t_stringliteral_1dfd0d5389474d871b8e8929aab9d4def041f55f90f625754fb5f9a9ba08af6f_to_t_string_memory_ptr_fromStack",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "pos",
														"nodeType": "YulTypedName",
														"src": "3068:3:9",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "end",
														"nodeType": "YulTypedName",
														"src": "3076:3:9",
														"type": ""
													}
												],
												"src": "2934:366:9"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "3452:220:9",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "3462:74:9",
															"value": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "3528:3:9"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "3533:2:9",
																		"type": "",
																		"value": "38"
																	}
																],
																"functionName": {
																	"name": "array_storeLengthForEncoding_t_string_memory_ptr_fromStack",
																	"nodeType": "YulIdentifier",
																	"src": "3469:58:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "3469:67:9"
															},
															"variableNames": [
																{
																	"name": "pos",
																	"nodeType": "YulIdentifier",
																	"src": "3462:3:9"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "3634:3:9"
																	}
																],
																"functionName": {
																	"name": "store_literal_in_memory_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe",
																	"nodeType": "YulIdentifier",
																	"src": "3545:88:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "3545:93:9"
															},
															"nodeType": "YulExpressionStatement",
															"src": "3545:93:9"
														},
														{
															"nodeType": "YulAssignment",
															"src": "3647:19:9",
															"value": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "3658:3:9"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "3663:2:9",
																		"type": "",
																		"value": "64"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "3654:3:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "3654:12:9"
															},
															"variableNames": [
																{
																	"name": "end",
																	"nodeType": "YulIdentifier",
																	"src": "3647:3:9"
																}
															]
														}
													]
												},
												"name": "abi_encode_t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe_to_t_string_memory_ptr_fromStack",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "pos",
														"nodeType": "YulTypedName",
														"src": "3440:3:9",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "end",
														"nodeType": "YulTypedName",
														"src": "3448:3:9",
														"type": ""
													}
												],
												"src": "3306:366:9"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "3824:220:9",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "3834:74:9",
															"value": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "3900:3:9"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "3905:2:9",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "array_storeLengthForEncoding_t_string_memory_ptr_fromStack",
																	"nodeType": "YulIdentifier",
																	"src": "3841:58:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "3841:67:9"
															},
															"variableNames": [
																{
																	"name": "pos",
																	"nodeType": "YulIdentifier",
																	"src": "3834:3:9"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "4006:3:9"
																	}
																],
																"functionName": {
																	"name": "store_literal_in_memory_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe",
																	"nodeType": "YulIdentifier",
																	"src": "3917:88:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "3917:93:9"
															},
															"nodeType": "YulExpressionStatement",
															"src": "3917:93:9"
														},
														{
															"nodeType": "YulAssignment",
															"src": "4019:19:9",
															"value": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "4030:3:9"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "4035:2:9",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "4026:3:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "4026:12:9"
															},
															"variableNames": [
																{
																	"name": "end",
																	"nodeType": "YulIdentifier",
																	"src": "4019:3:9"
																}
															]
														}
													]
												},
												"name": "abi_encode_t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe_to_t_string_memory_ptr_fromStack",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "pos",
														"nodeType": "YulTypedName",
														"src": "3812:3:9",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "end",
														"nodeType": "YulTypedName",
														"src": "3820:3:9",
														"type": ""
													}
												],
												"src": "3678:366:9"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "4196:220:9",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "4206:74:9",
															"value": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "4272:3:9"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "4277:2:9",
																		"type": "",
																		"value": "22"
																	}
																],
																"functionName": {
																	"name": "array_storeLengthForEncoding_t_string_memory_ptr_fromStack",
																	"nodeType": "YulIdentifier",
																	"src": "4213:58:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "4213:67:9"
															},
															"variableNames": [
																{
																	"name": "pos",
																	"nodeType": "YulIdentifier",
																	"src": "4206:3:9"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "4378:3:9"
																	}
																],
																"functionName": {
																	"name": "store_literal_in_memory_d18e18996dbf7b96f1392a5c98d6c1530dd77cf511c83e06c26beea9e4342c3f",
																	"nodeType": "YulIdentifier",
																	"src": "4289:88:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "4289:93:9"
															},
															"nodeType": "YulExpressionStatement",
															"src": "4289:93:9"
														},
														{
															"nodeType": "YulAssignment",
															"src": "4391:19:9",
															"value": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "4402:3:9"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "4407:2:9",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "4398:3:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "4398:12:9"
															},
															"variableNames": [
																{
																	"name": "end",
																	"nodeType": "YulIdentifier",
																	"src": "4391:3:9"
																}
															]
														}
													]
												},
												"name": "abi_encode_t_stringliteral_d18e18996dbf7b96f1392a5c98d6c1530dd77cf511c83e06c26beea9e4342c3f_to_t_string_memory_ptr_fromStack",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "pos",
														"nodeType": "YulTypedName",
														"src": "4184:3:9",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "end",
														"nodeType": "YulTypedName",
														"src": "4192:3:9",
														"type": ""
													}
												],
												"src": "4050:366:9"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "4568:220:9",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "4578:74:9",
															"value": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "4644:3:9"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "4649:2:9",
																		"type": "",
																		"value": "31"
																	}
																],
																"functionName": {
																	"name": "array_storeLengthForEncoding_t_string_memory_ptr_fromStack",
																	"nodeType": "YulIdentifier",
																	"src": "4585:58:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "4585:67:9"
															},
															"variableNames": [
																{
																	"name": "pos",
																	"nodeType": "YulIdentifier",
																	"src": "4578:3:9"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "4750:3:9"
																	}
																],
																"functionName": {
																	"name": "store_literal_in_memory_ebf73bba305590e4764d5cb53b69bffd6d4d092d1a67551cb346f8cfcdab8619",
																	"nodeType": "YulIdentifier",
																	"src": "4661:88:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "4661:93:9"
															},
															"nodeType": "YulExpressionStatement",
															"src": "4661:93:9"
														},
														{
															"nodeType": "YulAssignment",
															"src": "4763:19:9",
															"value": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "4774:3:9"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "4779:2:9",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "4770:3:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "4770:12:9"
															},
															"variableNames": [
																{
																	"name": "end",
																	"nodeType": "YulIdentifier",
																	"src": "4763:3:9"
																}
															]
														}
													]
												},
												"name": "abi_encode_t_stringliteral_ebf73bba305590e4764d5cb53b69bffd6d4d092d1a67551cb346f8cfcdab8619_to_t_string_memory_ptr_fromStack",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "pos",
														"nodeType": "YulTypedName",
														"src": "4556:3:9",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "end",
														"nodeType": "YulTypedName",
														"src": "4564:3:9",
														"type": ""
													}
												],
												"src": "4422:366:9"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "4859:53:9",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "4876:3:9"
																	},
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nodeType": "YulIdentifier",
																				"src": "4899:5:9"
																			}
																		],
																		"functionName": {
																			"name": "cleanup_t_uint256",
																			"nodeType": "YulIdentifier",
																			"src": "4881:17:9"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "4881:24:9"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "4869:6:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "4869:37:9"
															},
															"nodeType": "YulExpressionStatement",
															"src": "4869:37:9"
														}
													]
												},
												"name": "abi_encode_t_uint256_to_t_uint256_fromStack",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "4847:5:9",
														"type": ""
													},
													{
														"name": "pos",
														"nodeType": "YulTypedName",
														"src": "4854:3:9",
														"type": ""
													}
												],
												"src": "4794:118:9"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "5016:124:9",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "5026:26:9",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "5038:9:9"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "5049:2:9",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "5034:3:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "5034:18:9"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "5026:4:9"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value0",
																		"nodeType": "YulIdentifier",
																		"src": "5106:6:9"
																	},
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "5119:9:9"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "5130:1:9",
																				"type": "",
																				"value": "0"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "5115:3:9"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "5115:17:9"
																	}
																],
																"functionName": {
																	"name": "abi_encode_t_address_to_t_address_fromStack",
																	"nodeType": "YulIdentifier",
																	"src": "5062:43:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "5062:71:9"
															},
															"nodeType": "YulExpressionStatement",
															"src": "5062:71:9"
														}
													]
												},
												"name": "abi_encode_tuple_t_address__to_t_address__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "4988:9:9",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "5000:6:9",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "5011:4:9",
														"type": ""
													}
												],
												"src": "4918:222:9"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "5300:288:9",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "5310:26:9",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "5322:9:9"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "5333:2:9",
																		"type": "",
																		"value": "96"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "5318:3:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "5318:18:9"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "5310:4:9"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value0",
																		"nodeType": "YulIdentifier",
																		"src": "5390:6:9"
																	},
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "5403:9:9"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "5414:1:9",
																				"type": "",
																				"value": "0"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "5399:3:9"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "5399:17:9"
																	}
																],
																"functionName": {
																	"name": "abi_encode_t_address_to_t_address_fromStack",
																	"nodeType": "YulIdentifier",
																	"src": "5346:43:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "5346:71:9"
															},
															"nodeType": "YulExpressionStatement",
															"src": "5346:71:9"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value1",
																		"nodeType": "YulIdentifier",
																		"src": "5471:6:9"
																	},
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "5484:9:9"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "5495:2:9",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "5480:3:9"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "5480:18:9"
																	}
																],
																"functionName": {
																	"name": "abi_encode_t_address_to_t_address_fromStack",
																	"nodeType": "YulIdentifier",
																	"src": "5427:43:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "5427:72:9"
															},
															"nodeType": "YulExpressionStatement",
															"src": "5427:72:9"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value2",
																		"nodeType": "YulIdentifier",
																		"src": "5553:6:9"
																	},
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "5566:9:9"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "5577:2:9",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "5562:3:9"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "5562:18:9"
																	}
																],
																"functionName": {
																	"name": "abi_encode_t_uint256_to_t_uint256_fromStack",
																	"nodeType": "YulIdentifier",
																	"src": "5509:43:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "5509:72:9"
															},
															"nodeType": "YulExpressionStatement",
															"src": "5509:72:9"
														}
													]
												},
												"name": "abi_encode_tuple_t_address_t_address_t_uint256__to_t_address_t_address_t_uint256__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "5256:9:9",
														"type": ""
													},
													{
														"name": "value2",
														"nodeType": "YulTypedName",
														"src": "5268:6:9",
														"type": ""
													},
													{
														"name": "value1",
														"nodeType": "YulTypedName",
														"src": "5276:6:9",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "5284:6:9",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "5295:4:9",
														"type": ""
													}
												],
												"src": "5146:442:9"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "5690:122:9",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "5700:26:9",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "5712:9:9"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "5723:2:9",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "5708:3:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "5708:18:9"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "5700:4:9"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value0",
																		"nodeType": "YulIdentifier",
																		"src": "5778:6:9"
																	},
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "5791:9:9"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "5802:1:9",
																				"type": "",
																				"value": "0"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "5787:3:9"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "5787:17:9"
																	}
																],
																"functionName": {
																	"name": "abi_encode_t_bytes4_to_t_bytes4_fromStack",
																	"nodeType": "YulIdentifier",
																	"src": "5736:41:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "5736:69:9"
															},
															"nodeType": "YulExpressionStatement",
															"src": "5736:69:9"
														}
													]
												},
												"name": "abi_encode_tuple_t_bytes4__to_t_bytes4__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "5662:9:9",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "5674:6:9",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "5685:4:9",
														"type": ""
													}
												],
												"src": "5594:218:9"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "5989:248:9",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "5999:26:9",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "6011:9:9"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "6022:2:9",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "6007:3:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "6007:18:9"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "5999:4:9"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "6046:9:9"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "6057:1:9",
																				"type": "",
																				"value": "0"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "6042:3:9"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "6042:17:9"
																	},
																	{
																		"arguments": [
																			{
																				"name": "tail",
																				"nodeType": "YulIdentifier",
																				"src": "6065:4:9"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "6071:9:9"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "6061:3:9"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "6061:20:9"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "6035:6:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "6035:47:9"
															},
															"nodeType": "YulExpressionStatement",
															"src": "6035:47:9"
														},
														{
															"nodeType": "YulAssignment",
															"src": "6091:139:9",
															"value": {
																"arguments": [
																	{
																		"name": "tail",
																		"nodeType": "YulIdentifier",
																		"src": "6225:4:9"
																	}
																],
																"functionName": {
																	"name": "abi_encode_t_stringliteral_1dfd0d5389474d871b8e8929aab9d4def041f55f90f625754fb5f9a9ba08af6f_to_t_string_memory_ptr_fromStack",
																	"nodeType": "YulIdentifier",
																	"src": "6099:124:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "6099:131:9"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "6091:4:9"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_1dfd0d5389474d871b8e8929aab9d4def041f55f90f625754fb5f9a9ba08af6f__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "5969:9:9",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "5984:4:9",
														"type": ""
													}
												],
												"src": "5818:419:9"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "6414:248:9",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "6424:26:9",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "6436:9:9"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "6447:2:9",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "6432:3:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "6432:18:9"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "6424:4:9"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "6471:9:9"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "6482:1:9",
																				"type": "",
																				"value": "0"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "6467:3:9"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "6467:17:9"
																	},
																	{
																		"arguments": [
																			{
																				"name": "tail",
																				"nodeType": "YulIdentifier",
																				"src": "6490:4:9"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "6496:9:9"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "6486:3:9"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "6486:20:9"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "6460:6:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "6460:47:9"
															},
															"nodeType": "YulExpressionStatement",
															"src": "6460:47:9"
														},
														{
															"nodeType": "YulAssignment",
															"src": "6516:139:9",
															"value": {
																"arguments": [
																	{
																		"name": "tail",
																		"nodeType": "YulIdentifier",
																		"src": "6650:4:9"
																	}
																],
																"functionName": {
																	"name": "abi_encode_t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe_to_t_string_memory_ptr_fromStack",
																	"nodeType": "YulIdentifier",
																	"src": "6524:124:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "6524:131:9"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "6516:4:9"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "6394:9:9",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "6409:4:9",
														"type": ""
													}
												],
												"src": "6243:419:9"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "6839:248:9",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "6849:26:9",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "6861:9:9"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "6872:2:9",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "6857:3:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "6857:18:9"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "6849:4:9"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "6896:9:9"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "6907:1:9",
																				"type": "",
																				"value": "0"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "6892:3:9"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "6892:17:9"
																	},
																	{
																		"arguments": [
																			{
																				"name": "tail",
																				"nodeType": "YulIdentifier",
																				"src": "6915:4:9"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "6921:9:9"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "6911:3:9"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "6911:20:9"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "6885:6:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "6885:47:9"
															},
															"nodeType": "YulExpressionStatement",
															"src": "6885:47:9"
														},
														{
															"nodeType": "YulAssignment",
															"src": "6941:139:9",
															"value": {
																"arguments": [
																	{
																		"name": "tail",
																		"nodeType": "YulIdentifier",
																		"src": "7075:4:9"
																	}
																],
																"functionName": {
																	"name": "abi_encode_t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe_to_t_string_memory_ptr_fromStack",
																	"nodeType": "YulIdentifier",
																	"src": "6949:124:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "6949:131:9"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "6941:4:9"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "6819:9:9",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "6834:4:9",
														"type": ""
													}
												],
												"src": "6668:419:9"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "7264:248:9",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "7274:26:9",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "7286:9:9"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "7297:2:9",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "7282:3:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "7282:18:9"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "7274:4:9"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "7321:9:9"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "7332:1:9",
																				"type": "",
																				"value": "0"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "7317:3:9"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "7317:17:9"
																	},
																	{
																		"arguments": [
																			{
																				"name": "tail",
																				"nodeType": "YulIdentifier",
																				"src": "7340:4:9"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "7346:9:9"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "7336:3:9"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "7336:20:9"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "7310:6:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "7310:47:9"
															},
															"nodeType": "YulExpressionStatement",
															"src": "7310:47:9"
														},
														{
															"nodeType": "YulAssignment",
															"src": "7366:139:9",
															"value": {
																"arguments": [
																	{
																		"name": "tail",
																		"nodeType": "YulIdentifier",
																		"src": "7500:4:9"
																	}
																],
																"functionName": {
																	"name": "abi_encode_t_stringliteral_d18e18996dbf7b96f1392a5c98d6c1530dd77cf511c83e06c26beea9e4342c3f_to_t_string_memory_ptr_fromStack",
																	"nodeType": "YulIdentifier",
																	"src": "7374:124:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "7374:131:9"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "7366:4:9"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_d18e18996dbf7b96f1392a5c98d6c1530dd77cf511c83e06c26beea9e4342c3f__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "7244:9:9",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "7259:4:9",
														"type": ""
													}
												],
												"src": "7093:419:9"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "7689:248:9",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "7699:26:9",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "7711:9:9"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "7722:2:9",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "7707:3:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "7707:18:9"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "7699:4:9"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "7746:9:9"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "7757:1:9",
																				"type": "",
																				"value": "0"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "7742:3:9"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "7742:17:9"
																	},
																	{
																		"arguments": [
																			{
																				"name": "tail",
																				"nodeType": "YulIdentifier",
																				"src": "7765:4:9"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "7771:9:9"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "7761:3:9"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "7761:20:9"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "7735:6:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "7735:47:9"
															},
															"nodeType": "YulExpressionStatement",
															"src": "7735:47:9"
														},
														{
															"nodeType": "YulAssignment",
															"src": "7791:139:9",
															"value": {
																"arguments": [
																	{
																		"name": "tail",
																		"nodeType": "YulIdentifier",
																		"src": "7925:4:9"
																	}
																],
																"functionName": {
																	"name": "abi_encode_t_stringliteral_ebf73bba305590e4764d5cb53b69bffd6d4d092d1a67551cb346f8cfcdab8619_to_t_string_memory_ptr_fromStack",
																	"nodeType": "YulIdentifier",
																	"src": "7799:124:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "7799:131:9"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "7791:4:9"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_ebf73bba305590e4764d5cb53b69bffd6d4d092d1a67551cb346f8cfcdab8619__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "7669:9:9",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "7684:4:9",
														"type": ""
													}
												],
												"src": "7518:419:9"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "8041:124:9",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "8051:26:9",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "8063:9:9"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "8074:2:9",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "8059:3:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "8059:18:9"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "8051:4:9"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value0",
																		"nodeType": "YulIdentifier",
																		"src": "8131:6:9"
																	},
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "8144:9:9"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "8155:1:9",
																				"type": "",
																				"value": "0"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "8140:3:9"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "8140:17:9"
																	}
																],
																"functionName": {
																	"name": "abi_encode_t_uint256_to_t_uint256_fromStack",
																	"nodeType": "YulIdentifier",
																	"src": "8087:43:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "8087:71:9"
															},
															"nodeType": "YulExpressionStatement",
															"src": "8087:71:9"
														}
													]
												},
												"name": "abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "8013:9:9",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "8025:6:9",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "8036:4:9",
														"type": ""
													}
												],
												"src": "7943:222:9"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "8212:88:9",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "8222:30:9",
															"value": {
																"arguments": [],
																"functionName": {
																	"name": "allocate_unbounded",
																	"nodeType": "YulIdentifier",
																	"src": "8232:18:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "8232:20:9"
															},
															"variableNames": [
																{
																	"name": "memPtr",
																	"nodeType": "YulIdentifier",
																	"src": "8222:6:9"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "memPtr",
																		"nodeType": "YulIdentifier",
																		"src": "8281:6:9"
																	},
																	{
																		"name": "size",
																		"nodeType": "YulIdentifier",
																		"src": "8289:4:9"
																	}
																],
																"functionName": {
																	"name": "finalize_allocation",
																	"nodeType": "YulIdentifier",
																	"src": "8261:19:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "8261:33:9"
															},
															"nodeType": "YulExpressionStatement",
															"src": "8261:33:9"
														}
													]
												},
												"name": "allocate_memory",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "size",
														"nodeType": "YulTypedName",
														"src": "8196:4:9",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "memPtr",
														"nodeType": "YulTypedName",
														"src": "8205:6:9",
														"type": ""
													}
												],
												"src": "8171:129:9"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "8346:35:9",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "8356:19:9",
															"value": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "8372:2:9",
																		"type": "",
																		"value": "64"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nodeType": "YulIdentifier",
																	"src": "8366:5:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "8366:9:9"
															},
															"variableNames": [
																{
																	"name": "memPtr",
																	"nodeType": "YulIdentifier",
																	"src": "8356:6:9"
																}
															]
														}
													]
												},
												"name": "allocate_unbounded",
												"nodeType": "YulFunctionDefinition",
												"returnVariables": [
													{
														"name": "memPtr",
														"nodeType": "YulTypedName",
														"src": "8339:6:9",
														"type": ""
													}
												],
												"src": "8306:75:9"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "8453:241:9",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "8558:22:9",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "panic_error_0x41",
																				"nodeType": "YulIdentifier",
																				"src": "8560:16:9"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "8560:18:9"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "8560:18:9"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "length",
																		"nodeType": "YulIdentifier",
																		"src": "8530:6:9"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "8538:18:9",
																		"type": "",
																		"value": "0xffffffffffffffff"
																	}
																],
																"functionName": {
																	"name": "gt",
																	"nodeType": "YulIdentifier",
																	"src": "8527:2:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "8527:30:9"
															},
															"nodeType": "YulIf",
															"src": "8524:56:9"
														},
														{
															"nodeType": "YulAssignment",
															"src": "8590:37:9",
															"value": {
																"arguments": [
																	{
																		"name": "length",
																		"nodeType": "YulIdentifier",
																		"src": "8620:6:9"
																	}
																],
																"functionName": {
																	"name": "round_up_to_mul_of_32",
																	"nodeType": "YulIdentifier",
																	"src": "8598:21:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "8598:29:9"
															},
															"variableNames": [
																{
																	"name": "size",
																	"nodeType": "YulIdentifier",
																	"src": "8590:4:9"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "8664:23:9",
															"value": {
																"arguments": [
																	{
																		"name": "size",
																		"nodeType": "YulIdentifier",
																		"src": "8676:4:9"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "8682:4:9",
																		"type": "",
																		"value": "0x20"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "8672:3:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "8672:15:9"
															},
															"variableNames": [
																{
																	"name": "size",
																	"nodeType": "YulIdentifier",
																	"src": "8664:4:9"
																}
															]
														}
													]
												},
												"name": "array_allocation_size_t_bytes_memory_ptr",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "length",
														"nodeType": "YulTypedName",
														"src": "8437:6:9",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "size",
														"nodeType": "YulTypedName",
														"src": "8448:4:9",
														"type": ""
													}
												],
												"src": "8387:307:9"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "8796:73:9",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "8813:3:9"
																	},
																	{
																		"name": "length",
																		"nodeType": "YulIdentifier",
																		"src": "8818:6:9"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "8806:6:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "8806:19:9"
															},
															"nodeType": "YulExpressionStatement",
															"src": "8806:19:9"
														},
														{
															"nodeType": "YulAssignment",
															"src": "8834:29:9",
															"value": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "8853:3:9"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "8858:4:9",
																		"type": "",
																		"value": "0x20"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "8849:3:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "8849:14:9"
															},
															"variableNames": [
																{
																	"name": "updated_pos",
																	"nodeType": "YulIdentifier",
																	"src": "8834:11:9"
																}
															]
														}
													]
												},
												"name": "array_storeLengthForEncoding_t_string_memory_ptr_fromStack",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "pos",
														"nodeType": "YulTypedName",
														"src": "8768:3:9",
														"type": ""
													},
													{
														"name": "length",
														"nodeType": "YulTypedName",
														"src": "8773:6:9",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "updated_pos",
														"nodeType": "YulTypedName",
														"src": "8784:11:9",
														"type": ""
													}
												],
												"src": "8700:169:9"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "8920:51:9",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "8930:35:9",
															"value": {
																"arguments": [
																	{
																		"name": "value",
																		"nodeType": "YulIdentifier",
																		"src": "8959:5:9"
																	}
																],
																"functionName": {
																	"name": "cleanup_t_uint160",
																	"nodeType": "YulIdentifier",
																	"src": "8941:17:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "8941:24:9"
															},
															"variableNames": [
																{
																	"name": "cleaned",
																	"nodeType": "YulIdentifier",
																	"src": "8930:7:9"
																}
															]
														}
													]
												},
												"name": "cleanup_t_address",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "8902:5:9",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "cleaned",
														"nodeType": "YulTypedName",
														"src": "8912:7:9",
														"type": ""
													}
												],
												"src": "8875:96:9"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "9021:105:9",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "9031:89:9",
															"value": {
																"arguments": [
																	{
																		"name": "value",
																		"nodeType": "YulIdentifier",
																		"src": "9046:5:9"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "9053:66:9",
																		"type": "",
																		"value": "0xffffffff00000000000000000000000000000000000000000000000000000000"
																	}
																],
																"functionName": {
																	"name": "and",
																	"nodeType": "YulIdentifier",
																	"src": "9042:3:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "9042:78:9"
															},
															"variableNames": [
																{
																	"name": "cleaned",
																	"nodeType": "YulIdentifier",
																	"src": "9031:7:9"
																}
															]
														}
													]
												},
												"name": "cleanup_t_bytes4",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "9003:5:9",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "cleaned",
														"nodeType": "YulTypedName",
														"src": "9013:7:9",
														"type": ""
													}
												],
												"src": "8977:149:9"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "9177:81:9",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "9187:65:9",
															"value": {
																"arguments": [
																	{
																		"name": "value",
																		"nodeType": "YulIdentifier",
																		"src": "9202:5:9"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "9209:42:9",
																		"type": "",
																		"value": "0xffffffffffffffffffffffffffffffffffffffff"
																	}
																],
																"functionName": {
																	"name": "and",
																	"nodeType": "YulIdentifier",
																	"src": "9198:3:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "9198:54:9"
															},
															"variableNames": [
																{
																	"name": "cleaned",
																	"nodeType": "YulIdentifier",
																	"src": "9187:7:9"
																}
															]
														}
													]
												},
												"name": "cleanup_t_uint160",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "9159:5:9",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "cleaned",
														"nodeType": "YulTypedName",
														"src": "9169:7:9",
														"type": ""
													}
												],
												"src": "9132:126:9"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "9309:32:9",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "9319:16:9",
															"value": {
																"name": "value",
																"nodeType": "YulIdentifier",
																"src": "9330:5:9"
															},
															"variableNames": [
																{
																	"name": "cleaned",
																	"nodeType": "YulIdentifier",
																	"src": "9319:7:9"
																}
															]
														}
													]
												},
												"name": "cleanup_t_uint256",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "9291:5:9",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "cleaned",
														"nodeType": "YulTypedName",
														"src": "9301:7:9",
														"type": ""
													}
												],
												"src": "9264:77:9"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "9398:103:9",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "dst",
																		"nodeType": "YulIdentifier",
																		"src": "9421:3:9"
																	},
																	{
																		"name": "src",
																		"nodeType": "YulIdentifier",
																		"src": "9426:3:9"
																	},
																	{
																		"name": "length",
																		"nodeType": "YulIdentifier",
																		"src": "9431:6:9"
																	}
																],
																"functionName": {
																	"name": "calldatacopy",
																	"nodeType": "YulIdentifier",
																	"src": "9408:12:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "9408:30:9"
															},
															"nodeType": "YulExpressionStatement",
															"src": "9408:30:9"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dst",
																				"nodeType": "YulIdentifier",
																				"src": "9479:3:9"
																			},
																			{
																				"name": "length",
																				"nodeType": "YulIdentifier",
																				"src": "9484:6:9"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "9475:3:9"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "9475:16:9"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "9493:1:9",
																		"type": "",
																		"value": "0"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "9468:6:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "9468:27:9"
															},
															"nodeType": "YulExpressionStatement",
															"src": "9468:27:9"
														}
													]
												},
												"name": "copy_calldata_to_memory",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "src",
														"nodeType": "YulTypedName",
														"src": "9380:3:9",
														"type": ""
													},
													{
														"name": "dst",
														"nodeType": "YulTypedName",
														"src": "9385:3:9",
														"type": ""
													},
													{
														"name": "length",
														"nodeType": "YulTypedName",
														"src": "9390:6:9",
														"type": ""
													}
												],
												"src": "9347:154:9"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "9550:238:9",
													"statements": [
														{
															"nodeType": "YulVariableDeclaration",
															"src": "9560:58:9",
															"value": {
																"arguments": [
																	{
																		"name": "memPtr",
																		"nodeType": "YulIdentifier",
																		"src": "9582:6:9"
																	},
																	{
																		"arguments": [
																			{
																				"name": "size",
																				"nodeType": "YulIdentifier",
																				"src": "9612:4:9"
																			}
																		],
																		"functionName": {
																			"name": "round_up_to_mul_of_32",
																			"nodeType": "YulIdentifier",
																			"src": "9590:21:9"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "9590:27:9"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "9578:3:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "9578:40:9"
															},
															"variables": [
																{
																	"name": "newFreePtr",
																	"nodeType": "YulTypedName",
																	"src": "9564:10:9",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "9729:22:9",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "panic_error_0x41",
																				"nodeType": "YulIdentifier",
																				"src": "9731:16:9"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "9731:18:9"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "9731:18:9"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "newFreePtr",
																				"nodeType": "YulIdentifier",
																				"src": "9672:10:9"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "9684:18:9",
																				"type": "",
																				"value": "0xffffffffffffffff"
																			}
																		],
																		"functionName": {
																			"name": "gt",
																			"nodeType": "YulIdentifier",
																			"src": "9669:2:9"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "9669:34:9"
																	},
																	{
																		"arguments": [
																			{
																				"name": "newFreePtr",
																				"nodeType": "YulIdentifier",
																				"src": "9708:10:9"
																			},
																			{
																				"name": "memPtr",
																				"nodeType": "YulIdentifier",
																				"src": "9720:6:9"
																			}
																		],
																		"functionName": {
																			"name": "lt",
																			"nodeType": "YulIdentifier",
																			"src": "9705:2:9"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "9705:22:9"
																	}
																],
																"functionName": {
																	"name": "or",
																	"nodeType": "YulIdentifier",
																	"src": "9666:2:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "9666:62:9"
															},
															"nodeType": "YulIf",
															"src": "9663:88:9"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "9767:2:9",
																		"type": "",
																		"value": "64"
																	},
																	{
																		"name": "newFreePtr",
																		"nodeType": "YulIdentifier",
																		"src": "9771:10:9"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "9760:6:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "9760:22:9"
															},
															"nodeType": "YulExpressionStatement",
															"src": "9760:22:9"
														}
													]
												},
												"name": "finalize_allocation",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "memPtr",
														"nodeType": "YulTypedName",
														"src": "9536:6:9",
														"type": ""
													},
													{
														"name": "size",
														"nodeType": "YulTypedName",
														"src": "9544:4:9",
														"type": ""
													}
												],
												"src": "9507:281:9"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "9822:152:9",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "9839:1:9",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "9842:77:9",
																		"type": "",
																		"value": "35408467139433450592217433187231851964531694900788300625387963629091585785856"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "9832:6:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "9832:88:9"
															},
															"nodeType": "YulExpressionStatement",
															"src": "9832:88:9"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "9936:1:9",
																		"type": "",
																		"value": "4"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "9939:4:9",
																		"type": "",
																		"value": "0x41"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "9929:6:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "9929:15:9"
															},
															"nodeType": "YulExpressionStatement",
															"src": "9929:15:9"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "9960:1:9",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "9963:4:9",
																		"type": "",
																		"value": "0x24"
																	}
																],
																"functionName": {
																	"name": "revert",
																	"nodeType": "YulIdentifier",
																	"src": "9953:6:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "9953:15:9"
															},
															"nodeType": "YulExpressionStatement",
															"src": "9953:15:9"
														}
													]
												},
												"name": "panic_error_0x41",
												"nodeType": "YulFunctionDefinition",
												"src": "9794:180:9"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "10069:28:9",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "10086:1:9",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "10089:1:9",
																		"type": "",
																		"value": "0"
																	}
																],
																"functionName": {
																	"name": "revert",
																	"nodeType": "YulIdentifier",
																	"src": "10079:6:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "10079:12:9"
															},
															"nodeType": "YulExpressionStatement",
															"src": "10079:12:9"
														}
													]
												},
												"name": "revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d",
												"nodeType": "YulFunctionDefinition",
												"src": "9980:117:9"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "10192:28:9",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "10209:1:9",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "10212:1:9",
																		"type": "",
																		"value": "0"
																	}
																],
																"functionName": {
																	"name": "revert",
																	"nodeType": "YulIdentifier",
																	"src": "10202:6:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "10202:12:9"
															},
															"nodeType": "YulExpressionStatement",
															"src": "10202:12:9"
														}
													]
												},
												"name": "revert_error_987264b3b1d58a9c7f8255e93e81c77d86d6299019c33110a076957a3e06e2ae",
												"nodeType": "YulFunctionDefinition",
												"src": "10103:117:9"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "10315:28:9",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "10332:1:9",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "10335:1:9",
																		"type": "",
																		"value": "0"
																	}
																],
																"functionName": {
																	"name": "revert",
																	"nodeType": "YulIdentifier",
																	"src": "10325:6:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "10325:12:9"
															},
															"nodeType": "YulExpressionStatement",
															"src": "10325:12:9"
														}
													]
												},
												"name": "revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db",
												"nodeType": "YulFunctionDefinition",
												"src": "10226:117:9"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "10438:28:9",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "10455:1:9",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "10458:1:9",
																		"type": "",
																		"value": "0"
																	}
																],
																"functionName": {
																	"name": "revert",
																	"nodeType": "YulIdentifier",
																	"src": "10448:6:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "10448:12:9"
															},
															"nodeType": "YulExpressionStatement",
															"src": "10448:12:9"
														}
													]
												},
												"name": "revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b",
												"nodeType": "YulFunctionDefinition",
												"src": "10349:117:9"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "10520:54:9",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "10530:38:9",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nodeType": "YulIdentifier",
																				"src": "10548:5:9"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "10555:2:9",
																				"type": "",
																				"value": "31"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "10544:3:9"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "10544:14:9"
																	},
																	{
																		"arguments": [
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "10564:2:9",
																				"type": "",
																				"value": "31"
																			}
																		],
																		"functionName": {
																			"name": "not",
																			"nodeType": "YulIdentifier",
																			"src": "10560:3:9"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "10560:7:9"
																	}
																],
																"functionName": {
																	"name": "and",
																	"nodeType": "YulIdentifier",
																	"src": "10540:3:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "10540:28:9"
															},
															"variableNames": [
																{
																	"name": "result",
																	"nodeType": "YulIdentifier",
																	"src": "10530:6:9"
																}
															]
														}
													]
												},
												"name": "round_up_to_mul_of_32",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "10503:5:9",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "result",
														"nodeType": "YulTypedName",
														"src": "10513:6:9",
														"type": ""
													}
												],
												"src": "10472:102:9"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "10686:71:9",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "memPtr",
																				"nodeType": "YulIdentifier",
																				"src": "10708:6:9"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "10716:1:9",
																				"type": "",
																				"value": "0"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "10704:3:9"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "10704:14:9"
																	},
																	{
																		"hexValue": "436f756e7465723a2064656372656d656e74206f766572666c6f77",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "10720:29:9",
																		"type": "",
																		"value": "Counter: decrement overflow"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "10697:6:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "10697:53:9"
															},
															"nodeType": "YulExpressionStatement",
															"src": "10697:53:9"
														}
													]
												},
												"name": "store_literal_in_memory_1dfd0d5389474d871b8e8929aab9d4def041f55f90f625754fb5f9a9ba08af6f",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "memPtr",
														"nodeType": "YulTypedName",
														"src": "10678:6:9",
														"type": ""
													}
												],
												"src": "10580:177:9"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "10869:119:9",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "memPtr",
																				"nodeType": "YulIdentifier",
																				"src": "10891:6:9"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "10899:1:9",
																				"type": "",
																				"value": "0"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "10887:3:9"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "10887:14:9"
																	},
																	{
																		"hexValue": "4f776e61626c653a206e6577206f776e657220697320746865207a65726f2061",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "10903:34:9",
																		"type": "",
																		"value": "Ownable: new owner is the zero a"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "10880:6:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "10880:58:9"
															},
															"nodeType": "YulExpressionStatement",
															"src": "10880:58:9"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "memPtr",
																				"nodeType": "YulIdentifier",
																				"src": "10959:6:9"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "10967:2:9",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "10955:3:9"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "10955:15:9"
																	},
																	{
																		"hexValue": "646472657373",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "10972:8:9",
																		"type": "",
																		"value": "ddress"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "10948:6:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "10948:33:9"
															},
															"nodeType": "YulExpressionStatement",
															"src": "10948:33:9"
														}
													]
												},
												"name": "store_literal_in_memory_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "memPtr",
														"nodeType": "YulTypedName",
														"src": "10861:6:9",
														"type": ""
													}
												],
												"src": "10763:225:9"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "11100:76:9",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "memPtr",
																				"nodeType": "YulIdentifier",
																				"src": "11122:6:9"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "11130:1:9",
																				"type": "",
																				"value": "0"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "11118:3:9"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "11118:14:9"
																	},
																	{
																		"hexValue": "4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "11134:34:9",
																		"type": "",
																		"value": "Ownable: caller is not the owner"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "11111:6:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "11111:58:9"
															},
															"nodeType": "YulExpressionStatement",
															"src": "11111:58:9"
														}
													]
												},
												"name": "store_literal_in_memory_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "memPtr",
														"nodeType": "YulTypedName",
														"src": "11092:6:9",
														"type": ""
													}
												],
												"src": "10994:182:9"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "11288:66:9",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "memPtr",
																				"nodeType": "YulIdentifier",
																				"src": "11310:6:9"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "11318:1:9",
																				"type": "",
																				"value": "0"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "11306:3:9"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "11306:14:9"
																	},
																	{
																		"hexValue": "596f7520617265206e6f7420746865206f776e65722e",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "11322:24:9",
																		"type": "",
																		"value": "You are not the owner."
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "11299:6:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "11299:48:9"
															},
															"nodeType": "YulExpressionStatement",
															"src": "11299:48:9"
														}
													]
												},
												"name": "store_literal_in_memory_d18e18996dbf7b96f1392a5c98d6c1530dd77cf511c83e06c26beea9e4342c3f",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "memPtr",
														"nodeType": "YulTypedName",
														"src": "11280:6:9",
														"type": ""
													}
												],
												"src": "11182:172:9"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "11466:75:9",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "memPtr",
																				"nodeType": "YulIdentifier",
																				"src": "11488:6:9"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "11496:1:9",
																				"type": "",
																				"value": "0"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "11484:3:9"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "11484:14:9"
																	},
																	{
																		"hexValue": "5265656e7472616e637947756172643a207265656e7472616e742063616c6c",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "11500:33:9",
																		"type": "",
																		"value": "ReentrancyGuard: reentrant call"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "11477:6:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "11477:57:9"
															},
															"nodeType": "YulExpressionStatement",
															"src": "11477:57:9"
														}
													]
												},
												"name": "store_literal_in_memory_ebf73bba305590e4764d5cb53b69bffd6d4d092d1a67551cb346f8cfcdab8619",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "memPtr",
														"nodeType": "YulTypedName",
														"src": "11458:6:9",
														"type": ""
													}
												],
												"src": "11360:181:9"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "11590:79:9",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "11647:16:9",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "11656:1:9",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "11659:1:9",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "11649:6:9"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "11649:12:9"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "11649:12:9"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nodeType": "YulIdentifier",
																				"src": "11613:5:9"
																			},
																			{
																				"arguments": [
																					{
																						"name": "value",
																						"nodeType": "YulIdentifier",
																						"src": "11638:5:9"
																					}
																				],
																				"functionName": {
																					"name": "cleanup_t_address",
																					"nodeType": "YulIdentifier",
																					"src": "11620:17:9"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "11620:24:9"
																			}
																		],
																		"functionName": {
																			"name": "eq",
																			"nodeType": "YulIdentifier",
																			"src": "11610:2:9"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "11610:35:9"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nodeType": "YulIdentifier",
																	"src": "11603:6:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "11603:43:9"
															},
															"nodeType": "YulIf",
															"src": "11600:63:9"
														}
													]
												},
												"name": "validator_revert_t_address",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "11583:5:9",
														"type": ""
													}
												],
												"src": "11547:122:9"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "11718:79:9",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "11775:16:9",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "11784:1:9",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "11787:1:9",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "11777:6:9"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "11777:12:9"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "11777:12:9"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nodeType": "YulIdentifier",
																				"src": "11741:5:9"
																			},
																			{
																				"arguments": [
																					{
																						"name": "value",
																						"nodeType": "YulIdentifier",
																						"src": "11766:5:9"
																					}
																				],
																				"functionName": {
																					"name": "cleanup_t_uint256",
																					"nodeType": "YulIdentifier",
																					"src": "11748:17:9"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "11748:24:9"
																			}
																		],
																		"functionName": {
																			"name": "eq",
																			"nodeType": "YulIdentifier",
																			"src": "11738:2:9"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "11738:35:9"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nodeType": "YulIdentifier",
																	"src": "11731:6:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "11731:43:9"
															},
															"nodeType": "YulIf",
															"src": "11728:63:9"
														}
													]
												},
												"name": "validator_revert_t_uint256",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "11711:5:9",
														"type": ""
													}
												],
												"src": "11675:122:9"
											}
										]
									},
									"contents": "{\n\n    function abi_decode_available_length_t_bytes_memory_ptr(src, length, end) -> array {\n        array := allocate_memory(array_allocation_size_t_bytes_memory_ptr(length))\n        mstore(array, length)\n        let dst := add(array, 0x20)\n        if gt(add(src, length), end) { revert_error_987264b3b1d58a9c7f8255e93e81c77d86d6299019c33110a076957a3e06e2ae() }\n        copy_calldata_to_memory(src, dst, length)\n    }\n\n    function abi_decode_t_address(offset, end) -> value {\n        value := calldataload(offset)\n        validator_revert_t_address(value)\n    }\n\n    // bytes\n    function abi_decode_t_bytes_memory_ptr(offset, end) -> array {\n        if iszero(slt(add(offset, 0x1f), end)) { revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d() }\n        let length := calldataload(offset)\n        array := abi_decode_available_length_t_bytes_memory_ptr(add(offset, 0x20), length, end)\n    }\n\n    function abi_decode_t_uint256(offset, end) -> value {\n        value := calldataload(offset)\n        validator_revert_t_uint256(value)\n    }\n\n    function abi_decode_tuple_t_address(headStart, dataEnd) -> value0 {\n        if slt(sub(dataEnd, headStart), 32) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function abi_decode_tuple_t_addresst_addresst_uint256t_bytes_memory_ptr(headStart, dataEnd) -> value0, value1, value2, value3 {\n        if slt(sub(dataEnd, headStart), 128) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 32\n\n            value1 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 64\n\n            value2 := abi_decode_t_uint256(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := calldataload(add(headStart, 96))\n            if gt(offset, 0xffffffffffffffff) { revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db() }\n\n            value3 := abi_decode_t_bytes_memory_ptr(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function abi_decode_tuple_t_uint256(headStart, dataEnd) -> value0 {\n        if slt(sub(dataEnd, headStart), 32) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_uint256(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function abi_encode_t_address_to_t_address_fromStack(value, pos) {\n        mstore(pos, cleanup_t_address(value))\n    }\n\n    function abi_encode_t_bytes4_to_t_bytes4_fromStack(value, pos) {\n        mstore(pos, cleanup_t_bytes4(value))\n    }\n\n    function abi_encode_t_stringliteral_1dfd0d5389474d871b8e8929aab9d4def041f55f90f625754fb5f9a9ba08af6f_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 27)\n        store_literal_in_memory_1dfd0d5389474d871b8e8929aab9d4def041f55f90f625754fb5f9a9ba08af6f(pos)\n        end := add(pos, 32)\n    }\n\n    function abi_encode_t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 38)\n        store_literal_in_memory_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe(pos)\n        end := add(pos, 64)\n    }\n\n    function abi_encode_t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 32)\n        store_literal_in_memory_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe(pos)\n        end := add(pos, 32)\n    }\n\n    function abi_encode_t_stringliteral_d18e18996dbf7b96f1392a5c98d6c1530dd77cf511c83e06c26beea9e4342c3f_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 22)\n        store_literal_in_memory_d18e18996dbf7b96f1392a5c98d6c1530dd77cf511c83e06c26beea9e4342c3f(pos)\n        end := add(pos, 32)\n    }\n\n    function abi_encode_t_stringliteral_ebf73bba305590e4764d5cb53b69bffd6d4d092d1a67551cb346f8cfcdab8619_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 31)\n        store_literal_in_memory_ebf73bba305590e4764d5cb53b69bffd6d4d092d1a67551cb346f8cfcdab8619(pos)\n        end := add(pos, 32)\n    }\n\n    function abi_encode_t_uint256_to_t_uint256_fromStack(value, pos) {\n        mstore(pos, cleanup_t_uint256(value))\n    }\n\n    function abi_encode_tuple_t_address__to_t_address__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        abi_encode_t_address_to_t_address_fromStack(value0,  add(headStart, 0))\n\n    }\n\n    function abi_encode_tuple_t_address_t_address_t_uint256__to_t_address_t_address_t_uint256__fromStack_reversed(headStart , value2, value1, value0) -> tail {\n        tail := add(headStart, 96)\n\n        abi_encode_t_address_to_t_address_fromStack(value0,  add(headStart, 0))\n\n        abi_encode_t_address_to_t_address_fromStack(value1,  add(headStart, 32))\n\n        abi_encode_t_uint256_to_t_uint256_fromStack(value2,  add(headStart, 64))\n\n    }\n\n    function abi_encode_tuple_t_bytes4__to_t_bytes4__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        abi_encode_t_bytes4_to_t_bytes4_fromStack(value0,  add(headStart, 0))\n\n    }\n\n    function abi_encode_tuple_t_stringliteral_1dfd0d5389474d871b8e8929aab9d4def041f55f90f625754fb5f9a9ba08af6f__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_1dfd0d5389474d871b8e8929aab9d4def041f55f90f625754fb5f9a9ba08af6f_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function abi_encode_tuple_t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function abi_encode_tuple_t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function abi_encode_tuple_t_stringliteral_d18e18996dbf7b96f1392a5c98d6c1530dd77cf511c83e06c26beea9e4342c3f__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_d18e18996dbf7b96f1392a5c98d6c1530dd77cf511c83e06c26beea9e4342c3f_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function abi_encode_tuple_t_stringliteral_ebf73bba305590e4764d5cb53b69bffd6d4d092d1a67551cb346f8cfcdab8619__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_ebf73bba305590e4764d5cb53b69bffd6d4d092d1a67551cb346f8cfcdab8619_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        abi_encode_t_uint256_to_t_uint256_fromStack(value0,  add(headStart, 0))\n\n    }\n\n    function allocate_memory(size) -> memPtr {\n        memPtr := allocate_unbounded()\n        finalize_allocation(memPtr, size)\n    }\n\n    function allocate_unbounded() -> memPtr {\n        memPtr := mload(64)\n    }\n\n    function array_allocation_size_t_bytes_memory_ptr(length) -> size {\n        // Make sure we can allocate memory without overflow\n        if gt(length, 0xffffffffffffffff) { panic_error_0x41() }\n\n        size := round_up_to_mul_of_32(length)\n\n        // add length slot\n        size := add(size, 0x20)\n\n    }\n\n    function array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, length) -> updated_pos {\n        mstore(pos, length)\n        updated_pos := add(pos, 0x20)\n    }\n\n    function cleanup_t_address(value) -> cleaned {\n        cleaned := cleanup_t_uint160(value)\n    }\n\n    function cleanup_t_bytes4(value) -> cleaned {\n        cleaned := and(value, 0xffffffff00000000000000000000000000000000000000000000000000000000)\n    }\n\n    function cleanup_t_uint160(value) -> cleaned {\n        cleaned := and(value, 0xffffffffffffffffffffffffffffffffffffffff)\n    }\n\n    function cleanup_t_uint256(value) -> cleaned {\n        cleaned := value\n    }\n\n    function copy_calldata_to_memory(src, dst, length) {\n        calldatacopy(dst, src, length)\n        // clear end\n        mstore(add(dst, length), 0)\n    }\n\n    function finalize_allocation(memPtr, size) {\n        let newFreePtr := add(memPtr, round_up_to_mul_of_32(size))\n        // protect against overflow\n        if or(gt(newFreePtr, 0xffffffffffffffff), lt(newFreePtr, memPtr)) { panic_error_0x41() }\n        mstore(64, newFreePtr)\n    }\n\n    function panic_error_0x41() {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x41)\n        revert(0, 0x24)\n    }\n\n    function revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d() {\n        revert(0, 0)\n    }\n\n    function revert_error_987264b3b1d58a9c7f8255e93e81c77d86d6299019c33110a076957a3e06e2ae() {\n        revert(0, 0)\n    }\n\n    function revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db() {\n        revert(0, 0)\n    }\n\n    function revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() {\n        revert(0, 0)\n    }\n\n    function round_up_to_mul_of_32(value) -> result {\n        result := and(add(value, 31), not(31))\n    }\n\n    function store_literal_in_memory_1dfd0d5389474d871b8e8929aab9d4def041f55f90f625754fb5f9a9ba08af6f(memPtr) {\n\n        mstore(add(memPtr, 0), \"Counter: decrement overflow\")\n\n    }\n\n    function store_literal_in_memory_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe(memPtr) {\n\n        mstore(add(memPtr, 0), \"Ownable: new owner is the zero a\")\n\n        mstore(add(memPtr, 32), \"ddress\")\n\n    }\n\n    function store_literal_in_memory_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe(memPtr) {\n\n        mstore(add(memPtr, 0), \"Ownable: caller is not the owner\")\n\n    }\n\n    function store_literal_in_memory_d18e18996dbf7b96f1392a5c98d6c1530dd77cf511c83e06c26beea9e4342c3f(memPtr) {\n\n        mstore(add(memPtr, 0), \"You are not the owner.\")\n\n    }\n\n    function store_literal_in_memory_ebf73bba305590e4764d5cb53b69bffd6d4d092d1a67551cb346f8cfcdab8619(memPtr) {\n\n        mstore(add(memPtr, 0), \"ReentrancyGuard: reentrant call\")\n\n    }\n\n    function validator_revert_t_address(value) {\n        if iszero(eq(value, cleanup_t_address(value))) { revert(0, 0) }\n    }\n\n    function validator_revert_t_uint256(value) {\n        if iszero(eq(value, cleanup_t_uint256(value))) { revert(0, 0) }\n    }\n\n}\n",
									"id": 9,
									"language": "Yul",
									"name": "#utility.yul"
								}
							],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "60806040526004361061007f5760003560e01c80638488cc411161004e5780638488cc41146101455780638da5cb5b14610182578063a694fc3a146101ad578063f2fde38b146101d657610086565b80630700037d1461008b578063150b7a02146100c85780632e17de7814610105578063715018a61461012e57610086565b3661008657005b600080fd5b34801561009757600080fd5b506100b260048036038101906100ad919061082f565b6101ff565b6040516100bf9190610af5565b60405180910390f35b3480156100d457600080fd5b506100ef60048036038101906100ea919061085c565b610217565b6040516100fc9190610a3a565b60405180910390f35b34801561011157600080fd5b5061012c600480360381019061012791906108df565b61022b565b005b34801561013a57600080fd5b506101436103f5565b005b34801561015157600080fd5b5061016c600480360381019061016791906108df565b610409565b60405161017991906109e8565b60405180910390f35b34801561018e57600080fd5b5061019761043c565b6040516101a491906109e8565b60405180910390f35b3480156101b957600080fd5b506101d460048036038101906101cf91906108df565b610465565b005b3480156101e257600080fd5b506101fd60048036038101906101f8919061082f565b610555565b005b60056020528060005260406000206000915090505481565b600063150b7a0260e01b9050949350505050565b60026001541415610271576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161026890610ad5565b60405180910390fd5b60026001819055503373ffffffffffffffffffffffffffffffffffffffff166004600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161461031a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161031190610ab5565b60405180910390fd5b6004600082815260200190815260200160002060006101000a81549073ffffffffffffffffffffffffffffffffffffffff021916905561035a60036105d9565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166342842e0e3033846040518463ffffffff1660e01b81526004016103b993929190610a03565b600060405180830381600087803b1580156103d357600080fd5b505af11580156103e7573d6000803e3d6000fd5b505050506001808190555050565b6103fd610635565b61040760006106b3565b565b60046020528060005260406000206000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166342842e0e3330846040518463ffffffff1660e01b81526004016104c493929190610a03565b600060405180830381600087803b1580156104de57600080fd5b505af11580156104f2573d6000803e3d6000fd5b50505050336004600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506105526003610777565b50565b61055d610635565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614156105cd576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105c490610a75565b60405180910390fd5b6105d6816106b3565b50565b60008160000154905060008111610625576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161061c90610a55565b60405180910390fd5b6001810382600001819055505050565b61063d61078d565b73ffffffffffffffffffffffffffffffffffffffff1661065b61043c565b73ffffffffffffffffffffffffffffffffffffffff16146106b1576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106a890610a95565b60405180910390fd5b565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b6001816000016000828254019250508190555050565b600033905090565b60006107a86107a384610b35565b610b10565b9050828152602081018484840111156107c4576107c3610c53565b5b6107cf848285610bdf565b509392505050565b6000813590506107e681610d66565b92915050565b600082601f83011261080157610800610c4e565b5b8135610811848260208601610795565b91505092915050565b60008135905061082981610d7d565b92915050565b60006020828403121561084557610844610c5d565b5b6000610853848285016107d7565b91505092915050565b6000806000806080858703121561087657610875610c5d565b5b6000610884878288016107d7565b9450506020610895878288016107d7565b93505060406108a68782880161081a565b925050606085013567ffffffffffffffff8111156108c7576108c6610c58565b5b6108d3878288016107ec565b91505092959194509250565b6000602082840312156108f5576108f4610c5d565b5b60006109038482850161081a565b91505092915050565b61091581610b77565b82525050565b61092481610b89565b82525050565b6000610937601b83610b66565b915061094282610c73565b602082019050919050565b600061095a602683610b66565b915061096582610c9c565b604082019050919050565b600061097d602083610b66565b915061098882610ceb565b602082019050919050565b60006109a0601683610b66565b91506109ab82610d14565b602082019050919050565b60006109c3601f83610b66565b91506109ce82610d3d565b602082019050919050565b6109e281610bd5565b82525050565b60006020820190506109fd600083018461090c565b92915050565b6000606082019050610a18600083018661090c565b610a25602083018561090c565b610a3260408301846109d9565b949350505050565b6000602082019050610a4f600083018461091b565b92915050565b60006020820190508181036000830152610a6e8161092a565b9050919050565b60006020820190508181036000830152610a8e8161094d565b9050919050565b60006020820190508181036000830152610aae81610970565b9050919050565b60006020820190508181036000830152610ace81610993565b9050919050565b60006020820190508181036000830152610aee816109b6565b9050919050565b6000602082019050610b0a60008301846109d9565b92915050565b6000610b1a610b2b565b9050610b268282610bee565b919050565b6000604051905090565b600067ffffffffffffffff821115610b5057610b4f610c1f565b5b610b5982610c62565b9050602081019050919050565b600082825260208201905092915050565b6000610b8282610bb5565b9050919050565b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b82818337600083830152505050565b610bf782610c62565b810181811067ffffffffffffffff82111715610c1657610c15610c1f565b5b80604052505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f436f756e7465723a2064656372656d656e74206f766572666c6f770000000000600082015250565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b7f596f7520617265206e6f7420746865206f776e65722e00000000000000000000600082015250565b7f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00600082015250565b610d6f81610b77565b8114610d7a57600080fd5b50565b610d8681610bd5565b8114610d9157600080fd5b5056fea2646970667358221220ca278c13e82d0859db6101bf3d49c5a514a613a2a95d3d546e577de540f1e82a64736f6c63430008070033",
							"opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT PUSH2 0x7F JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x8488CC41 GT PUSH2 0x4E JUMPI DUP1 PUSH4 0x8488CC41 EQ PUSH2 0x145 JUMPI DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0x182 JUMPI DUP1 PUSH4 0xA694FC3A EQ PUSH2 0x1AD JUMPI DUP1 PUSH4 0xF2FDE38B EQ PUSH2 0x1D6 JUMPI PUSH2 0x86 JUMP JUMPDEST DUP1 PUSH4 0x700037D EQ PUSH2 0x8B JUMPI DUP1 PUSH4 0x150B7A02 EQ PUSH2 0xC8 JUMPI DUP1 PUSH4 0x2E17DE78 EQ PUSH2 0x105 JUMPI DUP1 PUSH4 0x715018A6 EQ PUSH2 0x12E JUMPI PUSH2 0x86 JUMP JUMPDEST CALLDATASIZE PUSH2 0x86 JUMPI STOP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x97 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xB2 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0xAD SWAP2 SWAP1 PUSH2 0x82F JUMP JUMPDEST PUSH2 0x1FF JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xBF SWAP2 SWAP1 PUSH2 0xAF5 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xD4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xEF PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0xEA SWAP2 SWAP1 PUSH2 0x85C JUMP JUMPDEST PUSH2 0x217 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xFC SWAP2 SWAP1 PUSH2 0xA3A JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x111 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x12C PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x127 SWAP2 SWAP1 PUSH2 0x8DF JUMP JUMPDEST PUSH2 0x22B JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x13A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x143 PUSH2 0x3F5 JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x151 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x16C PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x167 SWAP2 SWAP1 PUSH2 0x8DF JUMP JUMPDEST PUSH2 0x409 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x179 SWAP2 SWAP1 PUSH2 0x9E8 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x18E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x197 PUSH2 0x43C JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x1A4 SWAP2 SWAP1 PUSH2 0x9E8 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x1B9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1D4 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x1CF SWAP2 SWAP1 PUSH2 0x8DF JUMP JUMPDEST PUSH2 0x465 JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x1E2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1FD PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x1F8 SWAP2 SWAP1 PUSH2 0x82F JUMP JUMPDEST PUSH2 0x555 JUMP JUMPDEST STOP JUMPDEST PUSH1 0x5 PUSH1 0x20 MSTORE DUP1 PUSH1 0x0 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP2 POP SWAP1 POP SLOAD DUP2 JUMP JUMPDEST PUSH1 0x0 PUSH4 0x150B7A02 PUSH1 0xE0 SHL SWAP1 POP SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x2 PUSH1 0x1 SLOAD EQ ISZERO PUSH2 0x271 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x268 SWAP1 PUSH2 0xAD5 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x2 PUSH1 0x1 DUP2 SWAP1 SSTORE POP CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x4 PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x31A JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x311 SWAP1 PUSH2 0xAB5 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x4 PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD SWAP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 SSTORE PUSH2 0x35A PUSH1 0x3 PUSH2 0x5D9 JUMP JUMPDEST PUSH1 0x2 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x42842E0E ADDRESS CALLER DUP5 PUSH1 0x40 MLOAD DUP5 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x3B9 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0xA03 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x3D3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x3E7 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x1 DUP1 DUP2 SWAP1 SSTORE POP POP JUMP JUMPDEST PUSH2 0x3FD PUSH2 0x635 JUMP JUMPDEST PUSH2 0x407 PUSH1 0x0 PUSH2 0x6B3 JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x4 PUSH1 0x20 MSTORE DUP1 PUSH1 0x0 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP2 POP SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x2 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x42842E0E CALLER ADDRESS DUP5 PUSH1 0x40 MLOAD DUP5 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x4C4 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0xA03 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x4DE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x4F2 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP CALLER PUSH1 0x4 PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP PUSH2 0x552 PUSH1 0x3 PUSH2 0x777 JUMP JUMPDEST POP JUMP JUMPDEST PUSH2 0x55D PUSH2 0x635 JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO PUSH2 0x5CD JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x5C4 SWAP1 PUSH2 0xA75 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x5D6 DUP2 PUSH2 0x6B3 JUMP JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH1 0x0 ADD SLOAD SWAP1 POP PUSH1 0x0 DUP2 GT PUSH2 0x625 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x61C SWAP1 PUSH2 0xA55 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x1 DUP2 SUB DUP3 PUSH1 0x0 ADD DUP2 SWAP1 SSTORE POP POP POP JUMP JUMPDEST PUSH2 0x63D PUSH2 0x78D JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x65B PUSH2 0x43C JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x6B1 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x6A8 SWAP1 PUSH2 0xA95 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP DUP2 PUSH1 0x0 DUP1 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP JUMP JUMPDEST PUSH1 0x1 DUP2 PUSH1 0x0 ADD PUSH1 0x0 DUP3 DUP3 SLOAD ADD SWAP3 POP POP DUP2 SWAP1 SSTORE POP POP JUMP JUMPDEST PUSH1 0x0 CALLER SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x7A8 PUSH2 0x7A3 DUP5 PUSH2 0xB35 JUMP JUMPDEST PUSH2 0xB10 JUMP JUMPDEST SWAP1 POP DUP3 DUP2 MSTORE PUSH1 0x20 DUP2 ADD DUP5 DUP5 DUP5 ADD GT ISZERO PUSH2 0x7C4 JUMPI PUSH2 0x7C3 PUSH2 0xC53 JUMP JUMPDEST JUMPDEST PUSH2 0x7CF DUP5 DUP3 DUP6 PUSH2 0xBDF JUMP JUMPDEST POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x7E6 DUP2 PUSH2 0xD66 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x801 JUMPI PUSH2 0x800 PUSH2 0xC4E JUMP JUMPDEST JUMPDEST DUP2 CALLDATALOAD PUSH2 0x811 DUP5 DUP3 PUSH1 0x20 DUP7 ADD PUSH2 0x795 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x829 DUP2 PUSH2 0xD7D JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x845 JUMPI PUSH2 0x844 PUSH2 0xC5D JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x853 DUP5 DUP3 DUP6 ADD PUSH2 0x7D7 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x80 DUP6 DUP8 SUB SLT ISZERO PUSH2 0x876 JUMPI PUSH2 0x875 PUSH2 0xC5D JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x884 DUP8 DUP3 DUP9 ADD PUSH2 0x7D7 JUMP JUMPDEST SWAP5 POP POP PUSH1 0x20 PUSH2 0x895 DUP8 DUP3 DUP9 ADD PUSH2 0x7D7 JUMP JUMPDEST SWAP4 POP POP PUSH1 0x40 PUSH2 0x8A6 DUP8 DUP3 DUP9 ADD PUSH2 0x81A JUMP JUMPDEST SWAP3 POP POP PUSH1 0x60 DUP6 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x8C7 JUMPI PUSH2 0x8C6 PUSH2 0xC58 JUMP JUMPDEST JUMPDEST PUSH2 0x8D3 DUP8 DUP3 DUP9 ADD PUSH2 0x7EC JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP6 SWAP2 SWAP5 POP SWAP3 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x8F5 JUMPI PUSH2 0x8F4 PUSH2 0xC5D JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x903 DUP5 DUP3 DUP6 ADD PUSH2 0x81A JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x915 DUP2 PUSH2 0xB77 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH2 0x924 DUP2 PUSH2 0xB89 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x937 PUSH1 0x1B DUP4 PUSH2 0xB66 JUMP JUMPDEST SWAP2 POP PUSH2 0x942 DUP3 PUSH2 0xC73 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x95A PUSH1 0x26 DUP4 PUSH2 0xB66 JUMP JUMPDEST SWAP2 POP PUSH2 0x965 DUP3 PUSH2 0xC9C JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x97D PUSH1 0x20 DUP4 PUSH2 0xB66 JUMP JUMPDEST SWAP2 POP PUSH2 0x988 DUP3 PUSH2 0xCEB JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x9A0 PUSH1 0x16 DUP4 PUSH2 0xB66 JUMP JUMPDEST SWAP2 POP PUSH2 0x9AB DUP3 PUSH2 0xD14 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x9C3 PUSH1 0x1F DUP4 PUSH2 0xB66 JUMP JUMPDEST SWAP2 POP PUSH2 0x9CE DUP3 PUSH2 0xD3D JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x9E2 DUP2 PUSH2 0xBD5 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x9FD PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x90C JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x60 DUP3 ADD SWAP1 POP PUSH2 0xA18 PUSH1 0x0 DUP4 ADD DUP7 PUSH2 0x90C JUMP JUMPDEST PUSH2 0xA25 PUSH1 0x20 DUP4 ADD DUP6 PUSH2 0x90C JUMP JUMPDEST PUSH2 0xA32 PUSH1 0x40 DUP4 ADD DUP5 PUSH2 0x9D9 JUMP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0xA4F PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x91B JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0xA6E DUP2 PUSH2 0x92A JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0xA8E DUP2 PUSH2 0x94D JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0xAAE DUP2 PUSH2 0x970 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0xACE DUP2 PUSH2 0x993 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0xAEE DUP2 PUSH2 0x9B6 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0xB0A PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x9D9 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xB1A PUSH2 0xB2B JUMP JUMPDEST SWAP1 POP PUSH2 0xB26 DUP3 DUP3 PUSH2 0xBEE JUMP JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT ISZERO PUSH2 0xB50 JUMPI PUSH2 0xB4F PUSH2 0xC1F JUMP JUMPDEST JUMPDEST PUSH2 0xB59 DUP3 PUSH2 0xC62 JUMP JUMPDEST SWAP1 POP PUSH1 0x20 DUP2 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xB82 DUP3 PUSH2 0xBB5 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST DUP3 DUP2 DUP4 CALLDATACOPY PUSH1 0x0 DUP4 DUP4 ADD MSTORE POP POP POP JUMP JUMPDEST PUSH2 0xBF7 DUP3 PUSH2 0xC62 JUMP JUMPDEST DUP2 ADD DUP2 DUP2 LT PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT OR ISZERO PUSH2 0xC16 JUMPI PUSH2 0xC15 PUSH2 0xC1F JUMP JUMPDEST JUMPDEST DUP1 PUSH1 0x40 MSTORE POP POP POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x1F NOT PUSH1 0x1F DUP4 ADD AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x436F756E7465723A2064656372656D656E74206F766572666C6F770000000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH32 0x4F776E61626C653A206E6577206F776E657220697320746865207A65726F2061 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x6464726573730000000000000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH32 0x4F776E61626C653A2063616C6C6572206973206E6F7420746865206F776E6572 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH32 0x596F7520617265206E6F7420746865206F776E65722E00000000000000000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH32 0x5265656E7472616E637947756172643A207265656E7472616E742063616C6C00 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH2 0xD6F DUP2 PUSH2 0xB77 JUMP JUMPDEST DUP2 EQ PUSH2 0xD7A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH2 0xD86 DUP2 PUSH2 0xBD5 JUMP JUMPDEST DUP2 EQ PUSH2 0xD91 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xCA 0x27 DUP13 SGT 0xE8 0x2D ADDMOD MSIZE 0xDB PUSH2 0x1BF RETURNDATASIZE 0x49 0xC5 0xA5 EQ 0xA6 SGT LOG2 0xA9 0x5D RETURNDATASIZE SLOAD PUSH15 0x577DE540F1E82A64736F6C63430008 SMOD STOP CALLER ",
							"sourceMap": "386:1182:8:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;816:43;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;588:200:4;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;1163:295:8;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;1831:101:0;;;;;;;;;;;;;:::i;:::-;;762:48:8;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;1201:85:0;;;;;;;;;;;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;951:206:8;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;2081:198:0;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;816:43:8;;;;;;;;;;;;;;;;;:::o;588:200:4:-;726:6;751:30;;;744:37;;588:200;;;;;;:::o;1163:295:8:-;1744:1:1;2325:7;;:19;;2317:63;;;;;;;;;;;;:::i;:::-;;;;;;;;;1744:1;2455:7;:18;;;;1262:10:8::1;1237:35;;:12;:21;1250:7;1237:21;;;;;;;;;;;;;;;;;;;;;:35;;;1229:70;;;;;;;;;;;;:::i;:::-;;;;;;;;;1316:12;:21;1329:7;1316:21;;;;;;;;;;;;1309:28;;;;;;;;;;;1347:29;:17;:27;:29::i;:::-;1386:12;;;;;;;;;;;:29;;;1424:4;1431:10;1443:7;1386:65;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;::::0;::::1;;;;;;;;;;;;::::0;::::1;;;;;;;;;1701:1:1::0;2628:7;:22;;;;1163:295:8;:::o;1831:101:0:-;1094:13;:11;:13::i;:::-;1895:30:::1;1922:1;1895:18;:30::i;:::-;1831:101::o:0;762:48:8:-;;;;;;;;;;;;;;;;;;;;;;:::o;1201:85:0:-;1247:7;1273:6;;;;;;;;;;;1266:13;;1201:85;:::o;951:206:8:-;1002:12;;;;;;;;;;;:29;;;1032:10;1052:4;1059:7;1002:65;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1101:10;1077:12;:21;1090:7;1077:21;;;;;;;;;;;;:34;;;;;;;;;;;;;;;;;;1121:29;:17;:27;:29::i;:::-;951:206;:::o;2081:198:0:-;1094:13;:11;:13::i;:::-;2189:1:::1;2169:22;;:8;:22;;;;2161:73;;;;;;;;;;;;:::i;:::-;;;;;;;;;2244:28;2263:8;2244:18;:28::i;:::-;2081:198:::0;:::o;1074:229:6:-;1137:13;1153:7;:14;;;1137:30;;1193:1;1185:5;:9;1177:49;;;;;;;;;;;;:::i;:::-;;;;;;;;;1285:1;1277:5;:9;1260:7;:14;;:26;;;;1127:176;1074:229;:::o;1359:130:0:-;1433:12;:10;:12::i;:::-;1422:23;;:7;:5;:7::i;:::-;:23;;;1414:68;;;;;;;;;;;;:::i;:::-;;;;;;;;;1359:130::o;2433:187::-;2506:16;2525:6;;;;;;;;;;;2506:25;;2550:8;2541:6;;:17;;;;;;;;;;;;;;;;;;2604:8;2573:40;;2594:8;2573:40;;;;;;;;;;;;2496:124;2433:187;:::o;945:123:6:-;1050:1;1032:7;:14;;;:19;;;;;;;;;;;945:123;:::o;640:96:5:-;693:7;719:10;712:17;;640:96;:::o;7:410:9:-;84:5;109:65;125:48;166:6;125:48;:::i;:::-;109:65;:::i;:::-;100:74;;197:6;190:5;183:21;235:4;228:5;224:16;273:3;264:6;259:3;255:16;252:25;249:112;;;280:79;;:::i;:::-;249:112;370:41;404:6;399:3;394;370:41;:::i;:::-;90:327;7:410;;;;;:::o;423:139::-;469:5;507:6;494:20;485:29;;523:33;550:5;523:33;:::i;:::-;423:139;;;;:::o;581:338::-;636:5;685:3;678:4;670:6;666:17;662:27;652:122;;693:79;;:::i;:::-;652:122;810:6;797:20;835:78;909:3;901:6;894:4;886:6;882:17;835:78;:::i;:::-;826:87;;642:277;581:338;;;;:::o;925:139::-;971:5;1009:6;996:20;987:29;;1025:33;1052:5;1025:33;:::i;:::-;925:139;;;;:::o;1070:329::-;1129:6;1178:2;1166:9;1157:7;1153:23;1149:32;1146:119;;;1184:79;;:::i;:::-;1146:119;1304:1;1329:53;1374:7;1365:6;1354:9;1350:22;1329:53;:::i;:::-;1319:63;;1275:117;1070:329;;;;:::o;1405:943::-;1500:6;1508;1516;1524;1573:3;1561:9;1552:7;1548:23;1544:33;1541:120;;;1580:79;;:::i;:::-;1541:120;1700:1;1725:53;1770:7;1761:6;1750:9;1746:22;1725:53;:::i;:::-;1715:63;;1671:117;1827:2;1853:53;1898:7;1889:6;1878:9;1874:22;1853:53;:::i;:::-;1843:63;;1798:118;1955:2;1981:53;2026:7;2017:6;2006:9;2002:22;1981:53;:::i;:::-;1971:63;;1926:118;2111:2;2100:9;2096:18;2083:32;2142:18;2134:6;2131:30;2128:117;;;2164:79;;:::i;:::-;2128:117;2269:62;2323:7;2314:6;2303:9;2299:22;2269:62;:::i;:::-;2259:72;;2054:287;1405:943;;;;;;;:::o;2354:329::-;2413:6;2462:2;2450:9;2441:7;2437:23;2433:32;2430:119;;;2468:79;;:::i;:::-;2430:119;2588:1;2613:53;2658:7;2649:6;2638:9;2634:22;2613:53;:::i;:::-;2603:63;;2559:117;2354:329;;;;:::o;2689:118::-;2776:24;2794:5;2776:24;:::i;:::-;2771:3;2764:37;2689:118;;:::o;2813:115::-;2898:23;2915:5;2898:23;:::i;:::-;2893:3;2886:36;2813:115;;:::o;2934:366::-;3076:3;3097:67;3161:2;3156:3;3097:67;:::i;:::-;3090:74;;3173:93;3262:3;3173:93;:::i;:::-;3291:2;3286:3;3282:12;3275:19;;2934:366;;;:::o;3306:::-;3448:3;3469:67;3533:2;3528:3;3469:67;:::i;:::-;3462:74;;3545:93;3634:3;3545:93;:::i;:::-;3663:2;3658:3;3654:12;3647:19;;3306:366;;;:::o;3678:::-;3820:3;3841:67;3905:2;3900:3;3841:67;:::i;:::-;3834:74;;3917:93;4006:3;3917:93;:::i;:::-;4035:2;4030:3;4026:12;4019:19;;3678:366;;;:::o;4050:::-;4192:3;4213:67;4277:2;4272:3;4213:67;:::i;:::-;4206:74;;4289:93;4378:3;4289:93;:::i;:::-;4407:2;4402:3;4398:12;4391:19;;4050:366;;;:::o;4422:::-;4564:3;4585:67;4649:2;4644:3;4585:67;:::i;:::-;4578:74;;4661:93;4750:3;4661:93;:::i;:::-;4779:2;4774:3;4770:12;4763:19;;4422:366;;;:::o;4794:118::-;4881:24;4899:5;4881:24;:::i;:::-;4876:3;4869:37;4794:118;;:::o;4918:222::-;5011:4;5049:2;5038:9;5034:18;5026:26;;5062:71;5130:1;5119:9;5115:17;5106:6;5062:71;:::i;:::-;4918:222;;;;:::o;5146:442::-;5295:4;5333:2;5322:9;5318:18;5310:26;;5346:71;5414:1;5403:9;5399:17;5390:6;5346:71;:::i;:::-;5427:72;5495:2;5484:9;5480:18;5471:6;5427:72;:::i;:::-;5509;5577:2;5566:9;5562:18;5553:6;5509:72;:::i;:::-;5146:442;;;;;;:::o;5594:218::-;5685:4;5723:2;5712:9;5708:18;5700:26;;5736:69;5802:1;5791:9;5787:17;5778:6;5736:69;:::i;:::-;5594:218;;;;:::o;5818:419::-;5984:4;6022:2;6011:9;6007:18;5999:26;;6071:9;6065:4;6061:20;6057:1;6046:9;6042:17;6035:47;6099:131;6225:4;6099:131;:::i;:::-;6091:139;;5818:419;;;:::o;6243:::-;6409:4;6447:2;6436:9;6432:18;6424:26;;6496:9;6490:4;6486:20;6482:1;6471:9;6467:17;6460:47;6524:131;6650:4;6524:131;:::i;:::-;6516:139;;6243:419;;;:::o;6668:::-;6834:4;6872:2;6861:9;6857:18;6849:26;;6921:9;6915:4;6911:20;6907:1;6896:9;6892:17;6885:47;6949:131;7075:4;6949:131;:::i;:::-;6941:139;;6668:419;;;:::o;7093:::-;7259:4;7297:2;7286:9;7282:18;7274:26;;7346:9;7340:4;7336:20;7332:1;7321:9;7317:17;7310:47;7374:131;7500:4;7374:131;:::i;:::-;7366:139;;7093:419;;;:::o;7518:::-;7684:4;7722:2;7711:9;7707:18;7699:26;;7771:9;7765:4;7761:20;7757:1;7746:9;7742:17;7735:47;7799:131;7925:4;7799:131;:::i;:::-;7791:139;;7518:419;;;:::o;7943:222::-;8036:4;8074:2;8063:9;8059:18;8051:26;;8087:71;8155:1;8144:9;8140:17;8131:6;8087:71;:::i;:::-;7943:222;;;;:::o;8171:129::-;8205:6;8232:20;;:::i;:::-;8222:30;;8261:33;8289:4;8281:6;8261:33;:::i;:::-;8171:129;;;:::o;8306:75::-;8339:6;8372:2;8366:9;8356:19;;8306:75;:::o;8387:307::-;8448:4;8538:18;8530:6;8527:30;8524:56;;;8560:18;;:::i;:::-;8524:56;8598:29;8620:6;8598:29;:::i;:::-;8590:37;;8682:4;8676;8672:15;8664:23;;8387:307;;;:::o;8700:169::-;8784:11;8818:6;8813:3;8806:19;8858:4;8853:3;8849:14;8834:29;;8700:169;;;;:::o;8875:96::-;8912:7;8941:24;8959:5;8941:24;:::i;:::-;8930:35;;8875:96;;;:::o;8977:149::-;9013:7;9053:66;9046:5;9042:78;9031:89;;8977:149;;;:::o;9132:126::-;9169:7;9209:42;9202:5;9198:54;9187:65;;9132:126;;;:::o;9264:77::-;9301:7;9330:5;9319:16;;9264:77;;;:::o;9347:154::-;9431:6;9426:3;9421;9408:30;9493:1;9484:6;9479:3;9475:16;9468:27;9347:154;;;:::o;9507:281::-;9590:27;9612:4;9590:27;:::i;:::-;9582:6;9578:40;9720:6;9708:10;9705:22;9684:18;9672:10;9669:34;9666:62;9663:88;;;9731:18;;:::i;:::-;9663:88;9771:10;9767:2;9760:22;9550:238;9507:281;;:::o;9794:180::-;9842:77;9839:1;9832:88;9939:4;9936:1;9929:15;9963:4;9960:1;9953:15;9980:117;10089:1;10086;10079:12;10103:117;10212:1;10209;10202:12;10226:117;10335:1;10332;10325:12;10349:117;10458:1;10455;10448:12;10472:102;10513:6;10564:2;10560:7;10555:2;10548:5;10544:14;10540:28;10530:38;;10472:102;;;:::o;10580:177::-;10720:29;10716:1;10708:6;10704:14;10697:53;10580:177;:::o;10763:225::-;10903:34;10899:1;10891:6;10887:14;10880:58;10972:8;10967:2;10959:6;10955:15;10948:33;10763:225;:::o;10994:182::-;11134:34;11130:1;11122:6;11118:14;11111:58;10994:182;:::o;11182:172::-;11322:24;11318:1;11310:6;11306:14;11299:48;11182:172;:::o;11360:181::-;11500:33;11496:1;11488:6;11484:14;11477:57;11360:181;:::o;11547:122::-;11620:24;11638:5;11620:24;:::i;:::-;11613:5;11610:35;11600:63;;11659:1;11656;11649:12;11600:63;11547:122;:::o;11675:::-;11748:24;11766:5;11748:24;:::i;:::-;11741:5;11738:35;11728:63;;11787:1;11784;11777:12;11728:63;11675:122;:::o"
						},
						"gasEstimates": {
							"creation": {
								"codeDepositCost": "706000",
								"executionCost": "infinite",
								"totalCost": "infinite"
							},
							"external": {
								"onERC721Received(address,address,uint256,bytes)": "infinite",
								"owner()": "2544",
								"renounceOwnership()": "30465",
								"rewards(address)": "2815",
								"stake(uint256)": "infinite",
								"tokenOwnedBy(uint256)": "2839",
								"transferOwnership(address)": "30813",
								"unstake(uint256)": "infinite"
							}
						},
						"legacyAssembly": {
							".code": [
								{
									"begin": 386,
									"end": 1568,
									"name": "PUSH",
									"source": 8,
									"value": "80"
								},
								{
									"begin": 386,
									"end": 1568,
									"name": "PUSH",
									"source": 8,
									"value": "40"
								},
								{
									"begin": 386,
									"end": 1568,
									"name": "MSTORE",
									"source": 8
								},
								{
									"begin": 866,
									"end": 945,
									"name": "CALLVALUE",
									"source": 8
								},
								{
									"begin": 866,
									"end": 945,
									"name": "DUP1",
									"source": 8
								},
								{
									"begin": 866,
									"end": 945,
									"name": "ISZERO",
									"source": 8
								},
								{
									"begin": 866,
									"end": 945,
									"name": "PUSH [tag]",
									"source": 8,
									"value": "1"
								},
								{
									"begin": 866,
									"end": 945,
									"name": "JUMPI",
									"source": 8
								},
								{
									"begin": 866,
									"end": 945,
									"name": "PUSH",
									"source": 8,
									"value": "0"
								},
								{
									"begin": 866,
									"end": 945,
									"name": "DUP1",
									"source": 8
								},
								{
									"begin": 866,
									"end": 945,
									"name": "REVERT",
									"source": 8
								},
								{
									"begin": 866,
									"end": 945,
									"name": "tag",
									"source": 8,
									"value": "1"
								},
								{
									"begin": 866,
									"end": 945,
									"name": "JUMPDEST",
									"source": 8
								},
								{
									"begin": 866,
									"end": 945,
									"name": "POP",
									"source": 8
								},
								{
									"begin": 866,
									"end": 945,
									"name": "PUSH",
									"source": 8,
									"value": "40"
								},
								{
									"begin": 866,
									"end": 945,
									"name": "MLOAD",
									"source": 8
								},
								{
									"begin": 866,
									"end": 945,
									"name": "PUSHSIZE",
									"source": 8
								},
								{
									"begin": 866,
									"end": 945,
									"name": "CODESIZE",
									"source": 8
								},
								{
									"begin": 866,
									"end": 945,
									"name": "SUB",
									"source": 8
								},
								{
									"begin": 866,
									"end": 945,
									"name": "DUP1",
									"source": 8
								},
								{
									"begin": 866,
									"end": 945,
									"name": "PUSHSIZE",
									"source": 8
								},
								{
									"begin": 866,
									"end": 945,
									"name": "DUP4",
									"source": 8
								},
								{
									"begin": 866,
									"end": 945,
									"name": "CODECOPY",
									"source": 8
								},
								{
									"begin": 866,
									"end": 945,
									"name": "DUP2",
									"source": 8
								},
								{
									"begin": 866,
									"end": 945,
									"name": "DUP2",
									"source": 8
								},
								{
									"begin": 866,
									"end": 945,
									"name": "ADD",
									"source": 8
								},
								{
									"begin": 866,
									"end": 945,
									"name": "PUSH",
									"source": 8,
									"value": "40"
								},
								{
									"begin": 866,
									"end": 945,
									"name": "MSTORE",
									"source": 8
								},
								{
									"begin": 866,
									"end": 945,
									"name": "DUP2",
									"source": 8
								},
								{
									"begin": 866,
									"end": 945,
									"name": "ADD",
									"source": 8
								},
								{
									"begin": 866,
									"end": 945,
									"name": "SWAP1",
									"source": 8
								},
								{
									"begin": 866,
									"end": 945,
									"name": "PUSH [tag]",
									"source": 8,
									"value": "2"
								},
								{
									"begin": 866,
									"end": 945,
									"name": "SWAP2",
									"source": 8
								},
								{
									"begin": 866,
									"end": 945,
									"name": "SWAP1",
									"source": 8
								},
								{
									"begin": 866,
									"end": 945,
									"name": "PUSH [tag]",
									"source": 8,
									"value": "3"
								},
								{
									"begin": 866,
									"end": 945,
									"name": "JUMP",
									"source": 8,
									"value": "[in]"
								},
								{
									"begin": 866,
									"end": 945,
									"name": "tag",
									"source": 8,
									"value": "2"
								},
								{
									"begin": 866,
									"end": 945,
									"name": "JUMPDEST",
									"source": 8
								},
								{
									"begin": 936,
									"end": 968,
									"name": "PUSH [tag]",
									"source": 0,
									"value": "8"
								},
								{
									"begin": 955,
									"end": 967,
									"name": "PUSH [tag]",
									"source": 0,
									"value": "9"
								},
								{
									"begin": 955,
									"end": 965,
									"name": "PUSH [tag]",
									"source": 0,
									"value": "10"
								},
								{
									"begin": 955,
									"end": 965,
									"name": "PUSH",
									"source": 0,
									"value": "20"
								},
								{
									"begin": 955,
									"end": 965,
									"name": "SHL",
									"source": 0
								},
								{
									"begin": 955,
									"end": 967,
									"name": "PUSH",
									"source": 0,
									"value": "20"
								},
								{
									"begin": 955,
									"end": 967,
									"name": "SHR",
									"source": 0
								},
								{
									"begin": 955,
									"end": 967,
									"name": "JUMP",
									"source": 0,
									"value": "[in]"
								},
								{
									"begin": 955,
									"end": 967,
									"name": "tag",
									"source": 0,
									"value": "9"
								},
								{
									"begin": 955,
									"end": 967,
									"name": "JUMPDEST",
									"source": 0
								},
								{
									"begin": 936,
									"end": 954,
									"name": "PUSH [tag]",
									"source": 0,
									"value": "11"
								},
								{
									"begin": 936,
									"end": 954,
									"name": "PUSH",
									"source": 0,
									"value": "20"
								},
								{
									"begin": 936,
									"end": 954,
									"name": "SHL",
									"source": 0
								},
								{
									"begin": 936,
									"end": 968,
									"name": "PUSH",
									"source": 0,
									"value": "20"
								},
								{
									"begin": 936,
									"end": 968,
									"name": "SHR",
									"source": 0
								},
								{
									"begin": 936,
									"end": 968,
									"name": "JUMP",
									"source": 0,
									"value": "[in]"
								},
								{
									"begin": 936,
									"end": 968,
									"name": "tag",
									"source": 0,
									"value": "8"
								},
								{
									"begin": 936,
									"end": 968,
									"name": "JUMPDEST",
									"source": 0
								},
								{
									"begin": 1701,
									"end": 1702,
									"name": "PUSH",
									"source": 1,
									"value": "1"
								},
								{
									"begin": 1806,
									"end": 1813,
									"name": "DUP1",
									"source": 1
								},
								{
									"begin": 1806,
									"end": 1828,
									"name": "DUP2",
									"source": 1
								},
								{
									"begin": 1806,
									"end": 1828,
									"name": "SWAP1",
									"source": 1
								},
								{
									"begin": 1806,
									"end": 1828,
									"name": "SSTORE",
									"source": 1
								},
								{
									"begin": 1806,
									"end": 1828,
									"name": "POP",
									"source": 1
								},
								{
									"begin": 926,
									"end": 938,
									"name": "DUP1",
									"source": 8
								},
								{
									"begin": 911,
									"end": 923,
									"name": "PUSH",
									"source": 8,
									"value": "2"
								},
								{
									"begin": 911,
									"end": 923,
									"name": "PUSH",
									"source": 8,
									"value": "0"
								},
								{
									"begin": 911,
									"end": 938,
									"name": "PUSH",
									"source": 8,
									"value": "100"
								},
								{
									"begin": 911,
									"end": 938,
									"name": "EXP",
									"source": 8
								},
								{
									"begin": 911,
									"end": 938,
									"name": "DUP2",
									"source": 8
								},
								{
									"begin": 911,
									"end": 938,
									"name": "SLOAD",
									"source": 8
								},
								{
									"begin": 911,
									"end": 938,
									"name": "DUP2",
									"source": 8
								},
								{
									"begin": 911,
									"end": 938,
									"name": "PUSH",
									"source": 8,
									"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
								},
								{
									"begin": 911,
									"end": 938,
									"name": "MUL",
									"source": 8
								},
								{
									"begin": 911,
									"end": 938,
									"name": "NOT",
									"source": 8
								},
								{
									"begin": 911,
									"end": 938,
									"name": "AND",
									"source": 8
								},
								{
									"begin": 911,
									"end": 938,
									"name": "SWAP1",
									"source": 8
								},
								{
									"begin": 911,
									"end": 938,
									"name": "DUP4",
									"source": 8
								},
								{
									"begin": 911,
									"end": 938,
									"name": "PUSH",
									"source": 8,
									"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
								},
								{
									"begin": 911,
									"end": 938,
									"name": "AND",
									"source": 8
								},
								{
									"begin": 911,
									"end": 938,
									"name": "MUL",
									"source": 8
								},
								{
									"begin": 911,
									"end": 938,
									"name": "OR",
									"source": 8
								},
								{
									"begin": 911,
									"end": 938,
									"name": "SWAP1",
									"source": 8
								},
								{
									"begin": 911,
									"end": 938,
									"name": "SSTORE",
									"source": 8
								},
								{
									"begin": 911,
									"end": 938,
									"name": "POP",
									"source": 8
								},
								{
									"begin": 866,
									"end": 945,
									"name": "POP",
									"source": 8
								},
								{
									"begin": 386,
									"end": 1568,
									"name": "PUSH [tag]",
									"source": 8,
									"value": "14"
								},
								{
									"begin": 386,
									"end": 1568,
									"name": "JUMP",
									"source": 8
								},
								{
									"begin": 640,
									"end": 736,
									"name": "tag",
									"source": 5,
									"value": "10"
								},
								{
									"begin": 640,
									"end": 736,
									"name": "JUMPDEST",
									"source": 5
								},
								{
									"begin": 693,
									"end": 700,
									"name": "PUSH",
									"source": 5,
									"value": "0"
								},
								{
									"begin": 719,
									"end": 729,
									"name": "CALLER",
									"source": 5
								},
								{
									"begin": 712,
									"end": 729,
									"name": "SWAP1",
									"source": 5
								},
								{
									"begin": 712,
									"end": 729,
									"name": "POP",
									"source": 5
								},
								{
									"begin": 640,
									"end": 736,
									"name": "SWAP1",
									"source": 5
								},
								{
									"begin": 640,
									"end": 736,
									"name": "JUMP",
									"source": 5,
									"value": "[out]"
								},
								{
									"begin": 2433,
									"end": 2620,
									"name": "tag",
									"source": 0,
									"value": "11"
								},
								{
									"begin": 2433,
									"end": 2620,
									"name": "JUMPDEST",
									"source": 0
								},
								{
									"begin": 2506,
									"end": 2522,
									"name": "PUSH",
									"source": 0,
									"value": "0"
								},
								{
									"begin": 2525,
									"end": 2531,
									"name": "DUP1",
									"source": 0
								},
								{
									"begin": 2525,
									"end": 2531,
									"name": "PUSH",
									"source": 0,
									"value": "0"
								},
								{
									"begin": 2525,
									"end": 2531,
									"name": "SWAP1",
									"source": 0
								},
								{
									"begin": 2525,
									"end": 2531,
									"name": "SLOAD",
									"source": 0
								},
								{
									"begin": 2525,
									"end": 2531,
									"name": "SWAP1",
									"source": 0
								},
								{
									"begin": 2525,
									"end": 2531,
									"name": "PUSH",
									"source": 0,
									"value": "100"
								},
								{
									"begin": 2525,
									"end": 2531,
									"name": "EXP",
									"source": 0
								},
								{
									"begin": 2525,
									"end": 2531,
									"name": "SWAP1",
									"source": 0
								},
								{
									"begin": 2525,
									"end": 2531,
									"name": "DIV",
									"source": 0
								},
								{
									"begin": 2525,
									"end": 2531,
									"name": "PUSH",
									"source": 0,
									"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
								},
								{
									"begin": 2525,
									"end": 2531,
									"name": "AND",
									"source": 0
								},
								{
									"begin": 2506,
									"end": 2531,
									"name": "SWAP1",
									"source": 0
								},
								{
									"begin": 2506,
									"end": 2531,
									"name": "POP",
									"source": 0
								},
								{
									"begin": 2550,
									"end": 2558,
									"name": "DUP2",
									"source": 0
								},
								{
									"begin": 2541,
									"end": 2547,
									"name": "PUSH",
									"source": 0,
									"value": "0"
								},
								{
									"begin": 2541,
									"end": 2547,
									"name": "DUP1",
									"source": 0
								},
								{
									"begin": 2541,
									"end": 2558,
									"name": "PUSH",
									"source": 0,
									"value": "100"
								},
								{
									"begin": 2541,
									"end": 2558,
									"name": "EXP",
									"source": 0
								},
								{
									"begin": 2541,
									"end": 2558,
									"name": "DUP2",
									"source": 0
								},
								{
									"begin": 2541,
									"end": 2558,
									"name": "SLOAD",
									"source": 0
								},
								{
									"begin": 2541,
									"end": 2558,
									"name": "DUP2",
									"source": 0
								},
								{
									"begin": 2541,
									"end": 2558,
									"name": "PUSH",
									"source": 0,
									"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
								},
								{
									"begin": 2541,
									"end": 2558,
									"name": "MUL",
									"source": 0
								},
								{
									"begin": 2541,
									"end": 2558,
									"name": "NOT",
									"source": 0
								},
								{
									"begin": 2541,
									"end": 2558,
									"name": "AND",
									"source": 0
								},
								{
									"begin": 2541,
									"end": 2558,
									"name": "SWAP1",
									"source": 0
								},
								{
									"begin": 2541,
									"end": 2558,
									"name": "DUP4",
									"source": 0
								},
								{
									"begin": 2541,
									"end": 2558,
									"name": "PUSH",
									"source": 0,
									"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
								},
								{
									"begin": 2541,
									"end": 2558,
									"name": "AND",
									"source": 0
								},
								{
									"begin": 2541,
									"end": 2558,
									"name": "MUL",
									"source": 0
								},
								{
									"begin": 2541,
									"end": 2558,
									"name": "OR",
									"source": 0
								},
								{
									"begin": 2541,
									"end": 2558,
									"name": "SWAP1",
									"source": 0
								},
								{
									"begin": 2541,
									"end": 2558,
									"name": "SSTORE",
									"source": 0
								},
								{
									"begin": 2541,
									"end": 2558,
									"name": "POP",
									"source": 0
								},
								{
									"begin": 2604,
									"end": 2612,
									"name": "DUP2",
									"source": 0
								},
								{
									"begin": 2573,
									"end": 2613,
									"name": "PUSH",
									"source": 0,
									"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
								},
								{
									"begin": 2573,
									"end": 2613,
									"name": "AND",
									"source": 0
								},
								{
									"begin": 2594,
									"end": 2602,
									"name": "DUP2",
									"source": 0
								},
								{
									"begin": 2573,
									"end": 2613,
									"name": "PUSH",
									"source": 0,
									"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
								},
								{
									"begin": 2573,
									"end": 2613,
									"name": "AND",
									"source": 0
								},
								{
									"begin": 2573,
									"end": 2613,
									"name": "PUSH",
									"source": 0,
									"value": "8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0"
								},
								{
									"begin": 2573,
									"end": 2613,
									"name": "PUSH",
									"source": 0,
									"value": "40"
								},
								{
									"begin": 2573,
									"end": 2613,
									"name": "MLOAD",
									"source": 0
								},
								{
									"begin": 2573,
									"end": 2613,
									"name": "PUSH",
									"source": 0,
									"value": "40"
								},
								{
									"begin": 2573,
									"end": 2613,
									"name": "MLOAD",
									"source": 0
								},
								{
									"begin": 2573,
									"end": 2613,
									"name": "DUP1",
									"source": 0
								},
								{
									"begin": 2573,
									"end": 2613,
									"name": "SWAP2",
									"source": 0
								},
								{
									"begin": 2573,
									"end": 2613,
									"name": "SUB",
									"source": 0
								},
								{
									"begin": 2573,
									"end": 2613,
									"name": "SWAP1",
									"source": 0
								},
								{
									"begin": 2573,
									"end": 2613,
									"name": "LOG3",
									"source": 0
								},
								{
									"begin": 2496,
									"end": 2620,
									"name": "POP",
									"source": 0
								},
								{
									"begin": 2433,
									"end": 2620,
									"name": "POP",
									"source": 0
								},
								{
									"begin": 2433,
									"end": 2620,
									"name": "JUMP",
									"source": 0,
									"value": "[out]"
								},
								{
									"begin": 7,
									"end": 180,
									"name": "tag",
									"source": 9,
									"value": "18"
								},
								{
									"begin": 7,
									"end": 180,
									"name": "JUMPDEST",
									"source": 9
								},
								{
									"begin": 79,
									"end": 84,
									"name": "PUSH",
									"source": 9,
									"value": "0"
								},
								{
									"begin": 110,
									"end": 116,
									"name": "DUP2",
									"source": 9
								},
								{
									"begin": 104,
									"end": 117,
									"name": "MLOAD",
									"source": 9
								},
								{
									"begin": 95,
									"end": 117,
									"name": "SWAP1",
									"source": 9
								},
								{
									"begin": 95,
									"end": 117,
									"name": "POP",
									"source": 9
								},
								{
									"begin": 126,
									"end": 174,
									"name": "PUSH [tag]",
									"source": 9,
									"value": "20"
								},
								{
									"begin": 168,
									"end": 173,
									"name": "DUP2",
									"source": 9
								},
								{
									"begin": 126,
									"end": 174,
									"name": "PUSH [tag]",
									"source": 9,
									"value": "21"
								},
								{
									"begin": 126,
									"end": 174,
									"name": "JUMP",
									"source": 9,
									"value": "[in]"
								},
								{
									"begin": 126,
									"end": 174,
									"name": "tag",
									"source": 9,
									"value": "20"
								},
								{
									"begin": 126,
									"end": 174,
									"name": "JUMPDEST",
									"source": 9
								},
								{
									"begin": 7,
									"end": 180,
									"name": "SWAP3",
									"source": 9
								},
								{
									"begin": 7,
									"end": 180,
									"name": "SWAP2",
									"source": 9
								},
								{
									"begin": 7,
									"end": 180,
									"name": "POP",
									"source": 9
								},
								{
									"begin": 7,
									"end": 180,
									"name": "POP",
									"source": 9
								},
								{
									"begin": 7,
									"end": 180,
									"name": "JUMP",
									"source": 9,
									"value": "[out]"
								},
								{
									"begin": 186,
									"end": 567,
									"name": "tag",
									"source": 9,
									"value": "3"
								},
								{
									"begin": 186,
									"end": 567,
									"name": "JUMPDEST",
									"source": 9
								},
								{
									"begin": 271,
									"end": 277,
									"name": "PUSH",
									"source": 9,
									"value": "0"
								},
								{
									"begin": 320,
									"end": 322,
									"name": "PUSH",
									"source": 9,
									"value": "20"
								},
								{
									"begin": 308,
									"end": 317,
									"name": "DUP3",
									"source": 9
								},
								{
									"begin": 299,
									"end": 306,
									"name": "DUP5",
									"source": 9
								},
								{
									"begin": 295,
									"end": 318,
									"name": "SUB",
									"source": 9
								},
								{
									"begin": 291,
									"end": 323,
									"name": "SLT",
									"source": 9
								},
								{
									"begin": 288,
									"end": 407,
									"name": "ISZERO",
									"source": 9
								},
								{
									"begin": 288,
									"end": 407,
									"name": "PUSH [tag]",
									"source": 9,
									"value": "23"
								},
								{
									"begin": 288,
									"end": 407,
									"name": "JUMPI",
									"source": 9
								},
								{
									"begin": 326,
									"end": 405,
									"name": "PUSH [tag]",
									"source": 9,
									"value": "24"
								},
								{
									"begin": 326,
									"end": 405,
									"name": "PUSH [tag]",
									"source": 9,
									"value": "25"
								},
								{
									"begin": 326,
									"end": 405,
									"name": "JUMP",
									"source": 9,
									"value": "[in]"
								},
								{
									"begin": 326,
									"end": 405,
									"name": "tag",
									"source": 9,
									"value": "24"
								},
								{
									"begin": 326,
									"end": 405,
									"name": "JUMPDEST",
									"source": 9
								},
								{
									"begin": 288,
									"end": 407,
									"name": "tag",
									"source": 9,
									"value": "23"
								},
								{
									"begin": 288,
									"end": 407,
									"name": "JUMPDEST",
									"source": 9
								},
								{
									"begin": 446,
									"end": 447,
									"name": "PUSH",
									"source": 9,
									"value": "0"
								},
								{
									"begin": 471,
									"end": 550,
									"name": "PUSH [tag]",
									"source": 9,
									"value": "26"
								},
								{
									"begin": 542,
									"end": 549,
									"name": "DUP5",
									"source": 9
								},
								{
									"begin": 533,
									"end": 539,
									"name": "DUP3",
									"source": 9
								},
								{
									"begin": 522,
									"end": 531,
									"name": "DUP6",
									"source": 9
								},
								{
									"begin": 518,
									"end": 540,
									"name": "ADD",
									"source": 9
								},
								{
									"begin": 471,
									"end": 550,
									"name": "PUSH [tag]",
									"source": 9,
									"value": "18"
								},
								{
									"begin": 471,
									"end": 550,
									"name": "JUMP",
									"source": 9,
									"value": "[in]"
								},
								{
									"begin": 471,
									"end": 550,
									"name": "tag",
									"source": 9,
									"value": "26"
								},
								{
									"begin": 471,
									"end": 550,
									"name": "JUMPDEST",
									"source": 9
								},
								{
									"begin": 461,
									"end": 550,
									"name": "SWAP2",
									"source": 9
								},
								{
									"begin": 461,
									"end": 550,
									"name": "POP",
									"source": 9
								},
								{
									"begin": 417,
									"end": 560,
									"name": "POP",
									"source": 9
								},
								{
									"begin": 186,
									"end": 567,
									"name": "SWAP3",
									"source": 9
								},
								{
									"begin": 186,
									"end": 567,
									"name": "SWAP2",
									"source": 9
								},
								{
									"begin": 186,
									"end": 567,
									"name": "POP",
									"source": 9
								},
								{
									"begin": 186,
									"end": 567,
									"name": "POP",
									"source": 9
								},
								{
									"begin": 186,
									"end": 567,
									"name": "JUMP",
									"source": 9,
									"value": "[out]"
								},
								{
									"begin": 654,
									"end": 750,
									"name": "tag",
									"source": 9,
									"value": "29"
								},
								{
									"begin": 654,
									"end": 750,
									"name": "JUMPDEST",
									"source": 9
								},
								{
									"begin": 691,
									"end": 698,
									"name": "PUSH",
									"source": 9,
									"value": "0"
								},
								{
									"begin": 720,
									"end": 744,
									"name": "PUSH [tag]",
									"source": 9,
									"value": "31"
								},
								{
									"begin": 738,
									"end": 743,
									"name": "DUP3",
									"source": 9
								},
								{
									"begin": 720,
									"end": 744,
									"name": "PUSH [tag]",
									"source": 9,
									"value": "32"
								},
								{
									"begin": 720,
									"end": 744,
									"name": "JUMP",
									"source": 9,
									"value": "[in]"
								},
								{
									"begin": 720,
									"end": 744,
									"name": "tag",
									"source": 9,
									"value": "31"
								},
								{
									"begin": 720,
									"end": 744,
									"name": "JUMPDEST",
									"source": 9
								},
								{
									"begin": 709,
									"end": 744,
									"name": "SWAP1",
									"source": 9
								},
								{
									"begin": 709,
									"end": 744,
									"name": "POP",
									"source": 9
								},
								{
									"begin": 654,
									"end": 750,
									"name": "SWAP2",
									"source": 9
								},
								{
									"begin": 654,
									"end": 750,
									"name": "SWAP1",
									"source": 9
								},
								{
									"begin": 654,
									"end": 750,
									"name": "POP",
									"source": 9
								},
								{
									"begin": 654,
									"end": 750,
									"name": "JUMP",
									"source": 9,
									"value": "[out]"
								},
								{
									"begin": 756,
									"end": 867,
									"name": "tag",
									"source": 9,
									"value": "33"
								},
								{
									"begin": 756,
									"end": 867,
									"name": "JUMPDEST",
									"source": 9
								},
								{
									"begin": 808,
									"end": 815,
									"name": "PUSH",
									"source": 9,
									"value": "0"
								},
								{
									"begin": 837,
									"end": 861,
									"name": "PUSH [tag]",
									"source": 9,
									"value": "35"
								},
								{
									"begin": 855,
									"end": 860,
									"name": "DUP3",
									"source": 9
								},
								{
									"begin": 837,
									"end": 861,
									"name": "PUSH [tag]",
									"source": 9,
									"value": "29"
								},
								{
									"begin": 837,
									"end": 861,
									"name": "JUMP",
									"source": 9,
									"value": "[in]"
								},
								{
									"begin": 837,
									"end": 861,
									"name": "tag",
									"source": 9,
									"value": "35"
								},
								{
									"begin": 837,
									"end": 861,
									"name": "JUMPDEST",
									"source": 9
								},
								{
									"begin": 826,
									"end": 861,
									"name": "SWAP1",
									"source": 9
								},
								{
									"begin": 826,
									"end": 861,
									"name": "POP",
									"source": 9
								},
								{
									"begin": 756,
									"end": 867,
									"name": "SWAP2",
									"source": 9
								},
								{
									"begin": 756,
									"end": 867,
									"name": "SWAP1",
									"source": 9
								},
								{
									"begin": 756,
									"end": 867,
									"name": "POP",
									"source": 9
								},
								{
									"begin": 756,
									"end": 867,
									"name": "JUMP",
									"source": 9,
									"value": "[out]"
								},
								{
									"begin": 873,
									"end": 999,
									"name": "tag",
									"source": 9,
									"value": "32"
								},
								{
									"begin": 873,
									"end": 999,
									"name": "JUMPDEST",
									"source": 9
								},
								{
									"begin": 910,
									"end": 917,
									"name": "PUSH",
									"source": 9,
									"value": "0"
								},
								{
									"begin": 950,
									"end": 992,
									"name": "PUSH",
									"source": 9,
									"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
								},
								{
									"begin": 943,
									"end": 948,
									"name": "DUP3",
									"source": 9
								},
								{
									"begin": 939,
									"end": 993,
									"name": "AND",
									"source": 9
								},
								{
									"begin": 928,
									"end": 993,
									"name": "SWAP1",
									"source": 9
								},
								{
									"begin": 928,
									"end": 993,
									"name": "POP",
									"source": 9
								},
								{
									"begin": 873,
									"end": 999,
									"name": "SWAP2",
									"source": 9
								},
								{
									"begin": 873,
									"end": 999,
									"name": "SWAP1",
									"source": 9
								},
								{
									"begin": 873,
									"end": 999,
									"name": "POP",
									"source": 9
								},
								{
									"begin": 873,
									"end": 999,
									"name": "JUMP",
									"source": 9,
									"value": "[out]"
								},
								{
									"begin": 1128,
									"end": 1245,
									"name": "tag",
									"source": 9,
									"value": "25"
								},
								{
									"begin": 1128,
									"end": 1245,
									"name": "JUMPDEST",
									"source": 9
								},
								{
									"begin": 1237,
									"end": 1238,
									"name": "PUSH",
									"source": 9,
									"value": "0"
								},
								{
									"begin": 1234,
									"end": 1235,
									"name": "DUP1",
									"source": 9
								},
								{
									"begin": 1227,
									"end": 1239,
									"name": "REVERT",
									"source": 9
								},
								{
									"begin": 1251,
									"end": 1403,
									"name": "tag",
									"source": 9,
									"value": "21"
								},
								{
									"begin": 1251,
									"end": 1403,
									"name": "JUMPDEST",
									"source": 9
								},
								{
									"begin": 1339,
									"end": 1378,
									"name": "PUSH [tag]",
									"source": 9,
									"value": "41"
								},
								{
									"begin": 1372,
									"end": 1377,
									"name": "DUP2",
									"source": 9
								},
								{
									"begin": 1339,
									"end": 1378,
									"name": "PUSH [tag]",
									"source": 9,
									"value": "33"
								},
								{
									"begin": 1339,
									"end": 1378,
									"name": "JUMP",
									"source": 9,
									"value": "[in]"
								},
								{
									"begin": 1339,
									"end": 1378,
									"name": "tag",
									"source": 9,
									"value": "41"
								},
								{
									"begin": 1339,
									"end": 1378,
									"name": "JUMPDEST",
									"source": 9
								},
								{
									"begin": 1332,
									"end": 1337,
									"name": "DUP2",
									"source": 9
								},
								{
									"begin": 1329,
									"end": 1379,
									"name": "EQ",
									"source": 9
								},
								{
									"begin": 1319,
									"end": 1397,
									"name": "PUSH [tag]",
									"source": 9,
									"value": "42"
								},
								{
									"begin": 1319,
									"end": 1397,
									"name": "JUMPI",
									"source": 9
								},
								{
									"begin": 1393,
									"end": 1394,
									"name": "PUSH",
									"source": 9,
									"value": "0"
								},
								{
									"begin": 1390,
									"end": 1391,
									"name": "DUP1",
									"source": 9
								},
								{
									"begin": 1383,
									"end": 1395,
									"name": "REVERT",
									"source": 9
								},
								{
									"begin": 1319,
									"end": 1397,
									"name": "tag",
									"source": 9,
									"value": "42"
								},
								{
									"begin": 1319,
									"end": 1397,
									"name": "JUMPDEST",
									"source": 9
								},
								{
									"begin": 1251,
									"end": 1403,
									"name": "POP",
									"source": 9
								},
								{
									"begin": 1251,
									"end": 1403,
									"name": "JUMP",
									"source": 9,
									"value": "[out]"
								},
								{
									"begin": 386,
									"end": 1568,
									"name": "tag",
									"source": 8,
									"value": "14"
								},
								{
									"begin": 386,
									"end": 1568,
									"name": "JUMPDEST",
									"source": 8
								},
								{
									"begin": 386,
									"end": 1568,
									"name": "PUSH #[$]",
									"source": 8,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 386,
									"end": 1568,
									"name": "DUP1",
									"source": 8
								},
								{
									"begin": 386,
									"end": 1568,
									"name": "PUSH [$]",
									"source": 8,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 386,
									"end": 1568,
									"name": "PUSH",
									"source": 8,
									"value": "0"
								},
								{
									"begin": 386,
									"end": 1568,
									"name": "CODECOPY",
									"source": 8
								},
								{
									"begin": 386,
									"end": 1568,
									"name": "PUSH",
									"source": 8,
									"value": "0"
								},
								{
									"begin": 386,
									"end": 1568,
									"name": "RETURN",
									"source": 8
								}
							],
							".data": {
								"0": {
									".auxdata": "a2646970667358221220ca278c13e82d0859db6101bf3d49c5a514a613a2a95d3d546e577de540f1e82a64736f6c63430008070033",
									".code": [
										{
											"begin": 386,
											"end": 1568,
											"name": "PUSH",
											"source": 8,
											"value": "80"
										},
										{
											"begin": 386,
											"end": 1568,
											"name": "PUSH",
											"source": 8,
											"value": "40"
										},
										{
											"begin": 386,
											"end": 1568,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 386,
											"end": 1568,
											"name": "PUSH",
											"source": 8,
											"value": "4"
										},
										{
											"begin": 386,
											"end": 1568,
											"name": "CALLDATASIZE",
											"source": 8
										},
										{
											"begin": 386,
											"end": 1568,
											"name": "LT",
											"source": 8
										},
										{
											"begin": 386,
											"end": 1568,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "1"
										},
										{
											"begin": 386,
											"end": 1568,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 386,
											"end": 1568,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 386,
											"end": 1568,
											"name": "CALLDATALOAD",
											"source": 8
										},
										{
											"begin": 386,
											"end": 1568,
											"name": "PUSH",
											"source": 8,
											"value": "E0"
										},
										{
											"begin": 386,
											"end": 1568,
											"name": "SHR",
											"source": 8
										},
										{
											"begin": 386,
											"end": 1568,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 386,
											"end": 1568,
											"name": "PUSH",
											"source": 8,
											"value": "8488CC41"
										},
										{
											"begin": 386,
											"end": 1568,
											"name": "GT",
											"source": 8
										},
										{
											"begin": 386,
											"end": 1568,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "11"
										},
										{
											"begin": 386,
											"end": 1568,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 386,
											"end": 1568,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 386,
											"end": 1568,
											"name": "PUSH",
											"source": 8,
											"value": "8488CC41"
										},
										{
											"begin": 386,
											"end": 1568,
											"name": "EQ",
											"source": 8
										},
										{
											"begin": 386,
											"end": 1568,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "7"
										},
										{
											"begin": 386,
											"end": 1568,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 386,
											"end": 1568,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 386,
											"end": 1568,
											"name": "PUSH",
											"source": 8,
											"value": "8DA5CB5B"
										},
										{
											"begin": 386,
											"end": 1568,
											"name": "EQ",
											"source": 8
										},
										{
											"begin": 386,
											"end": 1568,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "8"
										},
										{
											"begin": 386,
											"end": 1568,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 386,
											"end": 1568,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 386,
											"end": 1568,
											"name": "PUSH",
											"source": 8,
											"value": "A694FC3A"
										},
										{
											"begin": 386,
											"end": 1568,
											"name": "EQ",
											"source": 8
										},
										{
											"begin": 386,
											"end": 1568,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "9"
										},
										{
											"begin": 386,
											"end": 1568,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 386,
											"end": 1568,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 386,
											"end": 1568,
											"name": "PUSH",
											"source": 8,
											"value": "F2FDE38B"
										},
										{
											"begin": 386,
											"end": 1568,
											"name": "EQ",
											"source": 8
										},
										{
											"begin": 386,
											"end": 1568,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "10"
										},
										{
											"begin": 386,
											"end": 1568,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 386,
											"end": 1568,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "2"
										},
										{
											"begin": 386,
											"end": 1568,
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 386,
											"end": 1568,
											"name": "tag",
											"source": 8,
											"value": "11"
										},
										{
											"begin": 386,
											"end": 1568,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 386,
											"end": 1568,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 386,
											"end": 1568,
											"name": "PUSH",
											"source": 8,
											"value": "700037D"
										},
										{
											"begin": 386,
											"end": 1568,
											"name": "EQ",
											"source": 8
										},
										{
											"begin": 386,
											"end": 1568,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "3"
										},
										{
											"begin": 386,
											"end": 1568,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 386,
											"end": 1568,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 386,
											"end": 1568,
											"name": "PUSH",
											"source": 8,
											"value": "150B7A02"
										},
										{
											"begin": 386,
											"end": 1568,
											"name": "EQ",
											"source": 8
										},
										{
											"begin": 386,
											"end": 1568,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "4"
										},
										{
											"begin": 386,
											"end": 1568,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 386,
											"end": 1568,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 386,
											"end": 1568,
											"name": "PUSH",
											"source": 8,
											"value": "2E17DE78"
										},
										{
											"begin": 386,
											"end": 1568,
											"name": "EQ",
											"source": 8
										},
										{
											"begin": 386,
											"end": 1568,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "5"
										},
										{
											"begin": 386,
											"end": 1568,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 386,
											"end": 1568,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 386,
											"end": 1568,
											"name": "PUSH",
											"source": 8,
											"value": "715018A6"
										},
										{
											"begin": 386,
											"end": 1568,
											"name": "EQ",
											"source": 8
										},
										{
											"begin": 386,
											"end": 1568,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "6"
										},
										{
											"begin": 386,
											"end": 1568,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 386,
											"end": 1568,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "2"
										},
										{
											"begin": 386,
											"end": 1568,
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 386,
											"end": 1568,
											"name": "tag",
											"source": 8,
											"value": "1"
										},
										{
											"begin": 386,
											"end": 1568,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 386,
											"end": 1568,
											"name": "CALLDATASIZE",
											"source": 8
										},
										{
											"begin": 386,
											"end": 1568,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "2"
										},
										{
											"begin": 386,
											"end": 1568,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 386,
											"end": 1568,
											"name": "STOP",
											"source": 8
										},
										{
											"begin": 386,
											"end": 1568,
											"name": "tag",
											"source": 8,
											"value": "2"
										},
										{
											"begin": 386,
											"end": 1568,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 386,
											"end": 1568,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 386,
											"end": 1568,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 386,
											"end": 1568,
											"name": "REVERT",
											"source": 8
										},
										{
											"begin": 816,
											"end": 859,
											"name": "tag",
											"source": 8,
											"value": "3"
										},
										{
											"begin": 816,
											"end": 859,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 816,
											"end": 859,
											"name": "CALLVALUE",
											"source": 8
										},
										{
											"begin": 816,
											"end": 859,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 816,
											"end": 859,
											"name": "ISZERO",
											"source": 8
										},
										{
											"begin": 816,
											"end": 859,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "14"
										},
										{
											"begin": 816,
											"end": 859,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 816,
											"end": 859,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 816,
											"end": 859,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 816,
											"end": 859,
											"name": "REVERT",
											"source": 8
										},
										{
											"begin": 816,
											"end": 859,
											"name": "tag",
											"source": 8,
											"value": "14"
										},
										{
											"begin": 816,
											"end": 859,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 816,
											"end": 859,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 816,
											"end": 859,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "15"
										},
										{
											"begin": 816,
											"end": 859,
											"name": "PUSH",
											"source": 8,
											"value": "4"
										},
										{
											"begin": 816,
											"end": 859,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 816,
											"end": 859,
											"name": "CALLDATASIZE",
											"source": 8
										},
										{
											"begin": 816,
											"end": 859,
											"name": "SUB",
											"source": 8
										},
										{
											"begin": 816,
											"end": 859,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 816,
											"end": 859,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 816,
											"end": 859,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 816,
											"end": 859,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "16"
										},
										{
											"begin": 816,
											"end": 859,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 816,
											"end": 859,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 816,
											"end": 859,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "17"
										},
										{
											"begin": 816,
											"end": 859,
											"name": "JUMP",
											"source": 8,
											"value": "[in]"
										},
										{
											"begin": 816,
											"end": 859,
											"name": "tag",
											"source": 8,
											"value": "16"
										},
										{
											"begin": 816,
											"end": 859,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 816,
											"end": 859,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "18"
										},
										{
											"begin": 816,
											"end": 859,
											"name": "JUMP",
											"source": 8,
											"value": "[in]"
										},
										{
											"begin": 816,
											"end": 859,
											"name": "tag",
											"source": 8,
											"value": "15"
										},
										{
											"begin": 816,
											"end": 859,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 816,
											"end": 859,
											"name": "PUSH",
											"source": 8,
											"value": "40"
										},
										{
											"begin": 816,
											"end": 859,
											"name": "MLOAD",
											"source": 8
										},
										{
											"begin": 816,
											"end": 859,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "19"
										},
										{
											"begin": 816,
											"end": 859,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 816,
											"end": 859,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 816,
											"end": 859,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "20"
										},
										{
											"begin": 816,
											"end": 859,
											"name": "JUMP",
											"source": 8,
											"value": "[in]"
										},
										{
											"begin": 816,
											"end": 859,
											"name": "tag",
											"source": 8,
											"value": "19"
										},
										{
											"begin": 816,
											"end": 859,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 816,
											"end": 859,
											"name": "PUSH",
											"source": 8,
											"value": "40"
										},
										{
											"begin": 816,
											"end": 859,
											"name": "MLOAD",
											"source": 8
										},
										{
											"begin": 816,
											"end": 859,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 816,
											"end": 859,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 816,
											"end": 859,
											"name": "SUB",
											"source": 8
										},
										{
											"begin": 816,
											"end": 859,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 816,
											"end": 859,
											"name": "RETURN",
											"source": 8
										},
										{
											"begin": 588,
											"end": 788,
											"name": "tag",
											"source": 4,
											"value": "4"
										},
										{
											"begin": 588,
											"end": 788,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 588,
											"end": 788,
											"name": "CALLVALUE",
											"source": 4
										},
										{
											"begin": 588,
											"end": 788,
											"name": "DUP1",
											"source": 4
										},
										{
											"begin": 588,
											"end": 788,
											"name": "ISZERO",
											"source": 4
										},
										{
											"begin": 588,
											"end": 788,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "21"
										},
										{
											"begin": 588,
											"end": 788,
											"name": "JUMPI",
											"source": 4
										},
										{
											"begin": 588,
											"end": 788,
											"name": "PUSH",
											"source": 4,
											"value": "0"
										},
										{
											"begin": 588,
											"end": 788,
											"name": "DUP1",
											"source": 4
										},
										{
											"begin": 588,
											"end": 788,
											"name": "REVERT",
											"source": 4
										},
										{
											"begin": 588,
											"end": 788,
											"name": "tag",
											"source": 4,
											"value": "21"
										},
										{
											"begin": 588,
											"end": 788,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 588,
											"end": 788,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 588,
											"end": 788,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "22"
										},
										{
											"begin": 588,
											"end": 788,
											"name": "PUSH",
											"source": 4,
											"value": "4"
										},
										{
											"begin": 588,
											"end": 788,
											"name": "DUP1",
											"source": 4
										},
										{
											"begin": 588,
											"end": 788,
											"name": "CALLDATASIZE",
											"source": 4
										},
										{
											"begin": 588,
											"end": 788,
											"name": "SUB",
											"source": 4
										},
										{
											"begin": 588,
											"end": 788,
											"name": "DUP2",
											"source": 4
										},
										{
											"begin": 588,
											"end": 788,
											"name": "ADD",
											"source": 4
										},
										{
											"begin": 588,
											"end": 788,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 588,
											"end": 788,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "23"
										},
										{
											"begin": 588,
											"end": 788,
											"name": "SWAP2",
											"source": 4
										},
										{
											"begin": 588,
											"end": 788,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 588,
											"end": 788,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "24"
										},
										{
											"begin": 588,
											"end": 788,
											"name": "JUMP",
											"source": 4,
											"value": "[in]"
										},
										{
											"begin": 588,
											"end": 788,
											"name": "tag",
											"source": 4,
											"value": "23"
										},
										{
											"begin": 588,
											"end": 788,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 588,
											"end": 788,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "25"
										},
										{
											"begin": 588,
											"end": 788,
											"name": "JUMP",
											"source": 4,
											"value": "[in]"
										},
										{
											"begin": 588,
											"end": 788,
											"name": "tag",
											"source": 4,
											"value": "22"
										},
										{
											"begin": 588,
											"end": 788,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 588,
											"end": 788,
											"name": "PUSH",
											"source": 4,
											"value": "40"
										},
										{
											"begin": 588,
											"end": 788,
											"name": "MLOAD",
											"source": 4
										},
										{
											"begin": 588,
											"end": 788,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "26"
										},
										{
											"begin": 588,
											"end": 788,
											"name": "SWAP2",
											"source": 4
										},
										{
											"begin": 588,
											"end": 788,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 588,
											"end": 788,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "27"
										},
										{
											"begin": 588,
											"end": 788,
											"name": "JUMP",
											"source": 4,
											"value": "[in]"
										},
										{
											"begin": 588,
											"end": 788,
											"name": "tag",
											"source": 4,
											"value": "26"
										},
										{
											"begin": 588,
											"end": 788,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 588,
											"end": 788,
											"name": "PUSH",
											"source": 4,
											"value": "40"
										},
										{
											"begin": 588,
											"end": 788,
											"name": "MLOAD",
											"source": 4
										},
										{
											"begin": 588,
											"end": 788,
											"name": "DUP1",
											"source": 4
										},
										{
											"begin": 588,
											"end": 788,
											"name": "SWAP2",
											"source": 4
										},
										{
											"begin": 588,
											"end": 788,
											"name": "SUB",
											"source": 4
										},
										{
											"begin": 588,
											"end": 788,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 588,
											"end": 788,
											"name": "RETURN",
											"source": 4
										},
										{
											"begin": 1163,
											"end": 1458,
											"name": "tag",
											"source": 8,
											"value": "5"
										},
										{
											"begin": 1163,
											"end": 1458,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 1163,
											"end": 1458,
											"name": "CALLVALUE",
											"source": 8
										},
										{
											"begin": 1163,
											"end": 1458,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 1163,
											"end": 1458,
											"name": "ISZERO",
											"source": 8
										},
										{
											"begin": 1163,
											"end": 1458,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "28"
										},
										{
											"begin": 1163,
											"end": 1458,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 1163,
											"end": 1458,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 1163,
											"end": 1458,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 1163,
											"end": 1458,
											"name": "REVERT",
											"source": 8
										},
										{
											"begin": 1163,
											"end": 1458,
											"name": "tag",
											"source": 8,
											"value": "28"
										},
										{
											"begin": 1163,
											"end": 1458,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 1163,
											"end": 1458,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 1163,
											"end": 1458,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "29"
										},
										{
											"begin": 1163,
											"end": 1458,
											"name": "PUSH",
											"source": 8,
											"value": "4"
										},
										{
											"begin": 1163,
											"end": 1458,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 1163,
											"end": 1458,
											"name": "CALLDATASIZE",
											"source": 8
										},
										{
											"begin": 1163,
											"end": 1458,
											"name": "SUB",
											"source": 8
										},
										{
											"begin": 1163,
											"end": 1458,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 1163,
											"end": 1458,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 1163,
											"end": 1458,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 1163,
											"end": 1458,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "30"
										},
										{
											"begin": 1163,
											"end": 1458,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 1163,
											"end": 1458,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 1163,
											"end": 1458,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "31"
										},
										{
											"begin": 1163,
											"end": 1458,
											"name": "JUMP",
											"source": 8,
											"value": "[in]"
										},
										{
											"begin": 1163,
											"end": 1458,
											"name": "tag",
											"source": 8,
											"value": "30"
										},
										{
											"begin": 1163,
											"end": 1458,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 1163,
											"end": 1458,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "32"
										},
										{
											"begin": 1163,
											"end": 1458,
											"name": "JUMP",
											"source": 8,
											"value": "[in]"
										},
										{
											"begin": 1163,
											"end": 1458,
											"name": "tag",
											"source": 8,
											"value": "29"
										},
										{
											"begin": 1163,
											"end": 1458,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 1163,
											"end": 1458,
											"name": "STOP",
											"source": 8
										},
										{
											"begin": 1831,
											"end": 1932,
											"name": "tag",
											"source": 0,
											"value": "6"
										},
										{
											"begin": 1831,
											"end": 1932,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1831,
											"end": 1932,
											"name": "CALLVALUE",
											"source": 0
										},
										{
											"begin": 1831,
											"end": 1932,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 1831,
											"end": 1932,
											"name": "ISZERO",
											"source": 0
										},
										{
											"begin": 1831,
											"end": 1932,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "33"
										},
										{
											"begin": 1831,
											"end": 1932,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 1831,
											"end": 1932,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 1831,
											"end": 1932,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 1831,
											"end": 1932,
											"name": "REVERT",
											"source": 0
										},
										{
											"begin": 1831,
											"end": 1932,
											"name": "tag",
											"source": 0,
											"value": "33"
										},
										{
											"begin": 1831,
											"end": 1932,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1831,
											"end": 1932,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 1831,
											"end": 1932,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "34"
										},
										{
											"begin": 1831,
											"end": 1932,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "35"
										},
										{
											"begin": 1831,
											"end": 1932,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 1831,
											"end": 1932,
											"name": "tag",
											"source": 0,
											"value": "34"
										},
										{
											"begin": 1831,
											"end": 1932,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1831,
											"end": 1932,
											"name": "STOP",
											"source": 0
										},
										{
											"begin": 762,
											"end": 810,
											"name": "tag",
											"source": 8,
											"value": "7"
										},
										{
											"begin": 762,
											"end": 810,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 762,
											"end": 810,
											"name": "CALLVALUE",
											"source": 8
										},
										{
											"begin": 762,
											"end": 810,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 762,
											"end": 810,
											"name": "ISZERO",
											"source": 8
										},
										{
											"begin": 762,
											"end": 810,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "36"
										},
										{
											"begin": 762,
											"end": 810,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 762,
											"end": 810,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 762,
											"end": 810,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 762,
											"end": 810,
											"name": "REVERT",
											"source": 8
										},
										{
											"begin": 762,
											"end": 810,
											"name": "tag",
											"source": 8,
											"value": "36"
										},
										{
											"begin": 762,
											"end": 810,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 762,
											"end": 810,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 762,
											"end": 810,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "37"
										},
										{
											"begin": 762,
											"end": 810,
											"name": "PUSH",
											"source": 8,
											"value": "4"
										},
										{
											"begin": 762,
											"end": 810,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 762,
											"end": 810,
											"name": "CALLDATASIZE",
											"source": 8
										},
										{
											"begin": 762,
											"end": 810,
											"name": "SUB",
											"source": 8
										},
										{
											"begin": 762,
											"end": 810,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 762,
											"end": 810,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 762,
											"end": 810,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 762,
											"end": 810,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "38"
										},
										{
											"begin": 762,
											"end": 810,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 762,
											"end": 810,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 762,
											"end": 810,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "31"
										},
										{
											"begin": 762,
											"end": 810,
											"name": "JUMP",
											"source": 8,
											"value": "[in]"
										},
										{
											"begin": 762,
											"end": 810,
											"name": "tag",
											"source": 8,
											"value": "38"
										},
										{
											"begin": 762,
											"end": 810,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 762,
											"end": 810,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "39"
										},
										{
											"begin": 762,
											"end": 810,
											"name": "JUMP",
											"source": 8,
											"value": "[in]"
										},
										{
											"begin": 762,
											"end": 810,
											"name": "tag",
											"source": 8,
											"value": "37"
										},
										{
											"begin": 762,
											"end": 810,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 762,
											"end": 810,
											"name": "PUSH",
											"source": 8,
											"value": "40"
										},
										{
											"begin": 762,
											"end": 810,
											"name": "MLOAD",
											"source": 8
										},
										{
											"begin": 762,
											"end": 810,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "40"
										},
										{
											"begin": 762,
											"end": 810,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 762,
											"end": 810,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 762,
											"end": 810,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "41"
										},
										{
											"begin": 762,
											"end": 810,
											"name": "JUMP",
											"source": 8,
											"value": "[in]"
										},
										{
											"begin": 762,
											"end": 810,
											"name": "tag",
											"source": 8,
											"value": "40"
										},
										{
											"begin": 762,
											"end": 810,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 762,
											"end": 810,
											"name": "PUSH",
											"source": 8,
											"value": "40"
										},
										{
											"begin": 762,
											"end": 810,
											"name": "MLOAD",
											"source": 8
										},
										{
											"begin": 762,
											"end": 810,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 762,
											"end": 810,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 762,
											"end": 810,
											"name": "SUB",
											"source": 8
										},
										{
											"begin": 762,
											"end": 810,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 762,
											"end": 810,
											"name": "RETURN",
											"source": 8
										},
										{
											"begin": 1201,
											"end": 1286,
											"name": "tag",
											"source": 0,
											"value": "8"
										},
										{
											"begin": 1201,
											"end": 1286,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1201,
											"end": 1286,
											"name": "CALLVALUE",
											"source": 0
										},
										{
											"begin": 1201,
											"end": 1286,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 1201,
											"end": 1286,
											"name": "ISZERO",
											"source": 0
										},
										{
											"begin": 1201,
											"end": 1286,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "42"
										},
										{
											"begin": 1201,
											"end": 1286,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 1201,
											"end": 1286,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 1201,
											"end": 1286,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 1201,
											"end": 1286,
											"name": "REVERT",
											"source": 0
										},
										{
											"begin": 1201,
											"end": 1286,
											"name": "tag",
											"source": 0,
											"value": "42"
										},
										{
											"begin": 1201,
											"end": 1286,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1201,
											"end": 1286,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 1201,
											"end": 1286,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "43"
										},
										{
											"begin": 1201,
											"end": 1286,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "44"
										},
										{
											"begin": 1201,
											"end": 1286,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 1201,
											"end": 1286,
											"name": "tag",
											"source": 0,
											"value": "43"
										},
										{
											"begin": 1201,
											"end": 1286,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1201,
											"end": 1286,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 1201,
											"end": 1286,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 1201,
											"end": 1286,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "45"
										},
										{
											"begin": 1201,
											"end": 1286,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 1201,
											"end": 1286,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 1201,
											"end": 1286,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "41"
										},
										{
											"begin": 1201,
											"end": 1286,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 1201,
											"end": 1286,
											"name": "tag",
											"source": 0,
											"value": "45"
										},
										{
											"begin": 1201,
											"end": 1286,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1201,
											"end": 1286,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 1201,
											"end": 1286,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 1201,
											"end": 1286,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 1201,
											"end": 1286,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 1201,
											"end": 1286,
											"name": "SUB",
											"source": 0
										},
										{
											"begin": 1201,
											"end": 1286,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 1201,
											"end": 1286,
											"name": "RETURN",
											"source": 0
										},
										{
											"begin": 951,
											"end": 1157,
											"name": "tag",
											"source": 8,
											"value": "9"
										},
										{
											"begin": 951,
											"end": 1157,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 951,
											"end": 1157,
											"name": "CALLVALUE",
											"source": 8
										},
										{
											"begin": 951,
											"end": 1157,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 951,
											"end": 1157,
											"name": "ISZERO",
											"source": 8
										},
										{
											"begin": 951,
											"end": 1157,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "46"
										},
										{
											"begin": 951,
											"end": 1157,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 951,
											"end": 1157,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 951,
											"end": 1157,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 951,
											"end": 1157,
											"name": "REVERT",
											"source": 8
										},
										{
											"begin": 951,
											"end": 1157,
											"name": "tag",
											"source": 8,
											"value": "46"
										},
										{
											"begin": 951,
											"end": 1157,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 951,
											"end": 1157,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 951,
											"end": 1157,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "47"
										},
										{
											"begin": 951,
											"end": 1157,
											"name": "PUSH",
											"source": 8,
											"value": "4"
										},
										{
											"begin": 951,
											"end": 1157,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 951,
											"end": 1157,
											"name": "CALLDATASIZE",
											"source": 8
										},
										{
											"begin": 951,
											"end": 1157,
											"name": "SUB",
											"source": 8
										},
										{
											"begin": 951,
											"end": 1157,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 951,
											"end": 1157,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 951,
											"end": 1157,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 951,
											"end": 1157,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "48"
										},
										{
											"begin": 951,
											"end": 1157,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 951,
											"end": 1157,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 951,
											"end": 1157,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "31"
										},
										{
											"begin": 951,
											"end": 1157,
											"name": "JUMP",
											"source": 8,
											"value": "[in]"
										},
										{
											"begin": 951,
											"end": 1157,
											"name": "tag",
											"source": 8,
											"value": "48"
										},
										{
											"begin": 951,
											"end": 1157,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 951,
											"end": 1157,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "49"
										},
										{
											"begin": 951,
											"end": 1157,
											"name": "JUMP",
											"source": 8,
											"value": "[in]"
										},
										{
											"begin": 951,
											"end": 1157,
											"name": "tag",
											"source": 8,
											"value": "47"
										},
										{
											"begin": 951,
											"end": 1157,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 951,
											"end": 1157,
											"name": "STOP",
											"source": 8
										},
										{
											"begin": 2081,
											"end": 2279,
											"name": "tag",
											"source": 0,
											"value": "10"
										},
										{
											"begin": 2081,
											"end": 2279,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 2081,
											"end": 2279,
											"name": "CALLVALUE",
											"source": 0
										},
										{
											"begin": 2081,
											"end": 2279,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 2081,
											"end": 2279,
											"name": "ISZERO",
											"source": 0
										},
										{
											"begin": 2081,
											"end": 2279,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "50"
										},
										{
											"begin": 2081,
											"end": 2279,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 2081,
											"end": 2279,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 2081,
											"end": 2279,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 2081,
											"end": 2279,
											"name": "REVERT",
											"source": 0
										},
										{
											"begin": 2081,
											"end": 2279,
											"name": "tag",
											"source": 0,
											"value": "50"
										},
										{
											"begin": 2081,
											"end": 2279,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 2081,
											"end": 2279,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 2081,
											"end": 2279,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "51"
										},
										{
											"begin": 2081,
											"end": 2279,
											"name": "PUSH",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 2081,
											"end": 2279,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 2081,
											"end": 2279,
											"name": "CALLDATASIZE",
											"source": 0
										},
										{
											"begin": 2081,
											"end": 2279,
											"name": "SUB",
											"source": 0
										},
										{
											"begin": 2081,
											"end": 2279,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 2081,
											"end": 2279,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 2081,
											"end": 2279,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 2081,
											"end": 2279,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "52"
										},
										{
											"begin": 2081,
											"end": 2279,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 2081,
											"end": 2279,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 2081,
											"end": 2279,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "17"
										},
										{
											"begin": 2081,
											"end": 2279,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 2081,
											"end": 2279,
											"name": "tag",
											"source": 0,
											"value": "52"
										},
										{
											"begin": 2081,
											"end": 2279,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 2081,
											"end": 2279,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "53"
										},
										{
											"begin": 2081,
											"end": 2279,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 2081,
											"end": 2279,
											"name": "tag",
											"source": 0,
											"value": "51"
										},
										{
											"begin": 2081,
											"end": 2279,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 2081,
											"end": 2279,
											"name": "STOP",
											"source": 0
										},
										{
											"begin": 816,
											"end": 859,
											"name": "tag",
											"source": 8,
											"value": "18"
										},
										{
											"begin": 816,
											"end": 859,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 816,
											"end": 859,
											"name": "PUSH",
											"source": 8,
											"value": "5"
										},
										{
											"begin": 816,
											"end": 859,
											"name": "PUSH",
											"source": 8,
											"value": "20"
										},
										{
											"begin": 816,
											"end": 859,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 816,
											"end": 859,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 816,
											"end": 859,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 816,
											"end": 859,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 816,
											"end": 859,
											"name": "PUSH",
											"source": 8,
											"value": "40"
										},
										{
											"begin": 816,
											"end": 859,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 816,
											"end": 859,
											"name": "KECCAK256",
											"source": 8
										},
										{
											"begin": 816,
											"end": 859,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 816,
											"end": 859,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 816,
											"end": 859,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 816,
											"end": 859,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 816,
											"end": 859,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 816,
											"end": 859,
											"name": "SLOAD",
											"source": 8
										},
										{
											"begin": 816,
											"end": 859,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 816,
											"end": 859,
											"name": "JUMP",
											"source": 8,
											"value": "[out]"
										},
										{
											"begin": 588,
											"end": 788,
											"name": "tag",
											"source": 4,
											"value": "25"
										},
										{
											"begin": 588,
											"end": 788,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 726,
											"end": 732,
											"name": "PUSH",
											"source": 4,
											"value": "0"
										},
										{
											"begin": 751,
											"end": 781,
											"name": "PUSH",
											"source": 4,
											"value": "150B7A02"
										},
										{
											"begin": 751,
											"end": 781,
											"name": "PUSH",
											"source": 4,
											"value": "E0"
										},
										{
											"begin": 751,
											"end": 781,
											"name": "SHL",
											"source": 4
										},
										{
											"begin": 744,
											"end": 781,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 744,
											"end": 781,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 588,
											"end": 788,
											"name": "SWAP5",
											"source": 4
										},
										{
											"begin": 588,
											"end": 788,
											"name": "SWAP4",
											"source": 4
										},
										{
											"begin": 588,
											"end": 788,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 588,
											"end": 788,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 588,
											"end": 788,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 588,
											"end": 788,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 588,
											"end": 788,
											"name": "JUMP",
											"source": 4,
											"value": "[out]"
										},
										{
											"begin": 1163,
											"end": 1458,
											"name": "tag",
											"source": 8,
											"value": "32"
										},
										{
											"begin": 1163,
											"end": 1458,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 1744,
											"end": 1745,
											"name": "PUSH",
											"source": 1,
											"value": "2"
										},
										{
											"begin": 2325,
											"end": 2332,
											"name": "PUSH",
											"source": 1,
											"value": "1"
										},
										{
											"begin": 2325,
											"end": 2332,
											"name": "SLOAD",
											"source": 1
										},
										{
											"begin": 2325,
											"end": 2344,
											"name": "EQ",
											"source": 1
										},
										{
											"begin": 2325,
											"end": 2344,
											"name": "ISZERO",
											"source": 1
										},
										{
											"begin": 2317,
											"end": 2380,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "56"
										},
										{
											"begin": 2317,
											"end": 2380,
											"name": "JUMPI",
											"source": 1
										},
										{
											"begin": 2317,
											"end": 2380,
											"name": "PUSH",
											"source": 1,
											"value": "40"
										},
										{
											"begin": 2317,
											"end": 2380,
											"name": "MLOAD",
											"source": 1
										},
										{
											"begin": 2317,
											"end": 2380,
											"name": "PUSH",
											"source": 1,
											"value": "8C379A000000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 2317,
											"end": 2380,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 2317,
											"end": 2380,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 2317,
											"end": 2380,
											"name": "PUSH",
											"source": 1,
											"value": "4"
										},
										{
											"begin": 2317,
											"end": 2380,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 2317,
											"end": 2380,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "57"
										},
										{
											"begin": 2317,
											"end": 2380,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 2317,
											"end": 2380,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "58"
										},
										{
											"begin": 2317,
											"end": 2380,
											"name": "JUMP",
											"source": 1,
											"value": "[in]"
										},
										{
											"begin": 2317,
											"end": 2380,
											"name": "tag",
											"source": 1,
											"value": "57"
										},
										{
											"begin": 2317,
											"end": 2380,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 2317,
											"end": 2380,
											"name": "PUSH",
											"source": 1,
											"value": "40"
										},
										{
											"begin": 2317,
											"end": 2380,
											"name": "MLOAD",
											"source": 1
										},
										{
											"begin": 2317,
											"end": 2380,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 2317,
											"end": 2380,
											"name": "SWAP2",
											"source": 1
										},
										{
											"begin": 2317,
											"end": 2380,
											"name": "SUB",
											"source": 1
										},
										{
											"begin": 2317,
											"end": 2380,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 2317,
											"end": 2380,
											"name": "REVERT",
											"source": 1
										},
										{
											"begin": 2317,
											"end": 2380,
											"name": "tag",
											"source": 1,
											"value": "56"
										},
										{
											"begin": 2317,
											"end": 2380,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 1744,
											"end": 1745,
											"name": "PUSH",
											"source": 1,
											"value": "2"
										},
										{
											"begin": 2455,
											"end": 2462,
											"name": "PUSH",
											"source": 1,
											"value": "1"
										},
										{
											"begin": 2455,
											"end": 2473,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 2455,
											"end": 2473,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 2455,
											"end": 2473,
											"name": "SSTORE",
											"source": 1
										},
										{
											"begin": 2455,
											"end": 2473,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 1262,
											"end": 1272,
											"name": "CALLER",
											"source": 8
										},
										{
											"begin": 1237,
											"end": 1272,
											"name": "PUSH",
											"source": 8,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 1237,
											"end": 1272,
											"name": "AND",
											"source": 8
										},
										{
											"begin": 1237,
											"end": 1249,
											"name": "PUSH",
											"source": 8,
											"value": "4"
										},
										{
											"begin": 1237,
											"end": 1258,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 1250,
											"end": 1257,
											"name": "DUP4",
											"source": 8
										},
										{
											"begin": 1237,
											"end": 1258,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 1237,
											"end": 1258,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 1237,
											"end": 1258,
											"name": "PUSH",
											"source": 8,
											"value": "20"
										},
										{
											"begin": 1237,
											"end": 1258,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 1237,
											"end": 1258,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 1237,
											"end": 1258,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 1237,
											"end": 1258,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 1237,
											"end": 1258,
											"name": "PUSH",
											"source": 8,
											"value": "20"
										},
										{
											"begin": 1237,
											"end": 1258,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 1237,
											"end": 1258,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 1237,
											"end": 1258,
											"name": "KECCAK256",
											"source": 8
										},
										{
											"begin": 1237,
											"end": 1258,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 1237,
											"end": 1258,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 1237,
											"end": 1258,
											"name": "SLOAD",
											"source": 8
										},
										{
											"begin": 1237,
											"end": 1258,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 1237,
											"end": 1258,
											"name": "PUSH",
											"source": 8,
											"value": "100"
										},
										{
											"begin": 1237,
											"end": 1258,
											"name": "EXP",
											"source": 8
										},
										{
											"begin": 1237,
											"end": 1258,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 1237,
											"end": 1258,
											"name": "DIV",
											"source": 8
										},
										{
											"begin": 1237,
											"end": 1258,
											"name": "PUSH",
											"source": 8,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 1237,
											"end": 1258,
											"name": "AND",
											"source": 8
										},
										{
											"begin": 1237,
											"end": 1272,
											"name": "PUSH",
											"source": 8,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 1237,
											"end": 1272,
											"name": "AND",
											"source": 8
										},
										{
											"begin": 1237,
											"end": 1272,
											"name": "EQ",
											"source": 8
										},
										{
											"begin": 1229,
											"end": 1299,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "60"
										},
										{
											"begin": 1229,
											"end": 1299,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 1229,
											"end": 1299,
											"name": "PUSH",
											"source": 8,
											"value": "40"
										},
										{
											"begin": 1229,
											"end": 1299,
											"name": "MLOAD",
											"source": 8
										},
										{
											"begin": 1229,
											"end": 1299,
											"name": "PUSH",
											"source": 8,
											"value": "8C379A000000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 1229,
											"end": 1299,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 1229,
											"end": 1299,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 1229,
											"end": 1299,
											"name": "PUSH",
											"source": 8,
											"value": "4"
										},
										{
											"begin": 1229,
											"end": 1299,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 1229,
											"end": 1299,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "61"
										},
										{
											"begin": 1229,
											"end": 1299,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 1229,
											"end": 1299,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "62"
										},
										{
											"begin": 1229,
											"end": 1299,
											"name": "JUMP",
											"source": 8,
											"value": "[in]"
										},
										{
											"begin": 1229,
											"end": 1299,
											"name": "tag",
											"source": 8,
											"value": "61"
										},
										{
											"begin": 1229,
											"end": 1299,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 1229,
											"end": 1299,
											"name": "PUSH",
											"source": 8,
											"value": "40"
										},
										{
											"begin": 1229,
											"end": 1299,
											"name": "MLOAD",
											"source": 8
										},
										{
											"begin": 1229,
											"end": 1299,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 1229,
											"end": 1299,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 1229,
											"end": 1299,
											"name": "SUB",
											"source": 8
										},
										{
											"begin": 1229,
											"end": 1299,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 1229,
											"end": 1299,
											"name": "REVERT",
											"source": 8
										},
										{
											"begin": 1229,
											"end": 1299,
											"name": "tag",
											"source": 8,
											"value": "60"
										},
										{
											"begin": 1229,
											"end": 1299,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 1316,
											"end": 1328,
											"name": "PUSH",
											"source": 8,
											"value": "4"
										},
										{
											"begin": 1316,
											"end": 1337,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 1329,
											"end": 1336,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 1316,
											"end": 1337,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 1316,
											"end": 1337,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 1316,
											"end": 1337,
											"name": "PUSH",
											"source": 8,
											"value": "20"
										},
										{
											"begin": 1316,
											"end": 1337,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 1316,
											"end": 1337,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 1316,
											"end": 1337,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 1316,
											"end": 1337,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 1316,
											"end": 1337,
											"name": "PUSH",
											"source": 8,
											"value": "20"
										},
										{
											"begin": 1316,
											"end": 1337,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 1316,
											"end": 1337,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 1316,
											"end": 1337,
											"name": "KECCAK256",
											"source": 8
										},
										{
											"begin": 1316,
											"end": 1337,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 1309,
											"end": 1337,
											"name": "PUSH",
											"source": 8,
											"value": "100"
										},
										{
											"begin": 1309,
											"end": 1337,
											"name": "EXP",
											"source": 8
										},
										{
											"begin": 1309,
											"end": 1337,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 1309,
											"end": 1337,
											"name": "SLOAD",
											"source": 8
										},
										{
											"begin": 1309,
											"end": 1337,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 1309,
											"end": 1337,
											"name": "PUSH",
											"source": 8,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 1309,
											"end": 1337,
											"name": "MUL",
											"source": 8
										},
										{
											"begin": 1309,
											"end": 1337,
											"name": "NOT",
											"source": 8
										},
										{
											"begin": 1309,
											"end": 1337,
											"name": "AND",
											"source": 8
										},
										{
											"begin": 1309,
											"end": 1337,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 1309,
											"end": 1337,
											"name": "SSTORE",
											"source": 8
										},
										{
											"begin": 1347,
											"end": 1376,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "63"
										},
										{
											"begin": 1347,
											"end": 1364,
											"name": "PUSH",
											"source": 8,
											"value": "3"
										},
										{
											"begin": 1347,
											"end": 1374,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "64"
										},
										{
											"begin": 1347,
											"end": 1376,
											"name": "JUMP",
											"source": 8,
											"value": "[in]"
										},
										{
											"begin": 1347,
											"end": 1376,
											"name": "tag",
											"source": 8,
											"value": "63"
										},
										{
											"begin": 1347,
											"end": 1376,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 1386,
											"end": 1398,
											"name": "PUSH",
											"source": 8,
											"value": "2"
										},
										{
											"begin": 1386,
											"end": 1398,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 1386,
											"end": 1398,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 1386,
											"end": 1398,
											"name": "SLOAD",
											"source": 8
										},
										{
											"begin": 1386,
											"end": 1398,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 1386,
											"end": 1398,
											"name": "PUSH",
											"source": 8,
											"value": "100"
										},
										{
											"begin": 1386,
											"end": 1398,
											"name": "EXP",
											"source": 8
										},
										{
											"begin": 1386,
											"end": 1398,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 1386,
											"end": 1398,
											"name": "DIV",
											"source": 8
										},
										{
											"begin": 1386,
											"end": 1398,
											"name": "PUSH",
											"source": 8,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 1386,
											"end": 1398,
											"name": "AND",
											"source": 8
										},
										{
											"begin": 1386,
											"end": 1415,
											"name": "PUSH",
											"source": 8,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 1386,
											"end": 1415,
											"name": "AND",
											"source": 8
										},
										{
											"begin": 1386,
											"end": 1415,
											"name": "PUSH",
											"source": 8,
											"value": "42842E0E"
										},
										{
											"begin": 1424,
											"end": 1428,
											"name": "ADDRESS",
											"source": 8
										},
										{
											"begin": 1431,
											"end": 1441,
											"name": "CALLER",
											"source": 8
										},
										{
											"begin": 1443,
											"end": 1450,
											"name": "DUP5",
											"source": 8
										},
										{
											"begin": 1386,
											"end": 1451,
											"name": "PUSH",
											"source": 8,
											"value": "40"
										},
										{
											"begin": 1386,
											"end": 1451,
											"name": "MLOAD",
											"source": 8
										},
										{
											"begin": 1386,
											"end": 1451,
											"name": "DUP5",
											"source": 8
										},
										{
											"begin": 1386,
											"end": 1451,
											"name": "PUSH",
											"source": 8,
											"value": "FFFFFFFF"
										},
										{
											"begin": 1386,
											"end": 1451,
											"name": "AND",
											"source": 8
										},
										{
											"begin": 1386,
											"end": 1451,
											"name": "PUSH",
											"source": 8,
											"value": "E0"
										},
										{
											"begin": 1386,
											"end": 1451,
											"name": "SHL",
											"source": 8
										},
										{
											"begin": 1386,
											"end": 1451,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 1386,
											"end": 1451,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 1386,
											"end": 1451,
											"name": "PUSH",
											"source": 8,
											"value": "4"
										},
										{
											"begin": 1386,
											"end": 1451,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 1386,
											"end": 1451,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "65"
										},
										{
											"begin": 1386,
											"end": 1451,
											"name": "SWAP4",
											"source": 8
										},
										{
											"begin": 1386,
											"end": 1451,
											"name": "SWAP3",
											"source": 8
										},
										{
											"begin": 1386,
											"end": 1451,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 1386,
											"end": 1451,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 1386,
											"end": 1451,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "66"
										},
										{
											"begin": 1386,
											"end": 1451,
											"name": "JUMP",
											"source": 8,
											"value": "[in]"
										},
										{
											"begin": 1386,
											"end": 1451,
											"name": "tag",
											"source": 8,
											"value": "65"
										},
										{
											"begin": 1386,
											"end": 1451,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 1386,
											"end": 1451,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 1386,
											"end": 1451,
											"name": "PUSH",
											"source": 8,
											"value": "40"
										},
										{
											"begin": 1386,
											"end": 1451,
											"name": "MLOAD",
											"source": 8
										},
										{
											"begin": 1386,
											"end": 1451,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 1386,
											"end": 1451,
											"name": "DUP4",
											"source": 8
										},
										{
											"begin": 1386,
											"end": 1451,
											"name": "SUB",
											"source": 8
										},
										{
											"begin": 1386,
											"end": 1451,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 1386,
											"end": 1451,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 1386,
											"end": 1451,
											"name": "DUP8",
											"source": 8
										},
										{
											"begin": 1386,
											"end": 1451,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 1386,
											"end": 1451,
											"name": "EXTCODESIZE",
											"source": 8
										},
										{
											"begin": 1386,
											"end": 1451,
											"name": "ISZERO",
											"source": 8
										},
										{
											"begin": 1386,
											"end": 1451,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 1386,
											"end": 1451,
											"name": "ISZERO",
											"source": 8
										},
										{
											"begin": 1386,
											"end": 1451,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "67"
										},
										{
											"begin": 1386,
											"end": 1451,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 1386,
											"end": 1451,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 1386,
											"end": 1451,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 1386,
											"end": 1451,
											"name": "REVERT",
											"source": 8
										},
										{
											"begin": 1386,
											"end": 1451,
											"name": "tag",
											"source": 8,
											"value": "67"
										},
										{
											"begin": 1386,
											"end": 1451,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 1386,
											"end": 1451,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 1386,
											"end": 1451,
											"name": "GAS",
											"source": 8
										},
										{
											"begin": 1386,
											"end": 1451,
											"name": "CALL",
											"source": 8
										},
										{
											"begin": 1386,
											"end": 1451,
											"name": "ISZERO",
											"source": 8
										},
										{
											"begin": 1386,
											"end": 1451,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 1386,
											"end": 1451,
											"name": "ISZERO",
											"source": 8
										},
										{
											"begin": 1386,
											"end": 1451,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "69"
										},
										{
											"begin": 1386,
											"end": 1451,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 1386,
											"end": 1451,
											"name": "RETURNDATASIZE",
											"source": 8
										},
										{
											"begin": 1386,
											"end": 1451,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 1386,
											"end": 1451,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 1386,
											"end": 1451,
											"name": "RETURNDATACOPY",
											"source": 8
										},
										{
											"begin": 1386,
											"end": 1451,
											"name": "RETURNDATASIZE",
											"source": 8
										},
										{
											"begin": 1386,
											"end": 1451,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 1386,
											"end": 1451,
											"name": "REVERT",
											"source": 8
										},
										{
											"begin": 1386,
											"end": 1451,
											"name": "tag",
											"source": 8,
											"value": "69"
										},
										{
											"begin": 1386,
											"end": 1451,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 1386,
											"end": 1451,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 1386,
											"end": 1451,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 1386,
											"end": 1451,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 1386,
											"end": 1451,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 1701,
											"end": 1702,
											"name": "PUSH",
											"source": 1,
											"value": "1"
										},
										{
											"begin": 2628,
											"end": 2635,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 2628,
											"end": 2650,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 2628,
											"end": 2650,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 2628,
											"end": 2650,
											"name": "SSTORE",
											"source": 1
										},
										{
											"begin": 2628,
											"end": 2650,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 1163,
											"end": 1458,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 1163,
											"end": 1458,
											"name": "JUMP",
											"source": 8,
											"value": "[out]"
										},
										{
											"begin": 1831,
											"end": 1932,
											"name": "tag",
											"source": 0,
											"value": "35"
										},
										{
											"begin": 1831,
											"end": 1932,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1094,
											"end": 1107,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "71"
										},
										{
											"begin": 1094,
											"end": 1105,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "72"
										},
										{
											"begin": 1094,
											"end": 1107,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 1094,
											"end": 1107,
											"name": "tag",
											"source": 0,
											"value": "71"
										},
										{
											"begin": 1094,
											"end": 1107,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1895,
											"end": 1925,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "74"
										},
										{
											"begin": 1922,
											"end": 1923,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 1895,
											"end": 1913,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "75"
										},
										{
											"begin": 1895,
											"end": 1925,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 1895,
											"end": 1925,
											"name": "tag",
											"source": 0,
											"value": "74"
										},
										{
											"begin": 1895,
											"end": 1925,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1831,
											"end": 1932,
											"name": "JUMP",
											"source": 0,
											"value": "[out]"
										},
										{
											"begin": 762,
											"end": 810,
											"name": "tag",
											"source": 8,
											"value": "39"
										},
										{
											"begin": 762,
											"end": 810,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 762,
											"end": 810,
											"name": "PUSH",
											"source": 8,
											"value": "4"
										},
										{
											"begin": 762,
											"end": 810,
											"name": "PUSH",
											"source": 8,
											"value": "20"
										},
										{
											"begin": 762,
											"end": 810,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 762,
											"end": 810,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 762,
											"end": 810,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 762,
											"end": 810,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 762,
											"end": 810,
											"name": "PUSH",
											"source": 8,
											"value": "40"
										},
										{
											"begin": 762,
											"end": 810,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 762,
											"end": 810,
											"name": "KECCAK256",
											"source": 8
										},
										{
											"begin": 762,
											"end": 810,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 762,
											"end": 810,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 762,
											"end": 810,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 762,
											"end": 810,
											"name": "SLOAD",
											"source": 8
										},
										{
											"begin": 762,
											"end": 810,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 762,
											"end": 810,
											"name": "PUSH",
											"source": 8,
											"value": "100"
										},
										{
											"begin": 762,
											"end": 810,
											"name": "EXP",
											"source": 8
										},
										{
											"begin": 762,
											"end": 810,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 762,
											"end": 810,
											"name": "DIV",
											"source": 8
										},
										{
											"begin": 762,
											"end": 810,
											"name": "PUSH",
											"source": 8,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 762,
											"end": 810,
											"name": "AND",
											"source": 8
										},
										{
											"begin": 762,
											"end": 810,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 762,
											"end": 810,
											"name": "JUMP",
											"source": 8,
											"value": "[out]"
										},
										{
											"begin": 1201,
											"end": 1286,
											"name": "tag",
											"source": 0,
											"value": "44"
										},
										{
											"begin": 1201,
											"end": 1286,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1247,
											"end": 1254,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 1273,
											"end": 1279,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 1273,
											"end": 1279,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 1273,
											"end": 1279,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 1273,
											"end": 1279,
											"name": "SLOAD",
											"source": 0
										},
										{
											"begin": 1273,
											"end": 1279,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 1273,
											"end": 1279,
											"name": "PUSH",
											"source": 0,
											"value": "100"
										},
										{
											"begin": 1273,
											"end": 1279,
											"name": "EXP",
											"source": 0
										},
										{
											"begin": 1273,
											"end": 1279,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 1273,
											"end": 1279,
											"name": "DIV",
											"source": 0
										},
										{
											"begin": 1273,
											"end": 1279,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 1273,
											"end": 1279,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 1266,
											"end": 1279,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 1266,
											"end": 1279,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 1201,
											"end": 1286,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 1201,
											"end": 1286,
											"name": "JUMP",
											"source": 0,
											"value": "[out]"
										},
										{
											"begin": 951,
											"end": 1157,
											"name": "tag",
											"source": 8,
											"value": "49"
										},
										{
											"begin": 951,
											"end": 1157,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 1002,
											"end": 1014,
											"name": "PUSH",
											"source": 8,
											"value": "2"
										},
										{
											"begin": 1002,
											"end": 1014,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 1002,
											"end": 1014,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 1002,
											"end": 1014,
											"name": "SLOAD",
											"source": 8
										},
										{
											"begin": 1002,
											"end": 1014,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 1002,
											"end": 1014,
											"name": "PUSH",
											"source": 8,
											"value": "100"
										},
										{
											"begin": 1002,
											"end": 1014,
											"name": "EXP",
											"source": 8
										},
										{
											"begin": 1002,
											"end": 1014,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 1002,
											"end": 1014,
											"name": "DIV",
											"source": 8
										},
										{
											"begin": 1002,
											"end": 1014,
											"name": "PUSH",
											"source": 8,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 1002,
											"end": 1014,
											"name": "AND",
											"source": 8
										},
										{
											"begin": 1002,
											"end": 1031,
											"name": "PUSH",
											"source": 8,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 1002,
											"end": 1031,
											"name": "AND",
											"source": 8
										},
										{
											"begin": 1002,
											"end": 1031,
											"name": "PUSH",
											"source": 8,
											"value": "42842E0E"
										},
										{
											"begin": 1032,
											"end": 1042,
											"name": "CALLER",
											"source": 8
										},
										{
											"begin": 1052,
											"end": 1056,
											"name": "ADDRESS",
											"source": 8
										},
										{
											"begin": 1059,
											"end": 1066,
											"name": "DUP5",
											"source": 8
										},
										{
											"begin": 1002,
											"end": 1067,
											"name": "PUSH",
											"source": 8,
											"value": "40"
										},
										{
											"begin": 1002,
											"end": 1067,
											"name": "MLOAD",
											"source": 8
										},
										{
											"begin": 1002,
											"end": 1067,
											"name": "DUP5",
											"source": 8
										},
										{
											"begin": 1002,
											"end": 1067,
											"name": "PUSH",
											"source": 8,
											"value": "FFFFFFFF"
										},
										{
											"begin": 1002,
											"end": 1067,
											"name": "AND",
											"source": 8
										},
										{
											"begin": 1002,
											"end": 1067,
											"name": "PUSH",
											"source": 8,
											"value": "E0"
										},
										{
											"begin": 1002,
											"end": 1067,
											"name": "SHL",
											"source": 8
										},
										{
											"begin": 1002,
											"end": 1067,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 1002,
											"end": 1067,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 1002,
											"end": 1067,
											"name": "PUSH",
											"source": 8,
											"value": "4"
										},
										{
											"begin": 1002,
											"end": 1067,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 1002,
											"end": 1067,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "78"
										},
										{
											"begin": 1002,
											"end": 1067,
											"name": "SWAP4",
											"source": 8
										},
										{
											"begin": 1002,
											"end": 1067,
											"name": "SWAP3",
											"source": 8
										},
										{
											"begin": 1002,
											"end": 1067,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 1002,
											"end": 1067,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 1002,
											"end": 1067,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "66"
										},
										{
											"begin": 1002,
											"end": 1067,
											"name": "JUMP",
											"source": 8,
											"value": "[in]"
										},
										{
											"begin": 1002,
											"end": 1067,
											"name": "tag",
											"source": 8,
											"value": "78"
										},
										{
											"begin": 1002,
											"end": 1067,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 1002,
											"end": 1067,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 1002,
											"end": 1067,
											"name": "PUSH",
											"source": 8,
											"value": "40"
										},
										{
											"begin": 1002,
											"end": 1067,
											"name": "MLOAD",
											"source": 8
										},
										{
											"begin": 1002,
											"end": 1067,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 1002,
											"end": 1067,
											"name": "DUP4",
											"source": 8
										},
										{
											"begin": 1002,
											"end": 1067,
											"name": "SUB",
											"source": 8
										},
										{
											"begin": 1002,
											"end": 1067,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 1002,
											"end": 1067,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 1002,
											"end": 1067,
											"name": "DUP8",
											"source": 8
										},
										{
											"begin": 1002,
											"end": 1067,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 1002,
											"end": 1067,
											"name": "EXTCODESIZE",
											"source": 8
										},
										{
											"begin": 1002,
											"end": 1067,
											"name": "ISZERO",
											"source": 8
										},
										{
											"begin": 1002,
											"end": 1067,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 1002,
											"end": 1067,
											"name": "ISZERO",
											"source": 8
										},
										{
											"begin": 1002,
											"end": 1067,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "79"
										},
										{
											"begin": 1002,
											"end": 1067,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 1002,
											"end": 1067,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 1002,
											"end": 1067,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 1002,
											"end": 1067,
											"name": "REVERT",
											"source": 8
										},
										{
											"begin": 1002,
											"end": 1067,
											"name": "tag",
											"source": 8,
											"value": "79"
										},
										{
											"begin": 1002,
											"end": 1067,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 1002,
											"end": 1067,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 1002,
											"end": 1067,
											"name": "GAS",
											"source": 8
										},
										{
											"begin": 1002,
											"end": 1067,
											"name": "CALL",
											"source": 8
										},
										{
											"begin": 1002,
											"end": 1067,
											"name": "ISZERO",
											"source": 8
										},
										{
											"begin": 1002,
											"end": 1067,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 1002,
											"end": 1067,
											"name": "ISZERO",
											"source": 8
										},
										{
											"begin": 1002,
											"end": 1067,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "81"
										},
										{
											"begin": 1002,
											"end": 1067,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 1002,
											"end": 1067,
											"name": "RETURNDATASIZE",
											"source": 8
										},
										{
											"begin": 1002,
											"end": 1067,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 1002,
											"end": 1067,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 1002,
											"end": 1067,
											"name": "RETURNDATACOPY",
											"source": 8
										},
										{
											"begin": 1002,
											"end": 1067,
											"name": "RETURNDATASIZE",
											"source": 8
										},
										{
											"begin": 1002,
											"end": 1067,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 1002,
											"end": 1067,
											"name": "REVERT",
											"source": 8
										},
										{
											"begin": 1002,
											"end": 1067,
											"name": "tag",
											"source": 8,
											"value": "81"
										},
										{
											"begin": 1002,
											"end": 1067,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 1002,
											"end": 1067,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 1002,
											"end": 1067,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 1002,
											"end": 1067,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 1002,
											"end": 1067,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 1101,
											"end": 1111,
											"name": "CALLER",
											"source": 8
										},
										{
											"begin": 1077,
											"end": 1089,
											"name": "PUSH",
											"source": 8,
											"value": "4"
										},
										{
											"begin": 1077,
											"end": 1098,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 1090,
											"end": 1097,
											"name": "DUP4",
											"source": 8
										},
										{
											"begin": 1077,
											"end": 1098,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 1077,
											"end": 1098,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 1077,
											"end": 1098,
											"name": "PUSH",
											"source": 8,
											"value": "20"
										},
										{
											"begin": 1077,
											"end": 1098,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 1077,
											"end": 1098,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 1077,
											"end": 1098,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 1077,
											"end": 1098,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 1077,
											"end": 1098,
											"name": "PUSH",
											"source": 8,
											"value": "20"
										},
										{
											"begin": 1077,
											"end": 1098,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 1077,
											"end": 1098,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 1077,
											"end": 1098,
											"name": "KECCAK256",
											"source": 8
										},
										{
											"begin": 1077,
											"end": 1098,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 1077,
											"end": 1111,
											"name": "PUSH",
											"source": 8,
											"value": "100"
										},
										{
											"begin": 1077,
											"end": 1111,
											"name": "EXP",
											"source": 8
										},
										{
											"begin": 1077,
											"end": 1111,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 1077,
											"end": 1111,
											"name": "SLOAD",
											"source": 8
										},
										{
											"begin": 1077,
											"end": 1111,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 1077,
											"end": 1111,
											"name": "PUSH",
											"source": 8,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 1077,
											"end": 1111,
											"name": "MUL",
											"source": 8
										},
										{
											"begin": 1077,
											"end": 1111,
											"name": "NOT",
											"source": 8
										},
										{
											"begin": 1077,
											"end": 1111,
											"name": "AND",
											"source": 8
										},
										{
											"begin": 1077,
											"end": 1111,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 1077,
											"end": 1111,
											"name": "DUP4",
											"source": 8
										},
										{
											"begin": 1077,
											"end": 1111,
											"name": "PUSH",
											"source": 8,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 1077,
											"end": 1111,
											"name": "AND",
											"source": 8
										},
										{
											"begin": 1077,
											"end": 1111,
											"name": "MUL",
											"source": 8
										},
										{
											"begin": 1077,
											"end": 1111,
											"name": "OR",
											"source": 8
										},
										{
											"begin": 1077,
											"end": 1111,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 1077,
											"end": 1111,
											"name": "SSTORE",
											"source": 8
										},
										{
											"begin": 1077,
											"end": 1111,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 1121,
											"end": 1150,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "82"
										},
										{
											"begin": 1121,
											"end": 1138,
											"name": "PUSH",
											"source": 8,
											"value": "3"
										},
										{
											"begin": 1121,
											"end": 1148,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "83"
										},
										{
											"begin": 1121,
											"end": 1150,
											"name": "JUMP",
											"source": 8,
											"value": "[in]"
										},
										{
											"begin": 1121,
											"end": 1150,
											"name": "tag",
											"source": 8,
											"value": "82"
										},
										{
											"begin": 1121,
											"end": 1150,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 951,
											"end": 1157,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 951,
											"end": 1157,
											"name": "JUMP",
											"source": 8,
											"value": "[out]"
										},
										{
											"begin": 2081,
											"end": 2279,
											"name": "tag",
											"source": 0,
											"value": "53"
										},
										{
											"begin": 2081,
											"end": 2279,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1094,
											"end": 1107,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "85"
										},
										{
											"begin": 1094,
											"end": 1105,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "72"
										},
										{
											"begin": 1094,
											"end": 1107,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 1094,
											"end": 1107,
											"name": "tag",
											"source": 0,
											"value": "85"
										},
										{
											"begin": 1094,
											"end": 1107,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 2189,
											"end": 2190,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 2169,
											"end": 2191,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 2169,
											"end": 2191,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 2169,
											"end": 2177,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 2169,
											"end": 2191,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 2169,
											"end": 2191,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 2169,
											"end": 2191,
											"name": "EQ",
											"source": 0
										},
										{
											"begin": 2169,
											"end": 2191,
											"name": "ISZERO",
											"source": 0
										},
										{
											"begin": 2161,
											"end": 2234,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "87"
										},
										{
											"begin": 2161,
											"end": 2234,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 2161,
											"end": 2234,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 2161,
											"end": 2234,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 2161,
											"end": 2234,
											"name": "PUSH",
											"source": 0,
											"value": "8C379A000000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 2161,
											"end": 2234,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 2161,
											"end": 2234,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 2161,
											"end": 2234,
											"name": "PUSH",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 2161,
											"end": 2234,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 2161,
											"end": 2234,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "88"
										},
										{
											"begin": 2161,
											"end": 2234,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 2161,
											"end": 2234,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "89"
										},
										{
											"begin": 2161,
											"end": 2234,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 2161,
											"end": 2234,
											"name": "tag",
											"source": 0,
											"value": "88"
										},
										{
											"begin": 2161,
											"end": 2234,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 2161,
											"end": 2234,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 2161,
											"end": 2234,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 2161,
											"end": 2234,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 2161,
											"end": 2234,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 2161,
											"end": 2234,
											"name": "SUB",
											"source": 0
										},
										{
											"begin": 2161,
											"end": 2234,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 2161,
											"end": 2234,
											"name": "REVERT",
											"source": 0
										},
										{
											"begin": 2161,
											"end": 2234,
											"name": "tag",
											"source": 0,
											"value": "87"
										},
										{
											"begin": 2161,
											"end": 2234,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 2244,
											"end": 2272,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "90"
										},
										{
											"begin": 2263,
											"end": 2271,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 2244,
											"end": 2262,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "75"
										},
										{
											"begin": 2244,
											"end": 2272,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 2244,
											"end": 2272,
											"name": "tag",
											"source": 0,
											"value": "90"
										},
										{
											"begin": 2244,
											"end": 2272,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 2081,
											"end": 2279,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 2081,
											"end": 2279,
											"name": "JUMP",
											"source": 0,
											"value": "[out]"
										},
										{
											"begin": 1074,
											"end": 1303,
											"name": "tag",
											"source": 6,
											"value": "64"
										},
										{
											"begin": 1074,
											"end": 1303,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 1137,
											"end": 1150,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 1153,
											"end": 1160,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 1153,
											"end": 1167,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 1153,
											"end": 1167,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 1153,
											"end": 1167,
											"name": "SLOAD",
											"source": 6
										},
										{
											"begin": 1137,
											"end": 1167,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 1137,
											"end": 1167,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 1193,
											"end": 1194,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 1185,
											"end": 1190,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 1185,
											"end": 1194,
											"name": "GT",
											"source": 6
										},
										{
											"begin": 1177,
											"end": 1226,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "92"
										},
										{
											"begin": 1177,
											"end": 1226,
											"name": "JUMPI",
											"source": 6
										},
										{
											"begin": 1177,
											"end": 1226,
											"name": "PUSH",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 1177,
											"end": 1226,
											"name": "MLOAD",
											"source": 6
										},
										{
											"begin": 1177,
											"end": 1226,
											"name": "PUSH",
											"source": 6,
											"value": "8C379A000000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 1177,
											"end": 1226,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 1177,
											"end": 1226,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 1177,
											"end": 1226,
											"name": "PUSH",
											"source": 6,
											"value": "4"
										},
										{
											"begin": 1177,
											"end": 1226,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 1177,
											"end": 1226,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "93"
										},
										{
											"begin": 1177,
											"end": 1226,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 1177,
											"end": 1226,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "94"
										},
										{
											"begin": 1177,
											"end": 1226,
											"name": "JUMP",
											"source": 6,
											"value": "[in]"
										},
										{
											"begin": 1177,
											"end": 1226,
											"name": "tag",
											"source": 6,
											"value": "93"
										},
										{
											"begin": 1177,
											"end": 1226,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 1177,
											"end": 1226,
											"name": "PUSH",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 1177,
											"end": 1226,
											"name": "MLOAD",
											"source": 6
										},
										{
											"begin": 1177,
											"end": 1226,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 1177,
											"end": 1226,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 1177,
											"end": 1226,
											"name": "SUB",
											"source": 6
										},
										{
											"begin": 1177,
											"end": 1226,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 1177,
											"end": 1226,
											"name": "REVERT",
											"source": 6
										},
										{
											"begin": 1177,
											"end": 1226,
											"name": "tag",
											"source": 6,
											"value": "92"
										},
										{
											"begin": 1177,
											"end": 1226,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 1285,
											"end": 1286,
											"name": "PUSH",
											"source": 6,
											"value": "1"
										},
										{
											"begin": 1277,
											"end": 1282,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 1277,
											"end": 1286,
											"name": "SUB",
											"source": 6
										},
										{
											"begin": 1260,
											"end": 1267,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 1260,
											"end": 1274,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 1260,
											"end": 1274,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 1260,
											"end": 1286,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 1260,
											"end": 1286,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 1260,
											"end": 1286,
											"name": "SSTORE",
											"source": 6
										},
										{
											"begin": 1260,
											"end": 1286,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 1127,
											"end": 1303,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 1074,
											"end": 1303,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 1074,
											"end": 1303,
											"name": "JUMP",
											"source": 6,
											"value": "[out]"
										},
										{
											"begin": 1359,
											"end": 1489,
											"name": "tag",
											"source": 0,
											"value": "72"
										},
										{
											"begin": 1359,
											"end": 1489,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1433,
											"end": 1445,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "96"
										},
										{
											"begin": 1433,
											"end": 1443,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "97"
										},
										{
											"begin": 1433,
											"end": 1445,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 1433,
											"end": 1445,
											"name": "tag",
											"source": 0,
											"value": "96"
										},
										{
											"begin": 1433,
											"end": 1445,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1422,
											"end": 1445,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 1422,
											"end": 1445,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 1422,
											"end": 1429,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "98"
										},
										{
											"begin": 1422,
											"end": 1427,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "44"
										},
										{
											"begin": 1422,
											"end": 1429,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 1422,
											"end": 1429,
											"name": "tag",
											"source": 0,
											"value": "98"
										},
										{
											"begin": 1422,
											"end": 1429,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1422,
											"end": 1445,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 1422,
											"end": 1445,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 1422,
											"end": 1445,
											"name": "EQ",
											"source": 0
										},
										{
											"begin": 1414,
											"end": 1482,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "99"
										},
										{
											"begin": 1414,
											"end": 1482,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 1414,
											"end": 1482,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 1414,
											"end": 1482,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 1414,
											"end": 1482,
											"name": "PUSH",
											"source": 0,
											"value": "8C379A000000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 1414,
											"end": 1482,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 1414,
											"end": 1482,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 1414,
											"end": 1482,
											"name": "PUSH",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 1414,
											"end": 1482,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 1414,
											"end": 1482,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "100"
										},
										{
											"begin": 1414,
											"end": 1482,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 1414,
											"end": 1482,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "101"
										},
										{
											"begin": 1414,
											"end": 1482,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 1414,
											"end": 1482,
											"name": "tag",
											"source": 0,
											"value": "100"
										},
										{
											"begin": 1414,
											"end": 1482,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1414,
											"end": 1482,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 1414,
											"end": 1482,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 1414,
											"end": 1482,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 1414,
											"end": 1482,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 1414,
											"end": 1482,
											"name": "SUB",
											"source": 0
										},
										{
											"begin": 1414,
											"end": 1482,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 1414,
											"end": 1482,
											"name": "REVERT",
											"source": 0
										},
										{
											"begin": 1414,
											"end": 1482,
											"name": "tag",
											"source": 0,
											"value": "99"
										},
										{
											"begin": 1414,
											"end": 1482,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1359,
											"end": 1489,
											"name": "JUMP",
											"source": 0,
											"value": "[out]"
										},
										{
											"begin": 2433,
											"end": 2620,
											"name": "tag",
											"source": 0,
											"value": "75"
										},
										{
											"begin": 2433,
											"end": 2620,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 2506,
											"end": 2522,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 2525,
											"end": 2531,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 2525,
											"end": 2531,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 2525,
											"end": 2531,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 2525,
											"end": 2531,
											"name": "SLOAD",
											"source": 0
										},
										{
											"begin": 2525,
											"end": 2531,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 2525,
											"end": 2531,
											"name": "PUSH",
											"source": 0,
											"value": "100"
										},
										{
											"begin": 2525,
											"end": 2531,
											"name": "EXP",
											"source": 0
										},
										{
											"begin": 2525,
											"end": 2531,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 2525,
											"end": 2531,
											"name": "DIV",
											"source": 0
										},
										{
											"begin": 2525,
											"end": 2531,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 2525,
											"end": 2531,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 2506,
											"end": 2531,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 2506,
											"end": 2531,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 2550,
											"end": 2558,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 2541,
											"end": 2547,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 2541,
											"end": 2547,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 2541,
											"end": 2558,
											"name": "PUSH",
											"source": 0,
											"value": "100"
										},
										{
											"begin": 2541,
											"end": 2558,
											"name": "EXP",
											"source": 0
										},
										{
											"begin": 2541,
											"end": 2558,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 2541,
											"end": 2558,
											"name": "SLOAD",
											"source": 0
										},
										{
											"begin": 2541,
											"end": 2558,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 2541,
											"end": 2558,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 2541,
											"end": 2558,
											"name": "MUL",
											"source": 0
										},
										{
											"begin": 2541,
											"end": 2558,
											"name": "NOT",
											"source": 0
										},
										{
											"begin": 2541,
											"end": 2558,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 2541,
											"end": 2558,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 2541,
											"end": 2558,
											"name": "DUP4",
											"source": 0
										},
										{
											"begin": 2541,
											"end": 2558,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 2541,
											"end": 2558,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 2541,
											"end": 2558,
											"name": "MUL",
											"source": 0
										},
										{
											"begin": 2541,
											"end": 2558,
											"name": "OR",
											"source": 0
										},
										{
											"begin": 2541,
											"end": 2558,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 2541,
											"end": 2558,
											"name": "SSTORE",
											"source": 0
										},
										{
											"begin": 2541,
											"end": 2558,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 2604,
											"end": 2612,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 2573,
											"end": 2613,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 2573,
											"end": 2613,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 2594,
											"end": 2602,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 2573,
											"end": 2613,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 2573,
											"end": 2613,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 2573,
											"end": 2613,
											"name": "PUSH",
											"source": 0,
											"value": "8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0"
										},
										{
											"begin": 2573,
											"end": 2613,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 2573,
											"end": 2613,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 2573,
											"end": 2613,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 2573,
											"end": 2613,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 2573,
											"end": 2613,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 2573,
											"end": 2613,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 2573,
											"end": 2613,
											"name": "SUB",
											"source": 0
										},
										{
											"begin": 2573,
											"end": 2613,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 2573,
											"end": 2613,
											"name": "LOG3",
											"source": 0
										},
										{
											"begin": 2496,
											"end": 2620,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 2433,
											"end": 2620,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 2433,
											"end": 2620,
											"name": "JUMP",
											"source": 0,
											"value": "[out]"
										},
										{
											"begin": 945,
											"end": 1068,
											"name": "tag",
											"source": 6,
											"value": "83"
										},
										{
											"begin": 945,
											"end": 1068,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 1050,
											"end": 1051,
											"name": "PUSH",
											"source": 6,
											"value": "1"
										},
										{
											"begin": 1032,
											"end": 1039,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 1032,
											"end": 1046,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 1032,
											"end": 1046,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 1032,
											"end": 1046,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 1032,
											"end": 1051,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 1032,
											"end": 1051,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 1032,
											"end": 1051,
											"name": "SLOAD",
											"source": 6
										},
										{
											"begin": 1032,
											"end": 1051,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 1032,
											"end": 1051,
											"name": "SWAP3",
											"source": 6
										},
										{
											"begin": 1032,
											"end": 1051,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 1032,
											"end": 1051,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 1032,
											"end": 1051,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 1032,
											"end": 1051,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 1032,
											"end": 1051,
											"name": "SSTORE",
											"source": 6
										},
										{
											"begin": 1032,
											"end": 1051,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 945,
											"end": 1068,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 945,
											"end": 1068,
											"name": "JUMP",
											"source": 6,
											"value": "[out]"
										},
										{
											"begin": 640,
											"end": 736,
											"name": "tag",
											"source": 5,
											"value": "97"
										},
										{
											"begin": 640,
											"end": 736,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 693,
											"end": 700,
											"name": "PUSH",
											"source": 5,
											"value": "0"
										},
										{
											"begin": 719,
											"end": 729,
											"name": "CALLER",
											"source": 5
										},
										{
											"begin": 712,
											"end": 729,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 712,
											"end": 729,
											"name": "POP",
											"source": 5
										},
										{
											"begin": 640,
											"end": 736,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 640,
											"end": 736,
											"name": "JUMP",
											"source": 5,
											"value": "[out]"
										},
										{
											"begin": 7,
											"end": 417,
											"name": "tag",
											"source": 9,
											"value": "106"
										},
										{
											"begin": 7,
											"end": 417,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 84,
											"end": 89,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 109,
											"end": 174,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "108"
										},
										{
											"begin": 125,
											"end": 173,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "109"
										},
										{
											"begin": 166,
											"end": 172,
											"name": "DUP5",
											"source": 9
										},
										{
											"begin": 125,
											"end": 173,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "110"
										},
										{
											"begin": 125,
											"end": 173,
											"name": "JUMP",
											"source": 9,
											"value": "[in]"
										},
										{
											"begin": 125,
											"end": 173,
											"name": "tag",
											"source": 9,
											"value": "109"
										},
										{
											"begin": 125,
											"end": 173,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 109,
											"end": 174,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "111"
										},
										{
											"begin": 109,
											"end": 174,
											"name": "JUMP",
											"source": 9,
											"value": "[in]"
										},
										{
											"begin": 109,
											"end": 174,
											"name": "tag",
											"source": 9,
											"value": "108"
										},
										{
											"begin": 109,
											"end": 174,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 100,
											"end": 174,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 100,
											"end": 174,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 197,
											"end": 203,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 190,
											"end": 195,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 183,
											"end": 204,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 235,
											"end": 239,
											"name": "PUSH",
											"source": 9,
											"value": "20"
										},
										{
											"begin": 228,
											"end": 233,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 224,
											"end": 240,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 273,
											"end": 276,
											"name": "DUP5",
											"source": 9
										},
										{
											"begin": 264,
											"end": 270,
											"name": "DUP5",
											"source": 9
										},
										{
											"begin": 259,
											"end": 262,
											"name": "DUP5",
											"source": 9
										},
										{
											"begin": 255,
											"end": 271,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 252,
											"end": 277,
											"name": "GT",
											"source": 9
										},
										{
											"begin": 249,
											"end": 361,
											"name": "ISZERO",
											"source": 9
										},
										{
											"begin": 249,
											"end": 361,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "112"
										},
										{
											"begin": 249,
											"end": 361,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 280,
											"end": 359,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "113"
										},
										{
											"begin": 280,
											"end": 359,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "114"
										},
										{
											"begin": 280,
											"end": 359,
											"name": "JUMP",
											"source": 9,
											"value": "[in]"
										},
										{
											"begin": 280,
											"end": 359,
											"name": "tag",
											"source": 9,
											"value": "113"
										},
										{
											"begin": 280,
											"end": 359,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 249,
											"end": 361,
											"name": "tag",
											"source": 9,
											"value": "112"
										},
										{
											"begin": 249,
											"end": 361,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 370,
											"end": 411,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "115"
										},
										{
											"begin": 404,
											"end": 410,
											"name": "DUP5",
											"source": 9
										},
										{
											"begin": 399,
											"end": 402,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 394,
											"end": 397,
											"name": "DUP6",
											"source": 9
										},
										{
											"begin": 370,
											"end": 411,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "116"
										},
										{
											"begin": 370,
											"end": 411,
											"name": "JUMP",
											"source": 9,
											"value": "[in]"
										},
										{
											"begin": 370,
											"end": 411,
											"name": "tag",
											"source": 9,
											"value": "115"
										},
										{
											"begin": 370,
											"end": 411,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 90,
											"end": 417,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 7,
											"end": 417,
											"name": "SWAP4",
											"source": 9
										},
										{
											"begin": 7,
											"end": 417,
											"name": "SWAP3",
											"source": 9
										},
										{
											"begin": 7,
											"end": 417,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 7,
											"end": 417,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 7,
											"end": 417,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 7,
											"end": 417,
											"name": "JUMP",
											"source": 9,
											"value": "[out]"
										},
										{
											"begin": 423,
											"end": 562,
											"name": "tag",
											"source": 9,
											"value": "117"
										},
										{
											"begin": 423,
											"end": 562,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 469,
											"end": 474,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 507,
											"end": 513,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 494,
											"end": 514,
											"name": "CALLDATALOAD",
											"source": 9
										},
										{
											"begin": 485,
											"end": 514,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 485,
											"end": 514,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 523,
											"end": 556,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "119"
										},
										{
											"begin": 550,
											"end": 555,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 523,
											"end": 556,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "120"
										},
										{
											"begin": 523,
											"end": 556,
											"name": "JUMP",
											"source": 9,
											"value": "[in]"
										},
										{
											"begin": 523,
											"end": 556,
											"name": "tag",
											"source": 9,
											"value": "119"
										},
										{
											"begin": 523,
											"end": 556,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 423,
											"end": 562,
											"name": "SWAP3",
											"source": 9
										},
										{
											"begin": 423,
											"end": 562,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 423,
											"end": 562,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 423,
											"end": 562,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 423,
											"end": 562,
											"name": "JUMP",
											"source": 9,
											"value": "[out]"
										},
										{
											"begin": 581,
											"end": 919,
											"name": "tag",
											"source": 9,
											"value": "121"
										},
										{
											"begin": 581,
											"end": 919,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 636,
											"end": 641,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 685,
											"end": 688,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 678,
											"end": 682,
											"name": "PUSH",
											"source": 9,
											"value": "1F"
										},
										{
											"begin": 670,
											"end": 676,
											"name": "DUP4",
											"source": 9
										},
										{
											"begin": 666,
											"end": 683,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 662,
											"end": 689,
											"name": "SLT",
											"source": 9
										},
										{
											"begin": 652,
											"end": 774,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "123"
										},
										{
											"begin": 652,
											"end": 774,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 693,
											"end": 772,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "124"
										},
										{
											"begin": 693,
											"end": 772,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "125"
										},
										{
											"begin": 693,
											"end": 772,
											"name": "JUMP",
											"source": 9,
											"value": "[in]"
										},
										{
											"begin": 693,
											"end": 772,
											"name": "tag",
											"source": 9,
											"value": "124"
										},
										{
											"begin": 693,
											"end": 772,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 652,
											"end": 774,
											"name": "tag",
											"source": 9,
											"value": "123"
										},
										{
											"begin": 652,
											"end": 774,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 810,
											"end": 816,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 797,
											"end": 817,
											"name": "CALLDATALOAD",
											"source": 9
										},
										{
											"begin": 835,
											"end": 913,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "126"
										},
										{
											"begin": 909,
											"end": 912,
											"name": "DUP5",
											"source": 9
										},
										{
											"begin": 901,
											"end": 907,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 894,
											"end": 898,
											"name": "PUSH",
											"source": 9,
											"value": "20"
										},
										{
											"begin": 886,
											"end": 892,
											"name": "DUP7",
											"source": 9
										},
										{
											"begin": 882,
											"end": 899,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 835,
											"end": 913,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "106"
										},
										{
											"begin": 835,
											"end": 913,
											"name": "JUMP",
											"source": 9,
											"value": "[in]"
										},
										{
											"begin": 835,
											"end": 913,
											"name": "tag",
											"source": 9,
											"value": "126"
										},
										{
											"begin": 835,
											"end": 913,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 826,
											"end": 913,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 826,
											"end": 913,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 642,
											"end": 919,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 581,
											"end": 919,
											"name": "SWAP3",
											"source": 9
										},
										{
											"begin": 581,
											"end": 919,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 581,
											"end": 919,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 581,
											"end": 919,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 581,
											"end": 919,
											"name": "JUMP",
											"source": 9,
											"value": "[out]"
										},
										{
											"begin": 925,
											"end": 1064,
											"name": "tag",
											"source": 9,
											"value": "127"
										},
										{
											"begin": 925,
											"end": 1064,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 971,
											"end": 976,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 1009,
											"end": 1015,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 996,
											"end": 1016,
											"name": "CALLDATALOAD",
											"source": 9
										},
										{
											"begin": 987,
											"end": 1016,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 987,
											"end": 1016,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 1025,
											"end": 1058,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "129"
										},
										{
											"begin": 1052,
											"end": 1057,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 1025,
											"end": 1058,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "130"
										},
										{
											"begin": 1025,
											"end": 1058,
											"name": "JUMP",
											"source": 9,
											"value": "[in]"
										},
										{
											"begin": 1025,
											"end": 1058,
											"name": "tag",
											"source": 9,
											"value": "129"
										},
										{
											"begin": 1025,
											"end": 1058,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 925,
											"end": 1064,
											"name": "SWAP3",
											"source": 9
										},
										{
											"begin": 925,
											"end": 1064,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 925,
											"end": 1064,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 925,
											"end": 1064,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 925,
											"end": 1064,
											"name": "JUMP",
											"source": 9,
											"value": "[out]"
										},
										{
											"begin": 1070,
											"end": 1399,
											"name": "tag",
											"source": 9,
											"value": "17"
										},
										{
											"begin": 1070,
											"end": 1399,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 1129,
											"end": 1135,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 1178,
											"end": 1180,
											"name": "PUSH",
											"source": 9,
											"value": "20"
										},
										{
											"begin": 1166,
											"end": 1175,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 1157,
											"end": 1164,
											"name": "DUP5",
											"source": 9
										},
										{
											"begin": 1153,
											"end": 1176,
											"name": "SUB",
											"source": 9
										},
										{
											"begin": 1149,
											"end": 1181,
											"name": "SLT",
											"source": 9
										},
										{
											"begin": 1146,
											"end": 1265,
											"name": "ISZERO",
											"source": 9
										},
										{
											"begin": 1146,
											"end": 1265,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "132"
										},
										{
											"begin": 1146,
											"end": 1265,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 1184,
											"end": 1263,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "133"
										},
										{
											"begin": 1184,
											"end": 1263,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "134"
										},
										{
											"begin": 1184,
											"end": 1263,
											"name": "JUMP",
											"source": 9,
											"value": "[in]"
										},
										{
											"begin": 1184,
											"end": 1263,
											"name": "tag",
											"source": 9,
											"value": "133"
										},
										{
											"begin": 1184,
											"end": 1263,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 1146,
											"end": 1265,
											"name": "tag",
											"source": 9,
											"value": "132"
										},
										{
											"begin": 1146,
											"end": 1265,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 1304,
											"end": 1305,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 1329,
											"end": 1382,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "135"
										},
										{
											"begin": 1374,
											"end": 1381,
											"name": "DUP5",
											"source": 9
										},
										{
											"begin": 1365,
											"end": 1371,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 1354,
											"end": 1363,
											"name": "DUP6",
											"source": 9
										},
										{
											"begin": 1350,
											"end": 1372,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 1329,
											"end": 1382,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "117"
										},
										{
											"begin": 1329,
											"end": 1382,
											"name": "JUMP",
											"source": 9,
											"value": "[in]"
										},
										{
											"begin": 1329,
											"end": 1382,
											"name": "tag",
											"source": 9,
											"value": "135"
										},
										{
											"begin": 1329,
											"end": 1382,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 1319,
											"end": 1382,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 1319,
											"end": 1382,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 1275,
											"end": 1392,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 1070,
											"end": 1399,
											"name": "SWAP3",
											"source": 9
										},
										{
											"begin": 1070,
											"end": 1399,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 1070,
											"end": 1399,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 1070,
											"end": 1399,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 1070,
											"end": 1399,
											"name": "JUMP",
											"source": 9,
											"value": "[out]"
										},
										{
											"begin": 1405,
											"end": 2348,
											"name": "tag",
											"source": 9,
											"value": "24"
										},
										{
											"begin": 1405,
											"end": 2348,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 1500,
											"end": 1506,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 1508,
											"end": 1514,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 1516,
											"end": 1522,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 1524,
											"end": 1530,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 1573,
											"end": 1576,
											"name": "PUSH",
											"source": 9,
											"value": "80"
										},
										{
											"begin": 1561,
											"end": 1570,
											"name": "DUP6",
											"source": 9
										},
										{
											"begin": 1552,
											"end": 1559,
											"name": "DUP8",
											"source": 9
										},
										{
											"begin": 1548,
											"end": 1571,
											"name": "SUB",
											"source": 9
										},
										{
											"begin": 1544,
											"end": 1577,
											"name": "SLT",
											"source": 9
										},
										{
											"begin": 1541,
											"end": 1661,
											"name": "ISZERO",
											"source": 9
										},
										{
											"begin": 1541,
											"end": 1661,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "137"
										},
										{
											"begin": 1541,
											"end": 1661,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 1580,
											"end": 1659,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "138"
										},
										{
											"begin": 1580,
											"end": 1659,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "134"
										},
										{
											"begin": 1580,
											"end": 1659,
											"name": "JUMP",
											"source": 9,
											"value": "[in]"
										},
										{
											"begin": 1580,
											"end": 1659,
											"name": "tag",
											"source": 9,
											"value": "138"
										},
										{
											"begin": 1580,
											"end": 1659,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 1541,
											"end": 1661,
											"name": "tag",
											"source": 9,
											"value": "137"
										},
										{
											"begin": 1541,
											"end": 1661,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 1700,
											"end": 1701,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 1725,
											"end": 1778,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "139"
										},
										{
											"begin": 1770,
											"end": 1777,
											"name": "DUP8",
											"source": 9
										},
										{
											"begin": 1761,
											"end": 1767,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 1750,
											"end": 1759,
											"name": "DUP9",
											"source": 9
										},
										{
											"begin": 1746,
											"end": 1768,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 1725,
											"end": 1778,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "117"
										},
										{
											"begin": 1725,
											"end": 1778,
											"name": "JUMP",
											"source": 9,
											"value": "[in]"
										},
										{
											"begin": 1725,
											"end": 1778,
											"name": "tag",
											"source": 9,
											"value": "139"
										},
										{
											"begin": 1725,
											"end": 1778,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 1715,
											"end": 1778,
											"name": "SWAP5",
											"source": 9
										},
										{
											"begin": 1715,
											"end": 1778,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 1671,
											"end": 1788,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 1827,
											"end": 1829,
											"name": "PUSH",
											"source": 9,
											"value": "20"
										},
										{
											"begin": 1853,
											"end": 1906,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "140"
										},
										{
											"begin": 1898,
											"end": 1905,
											"name": "DUP8",
											"source": 9
										},
										{
											"begin": 1889,
											"end": 1895,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 1878,
											"end": 1887,
											"name": "DUP9",
											"source": 9
										},
										{
											"begin": 1874,
											"end": 1896,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 1853,
											"end": 1906,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "117"
										},
										{
											"begin": 1853,
											"end": 1906,
											"name": "JUMP",
											"source": 9,
											"value": "[in]"
										},
										{
											"begin": 1853,
											"end": 1906,
											"name": "tag",
											"source": 9,
											"value": "140"
										},
										{
											"begin": 1853,
											"end": 1906,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 1843,
											"end": 1906,
											"name": "SWAP4",
											"source": 9
										},
										{
											"begin": 1843,
											"end": 1906,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 1798,
											"end": 1916,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 1955,
											"end": 1957,
											"name": "PUSH",
											"source": 9,
											"value": "40"
										},
										{
											"begin": 1981,
											"end": 2034,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "141"
										},
										{
											"begin": 2026,
											"end": 2033,
											"name": "DUP8",
											"source": 9
										},
										{
											"begin": 2017,
											"end": 2023,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 2006,
											"end": 2015,
											"name": "DUP9",
											"source": 9
										},
										{
											"begin": 2002,
											"end": 2024,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 1981,
											"end": 2034,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "127"
										},
										{
											"begin": 1981,
											"end": 2034,
											"name": "JUMP",
											"source": 9,
											"value": "[in]"
										},
										{
											"begin": 1981,
											"end": 2034,
											"name": "tag",
											"source": 9,
											"value": "141"
										},
										{
											"begin": 1981,
											"end": 2034,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 1971,
											"end": 2034,
											"name": "SWAP3",
											"source": 9
										},
										{
											"begin": 1971,
											"end": 2034,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 1926,
											"end": 2044,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 2111,
											"end": 2113,
											"name": "PUSH",
											"source": 9,
											"value": "60"
										},
										{
											"begin": 2100,
											"end": 2109,
											"name": "DUP6",
											"source": 9
										},
										{
											"begin": 2096,
											"end": 2114,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 2083,
											"end": 2115,
											"name": "CALLDATALOAD",
											"source": 9
										},
										{
											"begin": 2142,
											"end": 2160,
											"name": "PUSH",
											"source": 9,
											"value": "FFFFFFFFFFFFFFFF"
										},
										{
											"begin": 2134,
											"end": 2140,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 2131,
											"end": 2161,
											"name": "GT",
											"source": 9
										},
										{
											"begin": 2128,
											"end": 2245,
											"name": "ISZERO",
											"source": 9
										},
										{
											"begin": 2128,
											"end": 2245,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "142"
										},
										{
											"begin": 2128,
											"end": 2245,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 2164,
											"end": 2243,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "143"
										},
										{
											"begin": 2164,
											"end": 2243,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "144"
										},
										{
											"begin": 2164,
											"end": 2243,
											"name": "JUMP",
											"source": 9,
											"value": "[in]"
										},
										{
											"begin": 2164,
											"end": 2243,
											"name": "tag",
											"source": 9,
											"value": "143"
										},
										{
											"begin": 2164,
											"end": 2243,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 2128,
											"end": 2245,
											"name": "tag",
											"source": 9,
											"value": "142"
										},
										{
											"begin": 2128,
											"end": 2245,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 2269,
											"end": 2331,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "145"
										},
										{
											"begin": 2323,
											"end": 2330,
											"name": "DUP8",
											"source": 9
										},
										{
											"begin": 2314,
											"end": 2320,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 2303,
											"end": 2312,
											"name": "DUP9",
											"source": 9
										},
										{
											"begin": 2299,
											"end": 2321,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 2269,
											"end": 2331,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "121"
										},
										{
											"begin": 2269,
											"end": 2331,
											"name": "JUMP",
											"source": 9,
											"value": "[in]"
										},
										{
											"begin": 2269,
											"end": 2331,
											"name": "tag",
											"source": 9,
											"value": "145"
										},
										{
											"begin": 2269,
											"end": 2331,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 2259,
											"end": 2331,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 2259,
											"end": 2331,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 2054,
											"end": 2341,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 1405,
											"end": 2348,
											"name": "SWAP3",
											"source": 9
										},
										{
											"begin": 1405,
											"end": 2348,
											"name": "SWAP6",
											"source": 9
										},
										{
											"begin": 1405,
											"end": 2348,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 1405,
											"end": 2348,
											"name": "SWAP5",
											"source": 9
										},
										{
											"begin": 1405,
											"end": 2348,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 1405,
											"end": 2348,
											"name": "SWAP3",
											"source": 9
										},
										{
											"begin": 1405,
											"end": 2348,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 1405,
											"end": 2348,
											"name": "JUMP",
											"source": 9,
											"value": "[out]"
										},
										{
											"begin": 2354,
											"end": 2683,
											"name": "tag",
											"source": 9,
											"value": "31"
										},
										{
											"begin": 2354,
											"end": 2683,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 2413,
											"end": 2419,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 2462,
											"end": 2464,
											"name": "PUSH",
											"source": 9,
											"value": "20"
										},
										{
											"begin": 2450,
											"end": 2459,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 2441,
											"end": 2448,
											"name": "DUP5",
											"source": 9
										},
										{
											"begin": 2437,
											"end": 2460,
											"name": "SUB",
											"source": 9
										},
										{
											"begin": 2433,
											"end": 2465,
											"name": "SLT",
											"source": 9
										},
										{
											"begin": 2430,
											"end": 2549,
											"name": "ISZERO",
											"source": 9
										},
										{
											"begin": 2430,
											"end": 2549,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "147"
										},
										{
											"begin": 2430,
											"end": 2549,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 2468,
											"end": 2547,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "148"
										},
										{
											"begin": 2468,
											"end": 2547,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "134"
										},
										{
											"begin": 2468,
											"end": 2547,
											"name": "JUMP",
											"source": 9,
											"value": "[in]"
										},
										{
											"begin": 2468,
											"end": 2547,
											"name": "tag",
											"source": 9,
											"value": "148"
										},
										{
											"begin": 2468,
											"end": 2547,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 2430,
											"end": 2549,
											"name": "tag",
											"source": 9,
											"value": "147"
										},
										{
											"begin": 2430,
											"end": 2549,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 2588,
											"end": 2589,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 2613,
											"end": 2666,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "149"
										},
										{
											"begin": 2658,
											"end": 2665,
											"name": "DUP5",
											"source": 9
										},
										{
											"begin": 2649,
											"end": 2655,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 2638,
											"end": 2647,
											"name": "DUP6",
											"source": 9
										},
										{
											"begin": 2634,
											"end": 2656,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 2613,
											"end": 2666,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "127"
										},
										{
											"begin": 2613,
											"end": 2666,
											"name": "JUMP",
											"source": 9,
											"value": "[in]"
										},
										{
											"begin": 2613,
											"end": 2666,
											"name": "tag",
											"source": 9,
											"value": "149"
										},
										{
											"begin": 2613,
											"end": 2666,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 2603,
											"end": 2666,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 2603,
											"end": 2666,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 2559,
											"end": 2676,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 2354,
											"end": 2683,
											"name": "SWAP3",
											"source": 9
										},
										{
											"begin": 2354,
											"end": 2683,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 2354,
											"end": 2683,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 2354,
											"end": 2683,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 2354,
											"end": 2683,
											"name": "JUMP",
											"source": 9,
											"value": "[out]"
										},
										{
											"begin": 2689,
											"end": 2807,
											"name": "tag",
											"source": 9,
											"value": "150"
										},
										{
											"begin": 2689,
											"end": 2807,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 2776,
											"end": 2800,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "152"
										},
										{
											"begin": 2794,
											"end": 2799,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 2776,
											"end": 2800,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "153"
										},
										{
											"begin": 2776,
											"end": 2800,
											"name": "JUMP",
											"source": 9,
											"value": "[in]"
										},
										{
											"begin": 2776,
											"end": 2800,
											"name": "tag",
											"source": 9,
											"value": "152"
										},
										{
											"begin": 2776,
											"end": 2800,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 2771,
											"end": 2774,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 2764,
											"end": 2801,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 2689,
											"end": 2807,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 2689,
											"end": 2807,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 2689,
											"end": 2807,
											"name": "JUMP",
											"source": 9,
											"value": "[out]"
										},
										{
											"begin": 2813,
											"end": 2928,
											"name": "tag",
											"source": 9,
											"value": "154"
										},
										{
											"begin": 2813,
											"end": 2928,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 2898,
											"end": 2921,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "156"
										},
										{
											"begin": 2915,
											"end": 2920,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 2898,
											"end": 2921,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "157"
										},
										{
											"begin": 2898,
											"end": 2921,
											"name": "JUMP",
											"source": 9,
											"value": "[in]"
										},
										{
											"begin": 2898,
											"end": 2921,
											"name": "tag",
											"source": 9,
											"value": "156"
										},
										{
											"begin": 2898,
											"end": 2921,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 2893,
											"end": 2896,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 2886,
											"end": 2922,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 2813,
											"end": 2928,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 2813,
											"end": 2928,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 2813,
											"end": 2928,
											"name": "JUMP",
											"source": 9,
											"value": "[out]"
										},
										{
											"begin": 2934,
											"end": 3300,
											"name": "tag",
											"source": 9,
											"value": "158"
										},
										{
											"begin": 2934,
											"end": 3300,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 3076,
											"end": 3079,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 3097,
											"end": 3164,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "160"
										},
										{
											"begin": 3161,
											"end": 3163,
											"name": "PUSH",
											"source": 9,
											"value": "1B"
										},
										{
											"begin": 3156,
											"end": 3159,
											"name": "DUP4",
											"source": 9
										},
										{
											"begin": 3097,
											"end": 3164,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "161"
										},
										{
											"begin": 3097,
											"end": 3164,
											"name": "JUMP",
											"source": 9,
											"value": "[in]"
										},
										{
											"begin": 3097,
											"end": 3164,
											"name": "tag",
											"source": 9,
											"value": "160"
										},
										{
											"begin": 3097,
											"end": 3164,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 3090,
											"end": 3164,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 3090,
											"end": 3164,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 3173,
											"end": 3266,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "162"
										},
										{
											"begin": 3262,
											"end": 3265,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 3173,
											"end": 3266,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "163"
										},
										{
											"begin": 3173,
											"end": 3266,
											"name": "JUMP",
											"source": 9,
											"value": "[in]"
										},
										{
											"begin": 3173,
											"end": 3266,
											"name": "tag",
											"source": 9,
											"value": "162"
										},
										{
											"begin": 3173,
											"end": 3266,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 3291,
											"end": 3293,
											"name": "PUSH",
											"source": 9,
											"value": "20"
										},
										{
											"begin": 3286,
											"end": 3289,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 3282,
											"end": 3294,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 3275,
											"end": 3294,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 3275,
											"end": 3294,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 2934,
											"end": 3300,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 2934,
											"end": 3300,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 2934,
											"end": 3300,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 2934,
											"end": 3300,
											"name": "JUMP",
											"source": 9,
											"value": "[out]"
										},
										{
											"begin": 3306,
											"end": 3672,
											"name": "tag",
											"source": 9,
											"value": "164"
										},
										{
											"begin": 3306,
											"end": 3672,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 3448,
											"end": 3451,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 3469,
											"end": 3536,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "166"
										},
										{
											"begin": 3533,
											"end": 3535,
											"name": "PUSH",
											"source": 9,
											"value": "26"
										},
										{
											"begin": 3528,
											"end": 3531,
											"name": "DUP4",
											"source": 9
										},
										{
											"begin": 3469,
											"end": 3536,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "161"
										},
										{
											"begin": 3469,
											"end": 3536,
											"name": "JUMP",
											"source": 9,
											"value": "[in]"
										},
										{
											"begin": 3469,
											"end": 3536,
											"name": "tag",
											"source": 9,
											"value": "166"
										},
										{
											"begin": 3469,
											"end": 3536,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 3462,
											"end": 3536,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 3462,
											"end": 3536,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 3545,
											"end": 3638,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "167"
										},
										{
											"begin": 3634,
											"end": 3637,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 3545,
											"end": 3638,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "168"
										},
										{
											"begin": 3545,
											"end": 3638,
											"name": "JUMP",
											"source": 9,
											"value": "[in]"
										},
										{
											"begin": 3545,
											"end": 3638,
											"name": "tag",
											"source": 9,
											"value": "167"
										},
										{
											"begin": 3545,
											"end": 3638,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 3663,
											"end": 3665,
											"name": "PUSH",
											"source": 9,
											"value": "40"
										},
										{
											"begin": 3658,
											"end": 3661,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 3654,
											"end": 3666,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 3647,
											"end": 3666,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 3647,
											"end": 3666,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 3306,
											"end": 3672,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 3306,
											"end": 3672,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 3306,
											"end": 3672,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 3306,
											"end": 3672,
											"name": "JUMP",
											"source": 9,
											"value": "[out]"
										},
										{
											"begin": 3678,
											"end": 4044,
											"name": "tag",
											"source": 9,
											"value": "169"
										},
										{
											"begin": 3678,
											"end": 4044,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 3820,
											"end": 3823,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 3841,
											"end": 3908,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "171"
										},
										{
											"begin": 3905,
											"end": 3907,
											"name": "PUSH",
											"source": 9,
											"value": "20"
										},
										{
											"begin": 3900,
											"end": 3903,
											"name": "DUP4",
											"source": 9
										},
										{
											"begin": 3841,
											"end": 3908,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "161"
										},
										{
											"begin": 3841,
											"end": 3908,
											"name": "JUMP",
											"source": 9,
											"value": "[in]"
										},
										{
											"begin": 3841,
											"end": 3908,
											"name": "tag",
											"source": 9,
											"value": "171"
										},
										{
											"begin": 3841,
											"end": 3908,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 3834,
											"end": 3908,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 3834,
											"end": 3908,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 3917,
											"end": 4010,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "172"
										},
										{
											"begin": 4006,
											"end": 4009,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 3917,
											"end": 4010,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "173"
										},
										{
											"begin": 3917,
											"end": 4010,
											"name": "JUMP",
											"source": 9,
											"value": "[in]"
										},
										{
											"begin": 3917,
											"end": 4010,
											"name": "tag",
											"source": 9,
											"value": "172"
										},
										{
											"begin": 3917,
											"end": 4010,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 4035,
											"end": 4037,
											"name": "PUSH",
											"source": 9,
											"value": "20"
										},
										{
											"begin": 4030,
											"end": 4033,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 4026,
											"end": 4038,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 4019,
											"end": 4038,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 4019,
											"end": 4038,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 3678,
											"end": 4044,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 3678,
											"end": 4044,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 3678,
											"end": 4044,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 3678,
											"end": 4044,
											"name": "JUMP",
											"source": 9,
											"value": "[out]"
										},
										{
											"begin": 4050,
											"end": 4416,
											"name": "tag",
											"source": 9,
											"value": "174"
										},
										{
											"begin": 4050,
											"end": 4416,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 4192,
											"end": 4195,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 4213,
											"end": 4280,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "176"
										},
										{
											"begin": 4277,
											"end": 4279,
											"name": "PUSH",
											"source": 9,
											"value": "16"
										},
										{
											"begin": 4272,
											"end": 4275,
											"name": "DUP4",
											"source": 9
										},
										{
											"begin": 4213,
											"end": 4280,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "161"
										},
										{
											"begin": 4213,
											"end": 4280,
											"name": "JUMP",
											"source": 9,
											"value": "[in]"
										},
										{
											"begin": 4213,
											"end": 4280,
											"name": "tag",
											"source": 9,
											"value": "176"
										},
										{
											"begin": 4213,
											"end": 4280,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 4206,
											"end": 4280,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 4206,
											"end": 4280,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 4289,
											"end": 4382,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "177"
										},
										{
											"begin": 4378,
											"end": 4381,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 4289,
											"end": 4382,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "178"
										},
										{
											"begin": 4289,
											"end": 4382,
											"name": "JUMP",
											"source": 9,
											"value": "[in]"
										},
										{
											"begin": 4289,
											"end": 4382,
											"name": "tag",
											"source": 9,
											"value": "177"
										},
										{
											"begin": 4289,
											"end": 4382,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 4407,
											"end": 4409,
											"name": "PUSH",
											"source": 9,
											"value": "20"
										},
										{
											"begin": 4402,
											"end": 4405,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 4398,
											"end": 4410,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 4391,
											"end": 4410,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 4391,
											"end": 4410,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 4050,
											"end": 4416,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 4050,
											"end": 4416,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 4050,
											"end": 4416,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 4050,
											"end": 4416,
											"name": "JUMP",
											"source": 9,
											"value": "[out]"
										},
										{
											"begin": 4422,
											"end": 4788,
											"name": "tag",
											"source": 9,
											"value": "179"
										},
										{
											"begin": 4422,
											"end": 4788,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 4564,
											"end": 4567,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 4585,
											"end": 4652,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "181"
										},
										{
											"begin": 4649,
											"end": 4651,
											"name": "PUSH",
											"source": 9,
											"value": "1F"
										},
										{
											"begin": 4644,
											"end": 4647,
											"name": "DUP4",
											"source": 9
										},
										{
											"begin": 4585,
											"end": 4652,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "161"
										},
										{
											"begin": 4585,
											"end": 4652,
											"name": "JUMP",
											"source": 9,
											"value": "[in]"
										},
										{
											"begin": 4585,
											"end": 4652,
											"name": "tag",
											"source": 9,
											"value": "181"
										},
										{
											"begin": 4585,
											"end": 4652,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 4578,
											"end": 4652,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 4578,
											"end": 4652,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 4661,
											"end": 4754,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "182"
										},
										{
											"begin": 4750,
											"end": 4753,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 4661,
											"end": 4754,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "183"
										},
										{
											"begin": 4661,
											"end": 4754,
											"name": "JUMP",
											"source": 9,
											"value": "[in]"
										},
										{
											"begin": 4661,
											"end": 4754,
											"name": "tag",
											"source": 9,
											"value": "182"
										},
										{
											"begin": 4661,
											"end": 4754,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 4779,
											"end": 4781,
											"name": "PUSH",
											"source": 9,
											"value": "20"
										},
										{
											"begin": 4774,
											"end": 4777,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 4770,
											"end": 4782,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 4763,
											"end": 4782,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 4763,
											"end": 4782,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 4422,
											"end": 4788,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 4422,
											"end": 4788,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 4422,
											"end": 4788,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 4422,
											"end": 4788,
											"name": "JUMP",
											"source": 9,
											"value": "[out]"
										},
										{
											"begin": 4794,
											"end": 4912,
											"name": "tag",
											"source": 9,
											"value": "184"
										},
										{
											"begin": 4794,
											"end": 4912,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 4881,
											"end": 4905,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "186"
										},
										{
											"begin": 4899,
											"end": 4904,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 4881,
											"end": 4905,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "187"
										},
										{
											"begin": 4881,
											"end": 4905,
											"name": "JUMP",
											"source": 9,
											"value": "[in]"
										},
										{
											"begin": 4881,
											"end": 4905,
											"name": "tag",
											"source": 9,
											"value": "186"
										},
										{
											"begin": 4881,
											"end": 4905,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 4876,
											"end": 4879,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 4869,
											"end": 4906,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 4794,
											"end": 4912,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 4794,
											"end": 4912,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 4794,
											"end": 4912,
											"name": "JUMP",
											"source": 9,
											"value": "[out]"
										},
										{
											"begin": 4918,
											"end": 5140,
											"name": "tag",
											"source": 9,
											"value": "41"
										},
										{
											"begin": 4918,
											"end": 5140,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 5011,
											"end": 5015,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 5049,
											"end": 5051,
											"name": "PUSH",
											"source": 9,
											"value": "20"
										},
										{
											"begin": 5038,
											"end": 5047,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 5034,
											"end": 5052,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 5026,
											"end": 5052,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 5026,
											"end": 5052,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 5062,
											"end": 5133,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "189"
										},
										{
											"begin": 5130,
											"end": 5131,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 5119,
											"end": 5128,
											"name": "DUP4",
											"source": 9
										},
										{
											"begin": 5115,
											"end": 5132,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 5106,
											"end": 5112,
											"name": "DUP5",
											"source": 9
										},
										{
											"begin": 5062,
											"end": 5133,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "150"
										},
										{
											"begin": 5062,
											"end": 5133,
											"name": "JUMP",
											"source": 9,
											"value": "[in]"
										},
										{
											"begin": 5062,
											"end": 5133,
											"name": "tag",
											"source": 9,
											"value": "189"
										},
										{
											"begin": 5062,
											"end": 5133,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 4918,
											"end": 5140,
											"name": "SWAP3",
											"source": 9
										},
										{
											"begin": 4918,
											"end": 5140,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 4918,
											"end": 5140,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 4918,
											"end": 5140,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 4918,
											"end": 5140,
											"name": "JUMP",
											"source": 9,
											"value": "[out]"
										},
										{
											"begin": 5146,
											"end": 5588,
											"name": "tag",
											"source": 9,
											"value": "66"
										},
										{
											"begin": 5146,
											"end": 5588,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 5295,
											"end": 5299,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 5333,
											"end": 5335,
											"name": "PUSH",
											"source": 9,
											"value": "60"
										},
										{
											"begin": 5322,
											"end": 5331,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 5318,
											"end": 5336,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 5310,
											"end": 5336,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 5310,
											"end": 5336,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 5346,
											"end": 5417,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "191"
										},
										{
											"begin": 5414,
											"end": 5415,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 5403,
											"end": 5412,
											"name": "DUP4",
											"source": 9
										},
										{
											"begin": 5399,
											"end": 5416,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 5390,
											"end": 5396,
											"name": "DUP7",
											"source": 9
										},
										{
											"begin": 5346,
											"end": 5417,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "150"
										},
										{
											"begin": 5346,
											"end": 5417,
											"name": "JUMP",
											"source": 9,
											"value": "[in]"
										},
										{
											"begin": 5346,
											"end": 5417,
											"name": "tag",
											"source": 9,
											"value": "191"
										},
										{
											"begin": 5346,
											"end": 5417,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 5427,
											"end": 5499,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "192"
										},
										{
											"begin": 5495,
											"end": 5497,
											"name": "PUSH",
											"source": 9,
											"value": "20"
										},
										{
											"begin": 5484,
											"end": 5493,
											"name": "DUP4",
											"source": 9
										},
										{
											"begin": 5480,
											"end": 5498,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 5471,
											"end": 5477,
											"name": "DUP6",
											"source": 9
										},
										{
											"begin": 5427,
											"end": 5499,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "150"
										},
										{
											"begin": 5427,
											"end": 5499,
											"name": "JUMP",
											"source": 9,
											"value": "[in]"
										},
										{
											"begin": 5427,
											"end": 5499,
											"name": "tag",
											"source": 9,
											"value": "192"
										},
										{
											"begin": 5427,
											"end": 5499,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 5509,
											"end": 5581,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "193"
										},
										{
											"begin": 5577,
											"end": 5579,
											"name": "PUSH",
											"source": 9,
											"value": "40"
										},
										{
											"begin": 5566,
											"end": 5575,
											"name": "DUP4",
											"source": 9
										},
										{
											"begin": 5562,
											"end": 5580,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 5553,
											"end": 5559,
											"name": "DUP5",
											"source": 9
										},
										{
											"begin": 5509,
											"end": 5581,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "184"
										},
										{
											"begin": 5509,
											"end": 5581,
											"name": "JUMP",
											"source": 9,
											"value": "[in]"
										},
										{
											"begin": 5509,
											"end": 5581,
											"name": "tag",
											"source": 9,
											"value": "193"
										},
										{
											"begin": 5509,
											"end": 5581,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 5146,
											"end": 5588,
											"name": "SWAP5",
											"source": 9
										},
										{
											"begin": 5146,
											"end": 5588,
											"name": "SWAP4",
											"source": 9
										},
										{
											"begin": 5146,
											"end": 5588,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 5146,
											"end": 5588,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 5146,
											"end": 5588,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 5146,
											"end": 5588,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 5146,
											"end": 5588,
											"name": "JUMP",
											"source": 9,
											"value": "[out]"
										},
										{
											"begin": 5594,
											"end": 5812,
											"name": "tag",
											"source": 9,
											"value": "27"
										},
										{
											"begin": 5594,
											"end": 5812,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 5685,
											"end": 5689,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 5723,
											"end": 5725,
											"name": "PUSH",
											"source": 9,
											"value": "20"
										},
										{
											"begin": 5712,
											"end": 5721,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 5708,
											"end": 5726,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 5700,
											"end": 5726,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 5700,
											"end": 5726,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 5736,
											"end": 5805,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "195"
										},
										{
											"begin": 5802,
											"end": 5803,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 5791,
											"end": 5800,
											"name": "DUP4",
											"source": 9
										},
										{
											"begin": 5787,
											"end": 5804,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 5778,
											"end": 5784,
											"name": "DUP5",
											"source": 9
										},
										{
											"begin": 5736,
											"end": 5805,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "154"
										},
										{
											"begin": 5736,
											"end": 5805,
											"name": "JUMP",
											"source": 9,
											"value": "[in]"
										},
										{
											"begin": 5736,
											"end": 5805,
											"name": "tag",
											"source": 9,
											"value": "195"
										},
										{
											"begin": 5736,
											"end": 5805,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 5594,
											"end": 5812,
											"name": "SWAP3",
											"source": 9
										},
										{
											"begin": 5594,
											"end": 5812,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 5594,
											"end": 5812,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 5594,
											"end": 5812,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 5594,
											"end": 5812,
											"name": "JUMP",
											"source": 9,
											"value": "[out]"
										},
										{
											"begin": 5818,
											"end": 6237,
											"name": "tag",
											"source": 9,
											"value": "94"
										},
										{
											"begin": 5818,
											"end": 6237,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 5984,
											"end": 5988,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 6022,
											"end": 6024,
											"name": "PUSH",
											"source": 9,
											"value": "20"
										},
										{
											"begin": 6011,
											"end": 6020,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 6007,
											"end": 6025,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 5999,
											"end": 6025,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 5999,
											"end": 6025,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 6071,
											"end": 6080,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 6065,
											"end": 6069,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 6061,
											"end": 6081,
											"name": "SUB",
											"source": 9
										},
										{
											"begin": 6057,
											"end": 6058,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 6046,
											"end": 6055,
											"name": "DUP4",
											"source": 9
										},
										{
											"begin": 6042,
											"end": 6059,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 6035,
											"end": 6082,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 6099,
											"end": 6230,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "197"
										},
										{
											"begin": 6225,
											"end": 6229,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 6099,
											"end": 6230,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "158"
										},
										{
											"begin": 6099,
											"end": 6230,
											"name": "JUMP",
											"source": 9,
											"value": "[in]"
										},
										{
											"begin": 6099,
											"end": 6230,
											"name": "tag",
											"source": 9,
											"value": "197"
										},
										{
											"begin": 6099,
											"end": 6230,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 6091,
											"end": 6230,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 6091,
											"end": 6230,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 5818,
											"end": 6237,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 5818,
											"end": 6237,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 5818,
											"end": 6237,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 5818,
											"end": 6237,
											"name": "JUMP",
											"source": 9,
											"value": "[out]"
										},
										{
											"begin": 6243,
											"end": 6662,
											"name": "tag",
											"source": 9,
											"value": "89"
										},
										{
											"begin": 6243,
											"end": 6662,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 6409,
											"end": 6413,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 6447,
											"end": 6449,
											"name": "PUSH",
											"source": 9,
											"value": "20"
										},
										{
											"begin": 6436,
											"end": 6445,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 6432,
											"end": 6450,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 6424,
											"end": 6450,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 6424,
											"end": 6450,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 6496,
											"end": 6505,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 6490,
											"end": 6494,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 6486,
											"end": 6506,
											"name": "SUB",
											"source": 9
										},
										{
											"begin": 6482,
											"end": 6483,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 6471,
											"end": 6480,
											"name": "DUP4",
											"source": 9
										},
										{
											"begin": 6467,
											"end": 6484,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 6460,
											"end": 6507,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 6524,
											"end": 6655,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "199"
										},
										{
											"begin": 6650,
											"end": 6654,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 6524,
											"end": 6655,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "164"
										},
										{
											"begin": 6524,
											"end": 6655,
											"name": "JUMP",
											"source": 9,
											"value": "[in]"
										},
										{
											"begin": 6524,
											"end": 6655,
											"name": "tag",
											"source": 9,
											"value": "199"
										},
										{
											"begin": 6524,
											"end": 6655,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 6516,
											"end": 6655,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 6516,
											"end": 6655,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 6243,
											"end": 6662,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 6243,
											"end": 6662,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 6243,
											"end": 6662,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 6243,
											"end": 6662,
											"name": "JUMP",
											"source": 9,
											"value": "[out]"
										},
										{
											"begin": 6668,
											"end": 7087,
											"name": "tag",
											"source": 9,
											"value": "101"
										},
										{
											"begin": 6668,
											"end": 7087,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 6834,
											"end": 6838,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 6872,
											"end": 6874,
											"name": "PUSH",
											"source": 9,
											"value": "20"
										},
										{
											"begin": 6861,
											"end": 6870,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 6857,
											"end": 6875,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 6849,
											"end": 6875,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 6849,
											"end": 6875,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 6921,
											"end": 6930,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 6915,
											"end": 6919,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 6911,
											"end": 6931,
											"name": "SUB",
											"source": 9
										},
										{
											"begin": 6907,
											"end": 6908,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 6896,
											"end": 6905,
											"name": "DUP4",
											"source": 9
										},
										{
											"begin": 6892,
											"end": 6909,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 6885,
											"end": 6932,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 6949,
											"end": 7080,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "201"
										},
										{
											"begin": 7075,
											"end": 7079,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 6949,
											"end": 7080,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "169"
										},
										{
											"begin": 6949,
											"end": 7080,
											"name": "JUMP",
											"source": 9,
											"value": "[in]"
										},
										{
											"begin": 6949,
											"end": 7080,
											"name": "tag",
											"source": 9,
											"value": "201"
										},
										{
											"begin": 6949,
											"end": 7080,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 6941,
											"end": 7080,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 6941,
											"end": 7080,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 6668,
											"end": 7087,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 6668,
											"end": 7087,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 6668,
											"end": 7087,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 6668,
											"end": 7087,
											"name": "JUMP",
											"source": 9,
											"value": "[out]"
										},
										{
											"begin": 7093,
											"end": 7512,
											"name": "tag",
											"source": 9,
											"value": "62"
										},
										{
											"begin": 7093,
											"end": 7512,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 7259,
											"end": 7263,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 7297,
											"end": 7299,
											"name": "PUSH",
											"source": 9,
											"value": "20"
										},
										{
											"begin": 7286,
											"end": 7295,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 7282,
											"end": 7300,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 7274,
											"end": 7300,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 7274,
											"end": 7300,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 7346,
											"end": 7355,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 7340,
											"end": 7344,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 7336,
											"end": 7356,
											"name": "SUB",
											"source": 9
										},
										{
											"begin": 7332,
											"end": 7333,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 7321,
											"end": 7330,
											"name": "DUP4",
											"source": 9
										},
										{
											"begin": 7317,
											"end": 7334,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 7310,
											"end": 7357,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 7374,
											"end": 7505,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "203"
										},
										{
											"begin": 7500,
											"end": 7504,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 7374,
											"end": 7505,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "174"
										},
										{
											"begin": 7374,
											"end": 7505,
											"name": "JUMP",
											"source": 9,
											"value": "[in]"
										},
										{
											"begin": 7374,
											"end": 7505,
											"name": "tag",
											"source": 9,
											"value": "203"
										},
										{
											"begin": 7374,
											"end": 7505,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 7366,
											"end": 7505,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 7366,
											"end": 7505,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 7093,
											"end": 7512,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 7093,
											"end": 7512,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 7093,
											"end": 7512,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 7093,
											"end": 7512,
											"name": "JUMP",
											"source": 9,
											"value": "[out]"
										},
										{
											"begin": 7518,
											"end": 7937,
											"name": "tag",
											"source": 9,
											"value": "58"
										},
										{
											"begin": 7518,
											"end": 7937,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 7684,
											"end": 7688,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 7722,
											"end": 7724,
											"name": "PUSH",
											"source": 9,
											"value": "20"
										},
										{
											"begin": 7711,
											"end": 7720,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 7707,
											"end": 7725,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 7699,
											"end": 7725,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 7699,
											"end": 7725,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 7771,
											"end": 7780,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 7765,
											"end": 7769,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 7761,
											"end": 7781,
											"name": "SUB",
											"source": 9
										},
										{
											"begin": 7757,
											"end": 7758,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 7746,
											"end": 7755,
											"name": "DUP4",
											"source": 9
										},
										{
											"begin": 7742,
											"end": 7759,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 7735,
											"end": 7782,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 7799,
											"end": 7930,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "205"
										},
										{
											"begin": 7925,
											"end": 7929,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 7799,
											"end": 7930,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "179"
										},
										{
											"begin": 7799,
											"end": 7930,
											"name": "JUMP",
											"source": 9,
											"value": "[in]"
										},
										{
											"begin": 7799,
											"end": 7930,
											"name": "tag",
											"source": 9,
											"value": "205"
										},
										{
											"begin": 7799,
											"end": 7930,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 7791,
											"end": 7930,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 7791,
											"end": 7930,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 7518,
											"end": 7937,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 7518,
											"end": 7937,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 7518,
											"end": 7937,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 7518,
											"end": 7937,
											"name": "JUMP",
											"source": 9,
											"value": "[out]"
										},
										{
											"begin": 7943,
											"end": 8165,
											"name": "tag",
											"source": 9,
											"value": "20"
										},
										{
											"begin": 7943,
											"end": 8165,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 8036,
											"end": 8040,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 8074,
											"end": 8076,
											"name": "PUSH",
											"source": 9,
											"value": "20"
										},
										{
											"begin": 8063,
											"end": 8072,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 8059,
											"end": 8077,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 8051,
											"end": 8077,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 8051,
											"end": 8077,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 8087,
											"end": 8158,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "207"
										},
										{
											"begin": 8155,
											"end": 8156,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 8144,
											"end": 8153,
											"name": "DUP4",
											"source": 9
										},
										{
											"begin": 8140,
											"end": 8157,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 8131,
											"end": 8137,
											"name": "DUP5",
											"source": 9
										},
										{
											"begin": 8087,
											"end": 8158,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "184"
										},
										{
											"begin": 8087,
											"end": 8158,
											"name": "JUMP",
											"source": 9,
											"value": "[in]"
										},
										{
											"begin": 8087,
											"end": 8158,
											"name": "tag",
											"source": 9,
											"value": "207"
										},
										{
											"begin": 8087,
											"end": 8158,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 7943,
											"end": 8165,
											"name": "SWAP3",
											"source": 9
										},
										{
											"begin": 7943,
											"end": 8165,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 7943,
											"end": 8165,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 7943,
											"end": 8165,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 7943,
											"end": 8165,
											"name": "JUMP",
											"source": 9,
											"value": "[out]"
										},
										{
											"begin": 8171,
											"end": 8300,
											"name": "tag",
											"source": 9,
											"value": "111"
										},
										{
											"begin": 8171,
											"end": 8300,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 8205,
											"end": 8211,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 8232,
											"end": 8252,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "209"
										},
										{
											"begin": 8232,
											"end": 8252,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "210"
										},
										{
											"begin": 8232,
											"end": 8252,
											"name": "JUMP",
											"source": 9,
											"value": "[in]"
										},
										{
											"begin": 8232,
											"end": 8252,
											"name": "tag",
											"source": 9,
											"value": "209"
										},
										{
											"begin": 8232,
											"end": 8252,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 8222,
											"end": 8252,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 8222,
											"end": 8252,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 8261,
											"end": 8294,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "211"
										},
										{
											"begin": 8289,
											"end": 8293,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 8281,
											"end": 8287,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 8261,
											"end": 8294,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "212"
										},
										{
											"begin": 8261,
											"end": 8294,
											"name": "JUMP",
											"source": 9,
											"value": "[in]"
										},
										{
											"begin": 8261,
											"end": 8294,
											"name": "tag",
											"source": 9,
											"value": "211"
										},
										{
											"begin": 8261,
											"end": 8294,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 8171,
											"end": 8300,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 8171,
											"end": 8300,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 8171,
											"end": 8300,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 8171,
											"end": 8300,
											"name": "JUMP",
											"source": 9,
											"value": "[out]"
										},
										{
											"begin": 8306,
											"end": 8381,
											"name": "tag",
											"source": 9,
											"value": "210"
										},
										{
											"begin": 8306,
											"end": 8381,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 8339,
											"end": 8345,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 8372,
											"end": 8374,
											"name": "PUSH",
											"source": 9,
											"value": "40"
										},
										{
											"begin": 8366,
											"end": 8375,
											"name": "MLOAD",
											"source": 9
										},
										{
											"begin": 8356,
											"end": 8375,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 8356,
											"end": 8375,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 8306,
											"end": 8381,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 8306,
											"end": 8381,
											"name": "JUMP",
											"source": 9,
											"value": "[out]"
										},
										{
											"begin": 8387,
											"end": 8694,
											"name": "tag",
											"source": 9,
											"value": "110"
										},
										{
											"begin": 8387,
											"end": 8694,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 8448,
											"end": 8452,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 8538,
											"end": 8556,
											"name": "PUSH",
											"source": 9,
											"value": "FFFFFFFFFFFFFFFF"
										},
										{
											"begin": 8530,
											"end": 8536,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 8527,
											"end": 8557,
											"name": "GT",
											"source": 9
										},
										{
											"begin": 8524,
											"end": 8580,
											"name": "ISZERO",
											"source": 9
										},
										{
											"begin": 8524,
											"end": 8580,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "215"
										},
										{
											"begin": 8524,
											"end": 8580,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 8560,
											"end": 8578,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "216"
										},
										{
											"begin": 8560,
											"end": 8578,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "217"
										},
										{
											"begin": 8560,
											"end": 8578,
											"name": "JUMP",
											"source": 9,
											"value": "[in]"
										},
										{
											"begin": 8560,
											"end": 8578,
											"name": "tag",
											"source": 9,
											"value": "216"
										},
										{
											"begin": 8560,
											"end": 8578,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 8524,
											"end": 8580,
											"name": "tag",
											"source": 9,
											"value": "215"
										},
										{
											"begin": 8524,
											"end": 8580,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 8598,
											"end": 8627,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "218"
										},
										{
											"begin": 8620,
											"end": 8626,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 8598,
											"end": 8627,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "219"
										},
										{
											"begin": 8598,
											"end": 8627,
											"name": "JUMP",
											"source": 9,
											"value": "[in]"
										},
										{
											"begin": 8598,
											"end": 8627,
											"name": "tag",
											"source": 9,
											"value": "218"
										},
										{
											"begin": 8598,
											"end": 8627,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 8590,
											"end": 8627,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 8590,
											"end": 8627,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 8682,
											"end": 8686,
											"name": "PUSH",
											"source": 9,
											"value": "20"
										},
										{
											"begin": 8676,
											"end": 8680,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 8672,
											"end": 8687,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 8664,
											"end": 8687,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 8664,
											"end": 8687,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 8387,
											"end": 8694,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 8387,
											"end": 8694,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 8387,
											"end": 8694,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 8387,
											"end": 8694,
											"name": "JUMP",
											"source": 9,
											"value": "[out]"
										},
										{
											"begin": 8700,
											"end": 8869,
											"name": "tag",
											"source": 9,
											"value": "161"
										},
										{
											"begin": 8700,
											"end": 8869,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 8784,
											"end": 8795,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 8818,
											"end": 8824,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 8813,
											"end": 8816,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 8806,
											"end": 8825,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 8858,
											"end": 8862,
											"name": "PUSH",
											"source": 9,
											"value": "20"
										},
										{
											"begin": 8853,
											"end": 8856,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 8849,
											"end": 8863,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 8834,
											"end": 8863,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 8834,
											"end": 8863,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 8700,
											"end": 8869,
											"name": "SWAP3",
											"source": 9
										},
										{
											"begin": 8700,
											"end": 8869,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 8700,
											"end": 8869,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 8700,
											"end": 8869,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 8700,
											"end": 8869,
											"name": "JUMP",
											"source": 9,
											"value": "[out]"
										},
										{
											"begin": 8875,
											"end": 8971,
											"name": "tag",
											"source": 9,
											"value": "153"
										},
										{
											"begin": 8875,
											"end": 8971,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 8912,
											"end": 8919,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 8941,
											"end": 8965,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "222"
										},
										{
											"begin": 8959,
											"end": 8964,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 8941,
											"end": 8965,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "223"
										},
										{
											"begin": 8941,
											"end": 8965,
											"name": "JUMP",
											"source": 9,
											"value": "[in]"
										},
										{
											"begin": 8941,
											"end": 8965,
											"name": "tag",
											"source": 9,
											"value": "222"
										},
										{
											"begin": 8941,
											"end": 8965,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 8930,
											"end": 8965,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 8930,
											"end": 8965,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 8875,
											"end": 8971,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 8875,
											"end": 8971,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 8875,
											"end": 8971,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 8875,
											"end": 8971,
											"name": "JUMP",
											"source": 9,
											"value": "[out]"
										},
										{
											"begin": 8977,
											"end": 9126,
											"name": "tag",
											"source": 9,
											"value": "157"
										},
										{
											"begin": 8977,
											"end": 9126,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 9013,
											"end": 9020,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 9053,
											"end": 9119,
											"name": "PUSH",
											"source": 9,
											"value": "FFFFFFFF00000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 9046,
											"end": 9051,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 9042,
											"end": 9120,
											"name": "AND",
											"source": 9
										},
										{
											"begin": 9031,
											"end": 9120,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 9031,
											"end": 9120,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 8977,
											"end": 9126,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 8977,
											"end": 9126,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 8977,
											"end": 9126,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 8977,
											"end": 9126,
											"name": "JUMP",
											"source": 9,
											"value": "[out]"
										},
										{
											"begin": 9132,
											"end": 9258,
											"name": "tag",
											"source": 9,
											"value": "223"
										},
										{
											"begin": 9132,
											"end": 9258,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 9169,
											"end": 9176,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 9209,
											"end": 9251,
											"name": "PUSH",
											"source": 9,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 9202,
											"end": 9207,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 9198,
											"end": 9252,
											"name": "AND",
											"source": 9
										},
										{
											"begin": 9187,
											"end": 9252,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 9187,
											"end": 9252,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 9132,
											"end": 9258,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 9132,
											"end": 9258,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 9132,
											"end": 9258,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 9132,
											"end": 9258,
											"name": "JUMP",
											"source": 9,
											"value": "[out]"
										},
										{
											"begin": 9264,
											"end": 9341,
											"name": "tag",
											"source": 9,
											"value": "187"
										},
										{
											"begin": 9264,
											"end": 9341,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 9301,
											"end": 9308,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 9330,
											"end": 9335,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 9319,
											"end": 9335,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 9319,
											"end": 9335,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 9264,
											"end": 9341,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 9264,
											"end": 9341,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 9264,
											"end": 9341,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 9264,
											"end": 9341,
											"name": "JUMP",
											"source": 9,
											"value": "[out]"
										},
										{
											"begin": 9347,
											"end": 9501,
											"name": "tag",
											"source": 9,
											"value": "116"
										},
										{
											"begin": 9347,
											"end": 9501,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 9431,
											"end": 9437,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 9426,
											"end": 9429,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 9421,
											"end": 9424,
											"name": "DUP4",
											"source": 9
										},
										{
											"begin": 9408,
											"end": 9438,
											"name": "CALLDATACOPY",
											"source": 9
										},
										{
											"begin": 9493,
											"end": 9494,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 9484,
											"end": 9490,
											"name": "DUP4",
											"source": 9
										},
										{
											"begin": 9479,
											"end": 9482,
											"name": "DUP4",
											"source": 9
										},
										{
											"begin": 9475,
											"end": 9491,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 9468,
											"end": 9495,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 9347,
											"end": 9501,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 9347,
											"end": 9501,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 9347,
											"end": 9501,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 9347,
											"end": 9501,
											"name": "JUMP",
											"source": 9,
											"value": "[out]"
										},
										{
											"begin": 9507,
											"end": 9788,
											"name": "tag",
											"source": 9,
											"value": "212"
										},
										{
											"begin": 9507,
											"end": 9788,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 9590,
											"end": 9617,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "229"
										},
										{
											"begin": 9612,
											"end": 9616,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 9590,
											"end": 9617,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "219"
										},
										{
											"begin": 9590,
											"end": 9617,
											"name": "JUMP",
											"source": 9,
											"value": "[in]"
										},
										{
											"begin": 9590,
											"end": 9617,
											"name": "tag",
											"source": 9,
											"value": "229"
										},
										{
											"begin": 9590,
											"end": 9617,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 9582,
											"end": 9588,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 9578,
											"end": 9618,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 9720,
											"end": 9726,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 9708,
											"end": 9718,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 9705,
											"end": 9727,
											"name": "LT",
											"source": 9
										},
										{
											"begin": 9684,
											"end": 9702,
											"name": "PUSH",
											"source": 9,
											"value": "FFFFFFFFFFFFFFFF"
										},
										{
											"begin": 9672,
											"end": 9682,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 9669,
											"end": 9703,
											"name": "GT",
											"source": 9
										},
										{
											"begin": 9666,
											"end": 9728,
											"name": "OR",
											"source": 9
										},
										{
											"begin": 9663,
											"end": 9751,
											"name": "ISZERO",
											"source": 9
										},
										{
											"begin": 9663,
											"end": 9751,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "230"
										},
										{
											"begin": 9663,
											"end": 9751,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 9731,
											"end": 9749,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "231"
										},
										{
											"begin": 9731,
											"end": 9749,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "217"
										},
										{
											"begin": 9731,
											"end": 9749,
											"name": "JUMP",
											"source": 9,
											"value": "[in]"
										},
										{
											"begin": 9731,
											"end": 9749,
											"name": "tag",
											"source": 9,
											"value": "231"
										},
										{
											"begin": 9731,
											"end": 9749,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 9663,
											"end": 9751,
											"name": "tag",
											"source": 9,
											"value": "230"
										},
										{
											"begin": 9663,
											"end": 9751,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 9771,
											"end": 9781,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 9767,
											"end": 9769,
											"name": "PUSH",
											"source": 9,
											"value": "40"
										},
										{
											"begin": 9760,
											"end": 9782,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 9550,
											"end": 9788,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 9507,
											"end": 9788,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 9507,
											"end": 9788,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 9507,
											"end": 9788,
											"name": "JUMP",
											"source": 9,
											"value": "[out]"
										},
										{
											"begin": 9794,
											"end": 9974,
											"name": "tag",
											"source": 9,
											"value": "217"
										},
										{
											"begin": 9794,
											"end": 9974,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 9842,
											"end": 9919,
											"name": "PUSH",
											"source": 9,
											"value": "4E487B7100000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 9839,
											"end": 9840,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 9832,
											"end": 9920,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 9939,
											"end": 9943,
											"name": "PUSH",
											"source": 9,
											"value": "41"
										},
										{
											"begin": 9936,
											"end": 9937,
											"name": "PUSH",
											"source": 9,
											"value": "4"
										},
										{
											"begin": 9929,
											"end": 9944,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 9963,
											"end": 9967,
											"name": "PUSH",
											"source": 9,
											"value": "24"
										},
										{
											"begin": 9960,
											"end": 9961,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 9953,
											"end": 9968,
											"name": "REVERT",
											"source": 9
										},
										{
											"begin": 9980,
											"end": 10097,
											"name": "tag",
											"source": 9,
											"value": "125"
										},
										{
											"begin": 9980,
											"end": 10097,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 10089,
											"end": 10090,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 10086,
											"end": 10087,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 10079,
											"end": 10091,
											"name": "REVERT",
											"source": 9
										},
										{
											"begin": 10103,
											"end": 10220,
											"name": "tag",
											"source": 9,
											"value": "114"
										},
										{
											"begin": 10103,
											"end": 10220,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 10212,
											"end": 10213,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 10209,
											"end": 10210,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 10202,
											"end": 10214,
											"name": "REVERT",
											"source": 9
										},
										{
											"begin": 10226,
											"end": 10343,
											"name": "tag",
											"source": 9,
											"value": "144"
										},
										{
											"begin": 10226,
											"end": 10343,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 10335,
											"end": 10336,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 10332,
											"end": 10333,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 10325,
											"end": 10337,
											"name": "REVERT",
											"source": 9
										},
										{
											"begin": 10349,
											"end": 10466,
											"name": "tag",
											"source": 9,
											"value": "134"
										},
										{
											"begin": 10349,
											"end": 10466,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 10458,
											"end": 10459,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 10455,
											"end": 10456,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 10448,
											"end": 10460,
											"name": "REVERT",
											"source": 9
										},
										{
											"begin": 10472,
											"end": 10574,
											"name": "tag",
											"source": 9,
											"value": "219"
										},
										{
											"begin": 10472,
											"end": 10574,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 10513,
											"end": 10519,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 10564,
											"end": 10566,
											"name": "PUSH",
											"source": 9,
											"value": "1F"
										},
										{
											"begin": 10560,
											"end": 10567,
											"name": "NOT",
											"source": 9
										},
										{
											"begin": 10555,
											"end": 10557,
											"name": "PUSH",
											"source": 9,
											"value": "1F"
										},
										{
											"begin": 10548,
											"end": 10553,
											"name": "DUP4",
											"source": 9
										},
										{
											"begin": 10544,
											"end": 10558,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 10540,
											"end": 10568,
											"name": "AND",
											"source": 9
										},
										{
											"begin": 10530,
											"end": 10568,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 10530,
											"end": 10568,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 10472,
											"end": 10574,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 10472,
											"end": 10574,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 10472,
											"end": 10574,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 10472,
											"end": 10574,
											"name": "JUMP",
											"source": 9,
											"value": "[out]"
										},
										{
											"begin": 10580,
											"end": 10757,
											"name": "tag",
											"source": 9,
											"value": "163"
										},
										{
											"begin": 10580,
											"end": 10757,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 10720,
											"end": 10749,
											"name": "PUSH",
											"source": 9,
											"value": "436F756E7465723A2064656372656D656E74206F766572666C6F770000000000"
										},
										{
											"begin": 10716,
											"end": 10717,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 10708,
											"end": 10714,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 10704,
											"end": 10718,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 10697,
											"end": 10750,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 10580,
											"end": 10757,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 10580,
											"end": 10757,
											"name": "JUMP",
											"source": 9,
											"value": "[out]"
										},
										{
											"begin": 10763,
											"end": 10988,
											"name": "tag",
											"source": 9,
											"value": "168"
										},
										{
											"begin": 10763,
											"end": 10988,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 10903,
											"end": 10937,
											"name": "PUSH",
											"source": 9,
											"value": "4F776E61626C653A206E6577206F776E657220697320746865207A65726F2061"
										},
										{
											"begin": 10899,
											"end": 10900,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 10891,
											"end": 10897,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 10887,
											"end": 10901,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 10880,
											"end": 10938,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 10972,
											"end": 10980,
											"name": "PUSH",
											"source": 9,
											"value": "6464726573730000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 10967,
											"end": 10969,
											"name": "PUSH",
											"source": 9,
											"value": "20"
										},
										{
											"begin": 10959,
											"end": 10965,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 10955,
											"end": 10970,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 10948,
											"end": 10981,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 10763,
											"end": 10988,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 10763,
											"end": 10988,
											"name": "JUMP",
											"source": 9,
											"value": "[out]"
										},
										{
											"begin": 10994,
											"end": 11176,
											"name": "tag",
											"source": 9,
											"value": "173"
										},
										{
											"begin": 10994,
											"end": 11176,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 11134,
											"end": 11168,
											"name": "PUSH",
											"source": 9,
											"value": "4F776E61626C653A2063616C6C6572206973206E6F7420746865206F776E6572"
										},
										{
											"begin": 11130,
											"end": 11131,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 11122,
											"end": 11128,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 11118,
											"end": 11132,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 11111,
											"end": 11169,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 10994,
											"end": 11176,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 10994,
											"end": 11176,
											"name": "JUMP",
											"source": 9,
											"value": "[out]"
										},
										{
											"begin": 11182,
											"end": 11354,
											"name": "tag",
											"source": 9,
											"value": "178"
										},
										{
											"begin": 11182,
											"end": 11354,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 11322,
											"end": 11346,
											"name": "PUSH",
											"source": 9,
											"value": "596F7520617265206E6F7420746865206F776E65722E00000000000000000000"
										},
										{
											"begin": 11318,
											"end": 11319,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 11310,
											"end": 11316,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 11306,
											"end": 11320,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 11299,
											"end": 11347,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 11182,
											"end": 11354,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 11182,
											"end": 11354,
											"name": "JUMP",
											"source": 9,
											"value": "[out]"
										},
										{
											"begin": 11360,
											"end": 11541,
											"name": "tag",
											"source": 9,
											"value": "183"
										},
										{
											"begin": 11360,
											"end": 11541,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 11500,
											"end": 11533,
											"name": "PUSH",
											"source": 9,
											"value": "5265656E7472616E637947756172643A207265656E7472616E742063616C6C00"
										},
										{
											"begin": 11496,
											"end": 11497,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 11488,
											"end": 11494,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 11484,
											"end": 11498,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 11477,
											"end": 11534,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 11360,
											"end": 11541,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 11360,
											"end": 11541,
											"name": "JUMP",
											"source": 9,
											"value": "[out]"
										},
										{
											"begin": 11547,
											"end": 11669,
											"name": "tag",
											"source": 9,
											"value": "120"
										},
										{
											"begin": 11547,
											"end": 11669,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 11620,
											"end": 11644,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "244"
										},
										{
											"begin": 11638,
											"end": 11643,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 11620,
											"end": 11644,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "153"
										},
										{
											"begin": 11620,
											"end": 11644,
											"name": "JUMP",
											"source": 9,
											"value": "[in]"
										},
										{
											"begin": 11620,
											"end": 11644,
											"name": "tag",
											"source": 9,
											"value": "244"
										},
										{
											"begin": 11620,
											"end": 11644,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 11613,
											"end": 11618,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 11610,
											"end": 11645,
											"name": "EQ",
											"source": 9
										},
										{
											"begin": 11600,
											"end": 11663,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "245"
										},
										{
											"begin": 11600,
											"end": 11663,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 11659,
											"end": 11660,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 11656,
											"end": 11657,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 11649,
											"end": 11661,
											"name": "REVERT",
											"source": 9
										},
										{
											"begin": 11600,
											"end": 11663,
											"name": "tag",
											"source": 9,
											"value": "245"
										},
										{
											"begin": 11600,
											"end": 11663,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 11547,
											"end": 11669,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 11547,
											"end": 11669,
											"name": "JUMP",
											"source": 9,
											"value": "[out]"
										},
										{
											"begin": 11675,
											"end": 11797,
											"name": "tag",
											"source": 9,
											"value": "130"
										},
										{
											"begin": 11675,
											"end": 11797,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 11748,
											"end": 11772,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "247"
										},
										{
											"begin": 11766,
											"end": 11771,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 11748,
											"end": 11772,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "187"
										},
										{
											"begin": 11748,
											"end": 11772,
											"name": "JUMP",
											"source": 9,
											"value": "[in]"
										},
										{
											"begin": 11748,
											"end": 11772,
											"name": "tag",
											"source": 9,
											"value": "247"
										},
										{
											"begin": 11748,
											"end": 11772,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 11741,
											"end": 11746,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 11738,
											"end": 11773,
											"name": "EQ",
											"source": 9
										},
										{
											"begin": 11728,
											"end": 11791,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "248"
										},
										{
											"begin": 11728,
											"end": 11791,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 11787,
											"end": 11788,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 11784,
											"end": 11785,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 11777,
											"end": 11789,
											"name": "REVERT",
											"source": 9
										},
										{
											"begin": 11728,
											"end": 11791,
											"name": "tag",
											"source": 9,
											"value": "248"
										},
										{
											"begin": 11728,
											"end": 11791,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 11675,
											"end": 11797,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 11675,
											"end": 11797,
											"name": "JUMP",
											"source": 9,
											"value": "[out]"
										}
									]
								}
							}
						},
						"methodIdentifiers": {
							"onERC721Received(address,address,uint256,bytes)": "150b7a02",
							"owner()": "8da5cb5b",
							"renounceOwnership()": "715018a6",
							"rewards(address)": "0700037d",
							"stake(uint256)": "a694fc3a",
							"tokenOwnedBy(uint256)": "8488cc41",
							"transferOwnership(address)": "f2fde38b",
							"unstake(uint256)": "2e17de78"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.7+commit.e28d00a7\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract IERC721\",\"name\":\"nftContract_\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Claimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"NFTStaked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"NFTUnstaked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC721Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"rewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"stake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tokenOwnedBy\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"unstake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"onERC721Received(address,address,uint256,bytes)\":{\"details\":\"See {IERC721Receiver-onERC721Received}. Always returns `IERC721Receiver.onERC721Received.selector`.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/NFTStaking.sol\":\"SacredTemple\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts@4.7.3/access/Ownable.sol\":{\"keccak256\":\"0xa94b34880e3c1b0b931662cb1c09e5dfa6662f31cba80e07c5ee71cd135c9673\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://40fb1b5102468f783961d0af743f91b9980cf66b50d1d12009f6bb1869cea4d2\",\"dweb:/ipfs/QmYqEbJML4jB1GHbzD4cUZDtJg5wVwNm3vDJq1GbyDus8y\"]},\"@openzeppelin/contracts@4.7.3/security/ReentrancyGuard.sol\":{\"keccak256\":\"0x0e9621f60b2faabe65549f7ed0f24e8853a45c1b7990d47e8160e523683f3935\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://287a2f8d5814dd0f05f22b740f18ca8321acc21c9bd03a6cb2203ea626e2f3f2\",\"dweb:/ipfs/QmZRQv9iuwU817VuqkA2WweiaibKii69x9QxYBBEfbNEud\"]},\"@openzeppelin/contracts@4.7.3/token/ERC721/IERC721.sol\":{\"keccak256\":\"0xed6a749c5373af398105ce6ee3ac4763aa450ea7285d268c85d9eeca809cdb1f\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://20a97f891d06f0fe91560ea1a142aaa26fdd22bed1b51606b7d48f670deeb50f\",\"dweb:/ipfs/QmTbCtZKChpaX5H2iRiTDMcSz29GSLCpTCDgJpcMR4wg8x\"]},\"@openzeppelin/contracts@4.7.3/token/ERC721/IERC721Receiver.sol\":{\"keccak256\":\"0xa82b58eca1ee256be466e536706850163d2ec7821945abd6b4778cfb3bee37da\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://6e75cf83beb757b8855791088546b8337e9d4684e169400c20d44a515353b708\",\"dweb:/ipfs/QmYvPafLfoquiDMEj7CKHtvbgHu7TJNPSVPSCjrtjV8HjV\"]},\"@openzeppelin/contracts@4.7.3/token/ERC721/utils/ERC721Holder.sol\":{\"keccak256\":\"0x0108bf6a6ebd5f96678bed33a35947537263f96766131ee91461fb6485805028\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://ae2d274bf3d56a6d49a9bbd0a4871c54997a82551eb3eb1c0c39dc98698ff8bf\",\"dweb:/ipfs/QmTT7ty5DPGAmRnx94Xu3TUDYGSPDVLN2bppJAjjedrg1e\"]},\"@openzeppelin/contracts@4.7.3/utils/Context.sol\":{\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://6df0ddf21ce9f58271bdfaa85cde98b200ef242a05a3f85c2bc10a8294800a92\",\"dweb:/ipfs/QmRK2Y5Yc6BK7tGKkgsgn3aJEQGi5aakeSPZvS65PV8Xp3\"]},\"@openzeppelin/contracts@4.7.3/utils/Counters.sol\":{\"keccak256\":\"0xf0018c2440fbe238dd3a8732fa8e17a0f9dce84d31451dc8a32f6d62b349c9f1\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://59e1c62884d55b70f3ae5432b44bb3166ad71ae3acd19c57ab6ddc3c87c325ee\",\"dweb:/ipfs/QmezuXg5GK5oeA4F91EZhozBFekhq5TD966bHPH18cCqhu\"]},\"@openzeppelin/contracts@4.7.3/utils/introspection/IERC165.sol\":{\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://be161e54f24e5c6fae81a12db1a8ae87bc5ae1b0ddc805d82a1440a68455088f\",\"dweb:/ipfs/QmP7C3CHdY9urF4dEMb9wmsp1wMxHF6nhA2yQE5SKiPAdy\"]},\"contracts/NFTStaking.sol\":{\"keccak256\":\"0xb7593665e4c0b812dd18429c0587943b3a36386b34121031dfe4bde90d4a9a2c\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://16af1a62e67877973888200a3315f6b6955050057d06ca90269133c87494cb45\",\"dweb:/ipfs/Qmb655f48dvD1QE1emQk7PEYajnA1RbELcN9JRFtgm6Qh5\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [
							{
								"astId": 7,
								"contract": "contracts/NFTStaking.sol:SacredTemple",
								"label": "_owner",
								"offset": 0,
								"slot": "0",
								"type": "t_address"
							},
							{
								"astId": 123,
								"contract": "contracts/NFTStaking.sol:SacredTemple",
								"label": "_status",
								"offset": 0,
								"slot": "1",
								"type": "t_uint256"
							},
							{
								"astId": 437,
								"contract": "contracts/NFTStaking.sol:SacredTemple",
								"label": "_nftContract",
								"offset": 0,
								"slot": "2",
								"type": "t_contract(IERC721)268"
							},
							{
								"astId": 444,
								"contract": "contracts/NFTStaking.sol:SacredTemple",
								"label": "_stakedNFTCounter",
								"offset": 0,
								"slot": "3",
								"type": "t_struct(Counter)341_storage"
							},
							{
								"astId": 470,
								"contract": "contracts/NFTStaking.sol:SacredTemple",
								"label": "tokenOwnedBy",
								"offset": 0,
								"slot": "4",
								"type": "t_mapping(t_uint256,t_address)"
							},
							{
								"astId": 474,
								"contract": "contracts/NFTStaking.sol:SacredTemple",
								"label": "rewards",
								"offset": 0,
								"slot": "5",
								"type": "t_mapping(t_address,t_uint256)"
							}
						],
						"types": {
							"t_address": {
								"encoding": "inplace",
								"label": "address",
								"numberOfBytes": "20"
							},
							"t_contract(IERC721)268": {
								"encoding": "inplace",
								"label": "contract IERC721",
								"numberOfBytes": "20"
							},
							"t_mapping(t_address,t_uint256)": {
								"encoding": "mapping",
								"key": "t_address",
								"label": "mapping(address => uint256)",
								"numberOfBytes": "32",
								"value": "t_uint256"
							},
							"t_mapping(t_uint256,t_address)": {
								"encoding": "mapping",
								"key": "t_uint256",
								"label": "mapping(uint256 => address)",
								"numberOfBytes": "32",
								"value": "t_address"
							},
							"t_struct(Counter)341_storage": {
								"encoding": "inplace",
								"label": "struct Counters.Counter",
								"members": [
									{
										"astId": 340,
										"contract": "contracts/NFTStaking.sol:SacredTemple",
										"label": "_value",
										"offset": 0,
										"slot": "0",
										"type": "t_uint256"
									}
								],
								"numberOfBytes": "32"
							},
							"t_uint256": {
								"encoding": "inplace",
								"label": "uint256",
								"numberOfBytes": "32"
							}
						}
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			}
		},
		"sources": {
			"@openzeppelin/contracts@4.7.3/access/Ownable.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts@4.7.3/access/Ownable.sol",
					"exportedSymbols": {
						"Context": [
							335
						],
						"Ownable": [
							112
						]
					},
					"id": 113,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 1,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "102:23:0"
						},
						{
							"absolutePath": "@openzeppelin/contracts@4.7.3/utils/Context.sol",
							"file": "../utils/Context.sol",
							"id": 2,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 113,
							"sourceUnit": 336,
							"src": "127:30:0",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"abstract": true,
							"baseContracts": [
								{
									"baseName": {
										"id": 4,
										"name": "Context",
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 335,
										"src": "683:7:0"
									},
									"id": 5,
									"nodeType": "InheritanceSpecifier",
									"src": "683:7:0"
								}
							],
							"contractDependencies": [],
							"contractKind": "contract",
							"documentation": {
								"id": 3,
								"nodeType": "StructuredDocumentation",
								"src": "159:494:0",
								"text": " @dev Contract module which provides a basic access control mechanism, where\n there is an account (an owner) that can be granted exclusive access to\n specific functions.\n By default, the owner account will be the one that deploys the contract. This\n can later be changed with {transferOwnership}.\n This module is used through inheritance. It will make available the modifier\n `onlyOwner`, which can be applied to your functions to restrict their use to\n the owner."
							},
							"fullyImplemented": true,
							"id": 112,
							"linearizedBaseContracts": [
								112,
								335
							],
							"name": "Ownable",
							"nameLocation": "672:7:0",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"constant": false,
									"id": 7,
									"mutability": "mutable",
									"name": "_owner",
									"nameLocation": "713:6:0",
									"nodeType": "VariableDeclaration",
									"scope": 112,
									"src": "697:22:0",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_address",
										"typeString": "address"
									},
									"typeName": {
										"id": 6,
										"name": "address",
										"nodeType": "ElementaryTypeName",
										"src": "697:7:0",
										"stateMutability": "nonpayable",
										"typeDescriptions": {
											"typeIdentifier": "t_address",
											"typeString": "address"
										}
									},
									"visibility": "private"
								},
								{
									"anonymous": false,
									"id": 13,
									"name": "OwnershipTransferred",
									"nameLocation": "732:20:0",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 12,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 9,
												"indexed": true,
												"mutability": "mutable",
												"name": "previousOwner",
												"nameLocation": "769:13:0",
												"nodeType": "VariableDeclaration",
												"scope": 13,
												"src": "753:29:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 8,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "753:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 11,
												"indexed": true,
												"mutability": "mutable",
												"name": "newOwner",
												"nameLocation": "800:8:0",
												"nodeType": "VariableDeclaration",
												"scope": 13,
												"src": "784:24:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 10,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "784:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "752:57:0"
									},
									"src": "726:84:0"
								},
								{
									"body": {
										"id": 22,
										"nodeType": "Block",
										"src": "926:49:0",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"arguments": [],
															"expression": {
																"argumentTypes": [],
																"id": 18,
																"name": "_msgSender",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 325,
																"src": "955:10:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
																	"typeString": "function () view returns (address)"
																}
															},
															"id": 19,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "955:12:0",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"id": 17,
														"name": "_transferOwnership",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 111,
														"src": "936:18:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$returns$__$",
															"typeString": "function (address)"
														}
													},
													"id": 20,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "936:32:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 21,
												"nodeType": "ExpressionStatement",
												"src": "936:32:0"
											}
										]
									},
									"documentation": {
										"id": 14,
										"nodeType": "StructuredDocumentation",
										"src": "816:91:0",
										"text": " @dev Initializes the contract setting the deployer as the initial owner."
									},
									"id": 23,
									"implemented": true,
									"kind": "constructor",
									"modifiers": [],
									"name": "",
									"nameLocation": "-1:-1:-1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 15,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "923:2:0"
									},
									"returnParameters": {
										"id": 16,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "926:0:0"
									},
									"scope": 112,
									"src": "912:63:0",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 30,
										"nodeType": "Block",
										"src": "1084:41:0",
										"statements": [
											{
												"expression": {
													"arguments": [],
													"expression": {
														"argumentTypes": [],
														"id": 26,
														"name": "_checkOwner",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 54,
														"src": "1094:11:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$__$returns$__$",
															"typeString": "function () view"
														}
													},
													"id": 27,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1094:13:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 28,
												"nodeType": "ExpressionStatement",
												"src": "1094:13:0"
											},
											{
												"id": 29,
												"nodeType": "PlaceholderStatement",
												"src": "1117:1:0"
											}
										]
									},
									"documentation": {
										"id": 24,
										"nodeType": "StructuredDocumentation",
										"src": "981:77:0",
										"text": " @dev Throws if called by any account other than the owner."
									},
									"id": 31,
									"name": "onlyOwner",
									"nameLocation": "1072:9:0",
									"nodeType": "ModifierDefinition",
									"parameters": {
										"id": 25,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1081:2:0"
									},
									"src": "1063:62:0",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 39,
										"nodeType": "Block",
										"src": "1256:30:0",
										"statements": [
											{
												"expression": {
													"id": 37,
													"name": "_owner",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 7,
													"src": "1273:6:0",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"functionReturnParameters": 36,
												"id": 38,
												"nodeType": "Return",
												"src": "1266:13:0"
											}
										]
									},
									"documentation": {
										"id": 32,
										"nodeType": "StructuredDocumentation",
										"src": "1131:65:0",
										"text": " @dev Returns the address of the current owner."
									},
									"functionSelector": "8da5cb5b",
									"id": 40,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "owner",
									"nameLocation": "1210:5:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 33,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1215:2:0"
									},
									"returnParameters": {
										"id": 36,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 35,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 40,
												"src": "1247:7:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 34,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1247:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1246:9:0"
									},
									"scope": 112,
									"src": "1201:85:0",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "public"
								},
								{
									"body": {
										"id": 53,
										"nodeType": "Block",
										"src": "1404:85:0",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															"id": 49,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"arguments": [],
																"expression": {
																	"argumentTypes": [],
																	"id": 45,
																	"name": "owner",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 40,
																	"src": "1422:5:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
																		"typeString": "function () view returns (address)"
																	}
																},
																"id": 46,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "1422:7:0",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "==",
															"rightExpression": {
																"arguments": [],
																"expression": {
																	"argumentTypes": [],
																	"id": 47,
																	"name": "_msgSender",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 325,
																	"src": "1433:10:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
																		"typeString": "function () view returns (address)"
																	}
																},
																"id": 48,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "1433:12:0",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"src": "1422:23:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572",
															"id": 50,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "1447:34:0",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe",
																"typeString": "literal_string \"Ownable: caller is not the owner\""
															},
															"value": "Ownable: caller is not the owner"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe",
																"typeString": "literal_string \"Ownable: caller is not the owner\""
															}
														],
														"id": 44,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "1414:7:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 51,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1414:68:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 52,
												"nodeType": "ExpressionStatement",
												"src": "1414:68:0"
											}
										]
									},
									"documentation": {
										"id": 41,
										"nodeType": "StructuredDocumentation",
										"src": "1292:62:0",
										"text": " @dev Throws if the sender is not the owner."
									},
									"id": 54,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_checkOwner",
									"nameLocation": "1368:11:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 42,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1379:2:0"
									},
									"returnParameters": {
										"id": 43,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1404:0:0"
									},
									"scope": 112,
									"src": "1359:130:0",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 67,
										"nodeType": "Block",
										"src": "1885:47:0",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"arguments": [
																{
																	"hexValue": "30",
																	"id": 63,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "1922:1:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	},
																	"value": "0"
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	}
																],
																"id": 62,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "1914:7:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_$",
																	"typeString": "type(address)"
																},
																"typeName": {
																	"id": 61,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "1914:7:0",
																	"typeDescriptions": {}
																}
															},
															"id": 64,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "typeConversion",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "1914:10:0",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"id": 60,
														"name": "_transferOwnership",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 111,
														"src": "1895:18:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$returns$__$",
															"typeString": "function (address)"
														}
													},
													"id": 65,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1895:30:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 66,
												"nodeType": "ExpressionStatement",
												"src": "1895:30:0"
											}
										]
									},
									"documentation": {
										"id": 55,
										"nodeType": "StructuredDocumentation",
										"src": "1495:331:0",
										"text": " @dev Leaves the contract without owner. It will not be possible to call\n `onlyOwner` functions anymore. Can only be called by the current owner.\n NOTE: Renouncing ownership will leave the contract without an owner,\n thereby removing any functionality that is only available to the owner."
									},
									"functionSelector": "715018a6",
									"id": 68,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"id": 58,
											"kind": "modifierInvocation",
											"modifierName": {
												"id": 57,
												"name": "onlyOwner",
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 31,
												"src": "1875:9:0"
											},
											"nodeType": "ModifierInvocation",
											"src": "1875:9:0"
										}
									],
									"name": "renounceOwnership",
									"nameLocation": "1840:17:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 56,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1857:2:0"
									},
									"returnParameters": {
										"id": 59,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1885:0:0"
									},
									"scope": 112,
									"src": "1831:101:0",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "public"
								},
								{
									"body": {
										"id": 90,
										"nodeType": "Block",
										"src": "2151:128:0",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															"id": 82,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 77,
																"name": "newOwner",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 71,
																"src": "2169:8:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "!=",
															"rightExpression": {
																"arguments": [
																	{
																		"hexValue": "30",
																		"id": 80,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "2189:1:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		},
																		"value": "0"
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		}
																	],
																	"id": 79,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"nodeType": "ElementaryTypeNameExpression",
																	"src": "2181:7:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_address_$",
																		"typeString": "type(address)"
																	},
																	"typeName": {
																		"id": 78,
																		"name": "address",
																		"nodeType": "ElementaryTypeName",
																		"src": "2181:7:0",
																		"typeDescriptions": {}
																	}
																},
																"id": 81,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "typeConversion",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "2181:10:0",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"src": "2169:22:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "4f776e61626c653a206e6577206f776e657220697320746865207a65726f2061646472657373",
															"id": 83,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "2193:40:0",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe",
																"typeString": "literal_string \"Ownable: new owner is the zero address\""
															},
															"value": "Ownable: new owner is the zero address"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe",
																"typeString": "literal_string \"Ownable: new owner is the zero address\""
															}
														],
														"id": 76,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "2161:7:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 84,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2161:73:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 85,
												"nodeType": "ExpressionStatement",
												"src": "2161:73:0"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 87,
															"name": "newOwner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 71,
															"src": "2263:8:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"id": 86,
														"name": "_transferOwnership",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 111,
														"src": "2244:18:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$returns$__$",
															"typeString": "function (address)"
														}
													},
													"id": 88,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2244:28:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 89,
												"nodeType": "ExpressionStatement",
												"src": "2244:28:0"
											}
										]
									},
									"documentation": {
										"id": 69,
										"nodeType": "StructuredDocumentation",
										"src": "1938:138:0",
										"text": " @dev Transfers ownership of the contract to a new account (`newOwner`).\n Can only be called by the current owner."
									},
									"functionSelector": "f2fde38b",
									"id": 91,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"id": 74,
											"kind": "modifierInvocation",
											"modifierName": {
												"id": 73,
												"name": "onlyOwner",
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 31,
												"src": "2141:9:0"
											},
											"nodeType": "ModifierInvocation",
											"src": "2141:9:0"
										}
									],
									"name": "transferOwnership",
									"nameLocation": "2090:17:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 72,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 71,
												"mutability": "mutable",
												"name": "newOwner",
												"nameLocation": "2116:8:0",
												"nodeType": "VariableDeclaration",
												"scope": 91,
												"src": "2108:16:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 70,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2108:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2107:18:0"
									},
									"returnParameters": {
										"id": 75,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2151:0:0"
									},
									"scope": 112,
									"src": "2081:198:0",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "public"
								},
								{
									"body": {
										"id": 110,
										"nodeType": "Block",
										"src": "2496:124:0",
										"statements": [
											{
												"assignments": [
													98
												],
												"declarations": [
													{
														"constant": false,
														"id": 98,
														"mutability": "mutable",
														"name": "oldOwner",
														"nameLocation": "2514:8:0",
														"nodeType": "VariableDeclaration",
														"scope": 110,
														"src": "2506:16:0",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														},
														"typeName": {
															"id": 97,
															"name": "address",
															"nodeType": "ElementaryTypeName",
															"src": "2506:7:0",
															"stateMutability": "nonpayable",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 100,
												"initialValue": {
													"id": 99,
													"name": "_owner",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 7,
													"src": "2525:6:0",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "2506:25:0"
											},
											{
												"expression": {
													"id": 103,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 101,
														"name": "_owner",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 7,
														"src": "2541:6:0",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 102,
														"name": "newOwner",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 94,
														"src": "2550:8:0",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "2541:17:0",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"id": 104,
												"nodeType": "ExpressionStatement",
												"src": "2541:17:0"
											},
											{
												"eventCall": {
													"arguments": [
														{
															"id": 106,
															"name": "oldOwner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 98,
															"src": "2594:8:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 107,
															"name": "newOwner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 94,
															"src": "2604:8:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"id": 105,
														"name": "OwnershipTransferred",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 13,
														"src": "2573:20:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_address_$returns$__$",
															"typeString": "function (address,address)"
														}
													},
													"id": 108,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2573:40:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 109,
												"nodeType": "EmitStatement",
												"src": "2568:45:0"
											}
										]
									},
									"documentation": {
										"id": 92,
										"nodeType": "StructuredDocumentation",
										"src": "2285:143:0",
										"text": " @dev Transfers ownership of the contract to a new account (`newOwner`).\n Internal function without access restriction."
									},
									"id": 111,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_transferOwnership",
									"nameLocation": "2442:18:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 95,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 94,
												"mutability": "mutable",
												"name": "newOwner",
												"nameLocation": "2469:8:0",
												"nodeType": "VariableDeclaration",
												"scope": 111,
												"src": "2461:16:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 93,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2461:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2460:18:0"
									},
									"returnParameters": {
										"id": 96,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2496:0:0"
									},
									"scope": 112,
									"src": "2433:187:0",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "internal"
								}
							],
							"scope": 113,
							"src": "654:1968:0",
							"usedErrors": []
						}
					],
					"src": "102:2521:0"
				},
				"id": 0
			},
			"@openzeppelin/contracts@4.7.3/security/ReentrancyGuard.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts@4.7.3/security/ReentrancyGuard.sol",
					"exportedSymbols": {
						"ReentrancyGuard": [
							152
						]
					},
					"id": 153,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 114,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "97:23:1"
						},
						{
							"abstract": true,
							"baseContracts": [],
							"contractDependencies": [],
							"contractKind": "contract",
							"documentation": {
								"id": 115,
								"nodeType": "StructuredDocumentation",
								"src": "122:750:1",
								"text": " @dev Contract module that helps prevent reentrant calls to a function.\n Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n available, which can be applied to functions to make sure there are no nested\n (reentrant) calls to them.\n Note that because there is a single `nonReentrant` guard, functions marked as\n `nonReentrant` may not call one another. This can be worked around by making\n those functions `private`, and then adding `external` `nonReentrant` entry\n points to them.\n TIP: If you would like to learn more about reentrancy and alternative ways\n to protect against it, check out our blog post\n https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul]."
							},
							"fullyImplemented": true,
							"id": 152,
							"linearizedBaseContracts": [
								152
							],
							"name": "ReentrancyGuard",
							"nameLocation": "891:15:1",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"constant": true,
									"id": 118,
									"mutability": "constant",
									"name": "_NOT_ENTERED",
									"nameLocation": "1686:12:1",
									"nodeType": "VariableDeclaration",
									"scope": 152,
									"src": "1661:41:1",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint256",
										"typeString": "uint256"
									},
									"typeName": {
										"id": 116,
										"name": "uint256",
										"nodeType": "ElementaryTypeName",
										"src": "1661:7:1",
										"typeDescriptions": {
											"typeIdentifier": "t_uint256",
											"typeString": "uint256"
										}
									},
									"value": {
										"hexValue": "31",
										"id": 117,
										"isConstant": false,
										"isLValue": false,
										"isPure": true,
										"kind": "number",
										"lValueRequested": false,
										"nodeType": "Literal",
										"src": "1701:1:1",
										"typeDescriptions": {
											"typeIdentifier": "t_rational_1_by_1",
											"typeString": "int_const 1"
										},
										"value": "1"
									},
									"visibility": "private"
								},
								{
									"constant": true,
									"id": 121,
									"mutability": "constant",
									"name": "_ENTERED",
									"nameLocation": "1733:8:1",
									"nodeType": "VariableDeclaration",
									"scope": 152,
									"src": "1708:37:1",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint256",
										"typeString": "uint256"
									},
									"typeName": {
										"id": 119,
										"name": "uint256",
										"nodeType": "ElementaryTypeName",
										"src": "1708:7:1",
										"typeDescriptions": {
											"typeIdentifier": "t_uint256",
											"typeString": "uint256"
										}
									},
									"value": {
										"hexValue": "32",
										"id": 120,
										"isConstant": false,
										"isLValue": false,
										"isPure": true,
										"kind": "number",
										"lValueRequested": false,
										"nodeType": "Literal",
										"src": "1744:1:1",
										"typeDescriptions": {
											"typeIdentifier": "t_rational_2_by_1",
											"typeString": "int_const 2"
										},
										"value": "2"
									},
									"visibility": "private"
								},
								{
									"constant": false,
									"id": 123,
									"mutability": "mutable",
									"name": "_status",
									"nameLocation": "1768:7:1",
									"nodeType": "VariableDeclaration",
									"scope": 152,
									"src": "1752:23:1",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint256",
										"typeString": "uint256"
									},
									"typeName": {
										"id": 122,
										"name": "uint256",
										"nodeType": "ElementaryTypeName",
										"src": "1752:7:1",
										"typeDescriptions": {
											"typeIdentifier": "t_uint256",
											"typeString": "uint256"
										}
									},
									"visibility": "private"
								},
								{
									"body": {
										"id": 130,
										"nodeType": "Block",
										"src": "1796:39:1",
										"statements": [
											{
												"expression": {
													"id": 128,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 126,
														"name": "_status",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 123,
														"src": "1806:7:1",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 127,
														"name": "_NOT_ENTERED",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 118,
														"src": "1816:12:1",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "1806:22:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 129,
												"nodeType": "ExpressionStatement",
												"src": "1806:22:1"
											}
										]
									},
									"id": 131,
									"implemented": true,
									"kind": "constructor",
									"modifiers": [],
									"name": "",
									"nameLocation": "-1:-1:-1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 124,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1793:2:1"
									},
									"returnParameters": {
										"id": 125,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1796:0:1"
									},
									"scope": 152,
									"src": "1782:53:1",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 150,
										"nodeType": "Block",
										"src": "2236:421:1",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 137,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 135,
																"name": "_status",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 123,
																"src": "2325:7:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "!=",
															"rightExpression": {
																"id": 136,
																"name": "_ENTERED",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 121,
																"src": "2336:8:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "2325:19:1",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "5265656e7472616e637947756172643a207265656e7472616e742063616c6c",
															"id": 138,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "2346:33:1",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_ebf73bba305590e4764d5cb53b69bffd6d4d092d1a67551cb346f8cfcdab8619",
																"typeString": "literal_string \"ReentrancyGuard: reentrant call\""
															},
															"value": "ReentrancyGuard: reentrant call"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_ebf73bba305590e4764d5cb53b69bffd6d4d092d1a67551cb346f8cfcdab8619",
																"typeString": "literal_string \"ReentrancyGuard: reentrant call\""
															}
														],
														"id": 134,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "2317:7:1",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 139,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2317:63:1",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 140,
												"nodeType": "ExpressionStatement",
												"src": "2317:63:1"
											},
											{
												"expression": {
													"id": 143,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 141,
														"name": "_status",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 123,
														"src": "2455:7:1",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 142,
														"name": "_ENTERED",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 121,
														"src": "2465:8:1",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "2455:18:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 144,
												"nodeType": "ExpressionStatement",
												"src": "2455:18:1"
											},
											{
												"id": 145,
												"nodeType": "PlaceholderStatement",
												"src": "2484:1:1"
											},
											{
												"expression": {
													"id": 148,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 146,
														"name": "_status",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 123,
														"src": "2628:7:1",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 147,
														"name": "_NOT_ENTERED",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 118,
														"src": "2638:12:1",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "2628:22:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 149,
												"nodeType": "ExpressionStatement",
												"src": "2628:22:1"
											}
										]
									},
									"documentation": {
										"id": 132,
										"nodeType": "StructuredDocumentation",
										"src": "1841:366:1",
										"text": " @dev Prevents a contract from calling itself, directly or indirectly.\n Calling a `nonReentrant` function from another `nonReentrant`\n function is not supported. It is possible to prevent this from happening\n by making the `nonReentrant` function external, and making it call a\n `private` function that does the actual work."
									},
									"id": 151,
									"name": "nonReentrant",
									"nameLocation": "2221:12:1",
									"nodeType": "ModifierDefinition",
									"parameters": {
										"id": 133,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2233:2:1"
									},
									"src": "2212:445:1",
									"virtual": false,
									"visibility": "internal"
								}
							],
							"scope": 153,
							"src": "873:1786:1",
							"usedErrors": []
						}
					],
					"src": "97:2563:1"
				},
				"id": 1
			},
			"@openzeppelin/contracts@4.7.3/token/ERC721/IERC721.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts@4.7.3/token/ERC721/IERC721.sol",
					"exportedSymbols": {
						"IERC165": [
							421
						],
						"IERC721": [
							268
						]
					},
					"id": 269,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 154,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "108:23:2"
						},
						{
							"absolutePath": "@openzeppelin/contracts@4.7.3/utils/introspection/IERC165.sol",
							"file": "../../utils/introspection/IERC165.sol",
							"id": 155,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 269,
							"sourceUnit": 422,
							"src": "133:47:2",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"abstract": false,
							"baseContracts": [
								{
									"baseName": {
										"id": 157,
										"name": "IERC165",
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 421,
										"src": "271:7:2"
									},
									"id": 158,
									"nodeType": "InheritanceSpecifier",
									"src": "271:7:2"
								}
							],
							"contractDependencies": [],
							"contractKind": "interface",
							"documentation": {
								"id": 156,
								"nodeType": "StructuredDocumentation",
								"src": "182:67:2",
								"text": " @dev Required interface of an ERC721 compliant contract."
							},
							"fullyImplemented": false,
							"id": 268,
							"linearizedBaseContracts": [
								268,
								421
							],
							"name": "IERC721",
							"nameLocation": "260:7:2",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"anonymous": false,
									"documentation": {
										"id": 159,
										"nodeType": "StructuredDocumentation",
										"src": "285:88:2",
										"text": " @dev Emitted when `tokenId` token is transferred from `from` to `to`."
									},
									"id": 167,
									"name": "Transfer",
									"nameLocation": "384:8:2",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 166,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 161,
												"indexed": true,
												"mutability": "mutable",
												"name": "from",
												"nameLocation": "409:4:2",
												"nodeType": "VariableDeclaration",
												"scope": 167,
												"src": "393:20:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 160,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "393:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 163,
												"indexed": true,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "431:2:2",
												"nodeType": "VariableDeclaration",
												"scope": 167,
												"src": "415:18:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 162,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "415:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 165,
												"indexed": true,
												"mutability": "mutable",
												"name": "tokenId",
												"nameLocation": "451:7:2",
												"nodeType": "VariableDeclaration",
												"scope": 167,
												"src": "435:23:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 164,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "435:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "392:67:2"
									},
									"src": "378:82:2"
								},
								{
									"anonymous": false,
									"documentation": {
										"id": 168,
										"nodeType": "StructuredDocumentation",
										"src": "466:94:2",
										"text": " @dev Emitted when `owner` enables `approved` to manage the `tokenId` token."
									},
									"id": 176,
									"name": "Approval",
									"nameLocation": "571:8:2",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 175,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 170,
												"indexed": true,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "596:5:2",
												"nodeType": "VariableDeclaration",
												"scope": 176,
												"src": "580:21:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 169,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "580:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 172,
												"indexed": true,
												"mutability": "mutable",
												"name": "approved",
												"nameLocation": "619:8:2",
												"nodeType": "VariableDeclaration",
												"scope": 176,
												"src": "603:24:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 171,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "603:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 174,
												"indexed": true,
												"mutability": "mutable",
												"name": "tokenId",
												"nameLocation": "645:7:2",
												"nodeType": "VariableDeclaration",
												"scope": 176,
												"src": "629:23:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 173,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "629:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "579:74:2"
									},
									"src": "565:89:2"
								},
								{
									"anonymous": false,
									"documentation": {
										"id": 177,
										"nodeType": "StructuredDocumentation",
										"src": "660:117:2",
										"text": " @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets."
									},
									"id": 185,
									"name": "ApprovalForAll",
									"nameLocation": "788:14:2",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 184,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 179,
												"indexed": true,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "819:5:2",
												"nodeType": "VariableDeclaration",
												"scope": 185,
												"src": "803:21:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 178,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "803:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 181,
												"indexed": true,
												"mutability": "mutable",
												"name": "operator",
												"nameLocation": "842:8:2",
												"nodeType": "VariableDeclaration",
												"scope": 185,
												"src": "826:24:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 180,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "826:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 183,
												"indexed": false,
												"mutability": "mutable",
												"name": "approved",
												"nameLocation": "857:8:2",
												"nodeType": "VariableDeclaration",
												"scope": 185,
												"src": "852:13:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 182,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "852:4:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "802:64:2"
									},
									"src": "782:85:2"
								},
								{
									"documentation": {
										"id": 186,
										"nodeType": "StructuredDocumentation",
										"src": "873:76:2",
										"text": " @dev Returns the number of tokens in ``owner``'s account."
									},
									"functionSelector": "70a08231",
									"id": 193,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "balanceOf",
									"nameLocation": "963:9:2",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 189,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 188,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "981:5:2",
												"nodeType": "VariableDeclaration",
												"scope": 193,
												"src": "973:13:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 187,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "973:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "972:15:2"
									},
									"returnParameters": {
										"id": 192,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 191,
												"mutability": "mutable",
												"name": "balance",
												"nameLocation": "1019:7:2",
												"nodeType": "VariableDeclaration",
												"scope": 193,
												"src": "1011:15:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 190,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1011:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1010:17:2"
									},
									"scope": 268,
									"src": "954:74:2",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 194,
										"nodeType": "StructuredDocumentation",
										"src": "1034:131:2",
										"text": " @dev Returns the owner of the `tokenId` token.\n Requirements:\n - `tokenId` must exist."
									},
									"functionSelector": "6352211e",
									"id": 201,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "ownerOf",
									"nameLocation": "1179:7:2",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 197,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 196,
												"mutability": "mutable",
												"name": "tokenId",
												"nameLocation": "1195:7:2",
												"nodeType": "VariableDeclaration",
												"scope": 201,
												"src": "1187:15:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 195,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1187:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1186:17:2"
									},
									"returnParameters": {
										"id": 200,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 199,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "1235:5:2",
												"nodeType": "VariableDeclaration",
												"scope": 201,
												"src": "1227:13:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 198,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1227:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1226:15:2"
									},
									"scope": 268,
									"src": "1170:72:2",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 202,
										"nodeType": "StructuredDocumentation",
										"src": "1248:556:2",
										"text": " @dev Safely transfers `tokenId` token from `from` to `to`.\n Requirements:\n - `from` cannot be the zero address.\n - `to` cannot be the zero address.\n - `tokenId` token must exist and be owned by `from`.\n - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n Emits a {Transfer} event."
									},
									"functionSelector": "b88d4fde",
									"id": 213,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "safeTransferFrom",
									"nameLocation": "1818:16:2",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 211,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 204,
												"mutability": "mutable",
												"name": "from",
												"nameLocation": "1852:4:2",
												"nodeType": "VariableDeclaration",
												"scope": 213,
												"src": "1844:12:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 203,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1844:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 206,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "1874:2:2",
												"nodeType": "VariableDeclaration",
												"scope": 213,
												"src": "1866:10:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 205,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1866:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 208,
												"mutability": "mutable",
												"name": "tokenId",
												"nameLocation": "1894:7:2",
												"nodeType": "VariableDeclaration",
												"scope": 213,
												"src": "1886:15:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 207,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1886:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 210,
												"mutability": "mutable",
												"name": "data",
												"nameLocation": "1926:4:2",
												"nodeType": "VariableDeclaration",
												"scope": 213,
												"src": "1911:19:2",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_calldata_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 209,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "1911:5:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1834:102:2"
									},
									"returnParameters": {
										"id": 212,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1945:0:2"
									},
									"scope": 268,
									"src": "1809:137:2",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 214,
										"nodeType": "StructuredDocumentation",
										"src": "1952:687:2",
										"text": " @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n are aware of the ERC721 protocol to prevent tokens from being forever locked.\n Requirements:\n - `from` cannot be the zero address.\n - `to` cannot be the zero address.\n - `tokenId` token must exist and be owned by `from`.\n - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\n - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n Emits a {Transfer} event."
									},
									"functionSelector": "42842e0e",
									"id": 223,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "safeTransferFrom",
									"nameLocation": "2653:16:2",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 221,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 216,
												"mutability": "mutable",
												"name": "from",
												"nameLocation": "2687:4:2",
												"nodeType": "VariableDeclaration",
												"scope": 223,
												"src": "2679:12:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 215,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2679:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 218,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "2709:2:2",
												"nodeType": "VariableDeclaration",
												"scope": 223,
												"src": "2701:10:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 217,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2701:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 220,
												"mutability": "mutable",
												"name": "tokenId",
												"nameLocation": "2729:7:2",
												"nodeType": "VariableDeclaration",
												"scope": 223,
												"src": "2721:15:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 219,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2721:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2669:73:2"
									},
									"returnParameters": {
										"id": 222,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2751:0:2"
									},
									"scope": 268,
									"src": "2644:108:2",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 224,
										"nodeType": "StructuredDocumentation",
										"src": "2758:504:2",
										"text": " @dev Transfers `tokenId` token from `from` to `to`.\n WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\n Requirements:\n - `from` cannot be the zero address.\n - `to` cannot be the zero address.\n - `tokenId` token must be owned by `from`.\n - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n Emits a {Transfer} event."
									},
									"functionSelector": "23b872dd",
									"id": 233,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "transferFrom",
									"nameLocation": "3276:12:2",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 231,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 226,
												"mutability": "mutable",
												"name": "from",
												"nameLocation": "3306:4:2",
												"nodeType": "VariableDeclaration",
												"scope": 233,
												"src": "3298:12:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 225,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3298:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 228,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "3328:2:2",
												"nodeType": "VariableDeclaration",
												"scope": 233,
												"src": "3320:10:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 227,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3320:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 230,
												"mutability": "mutable",
												"name": "tokenId",
												"nameLocation": "3348:7:2",
												"nodeType": "VariableDeclaration",
												"scope": 233,
												"src": "3340:15:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 229,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3340:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3288:73:2"
									},
									"returnParameters": {
										"id": 232,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "3370:0:2"
									},
									"scope": 268,
									"src": "3267:104:2",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 234,
										"nodeType": "StructuredDocumentation",
										"src": "3377:452:2",
										"text": " @dev Gives permission to `to` to transfer `tokenId` token to another account.\n The approval is cleared when the token is transferred.\n Only a single account can be approved at a time, so approving the zero address clears previous approvals.\n Requirements:\n - The caller must own the token or be an approved operator.\n - `tokenId` must exist.\n Emits an {Approval} event."
									},
									"functionSelector": "095ea7b3",
									"id": 241,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "approve",
									"nameLocation": "3843:7:2",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 239,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 236,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "3859:2:2",
												"nodeType": "VariableDeclaration",
												"scope": 241,
												"src": "3851:10:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 235,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3851:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 238,
												"mutability": "mutable",
												"name": "tokenId",
												"nameLocation": "3871:7:2",
												"nodeType": "VariableDeclaration",
												"scope": 241,
												"src": "3863:15:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 237,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3863:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3850:29:2"
									},
									"returnParameters": {
										"id": 240,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "3888:0:2"
									},
									"scope": 268,
									"src": "3834:55:2",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 242,
										"nodeType": "StructuredDocumentation",
										"src": "3895:309:2",
										"text": " @dev Approve or remove `operator` as an operator for the caller.\n Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\n Requirements:\n - The `operator` cannot be the caller.\n Emits an {ApprovalForAll} event."
									},
									"functionSelector": "a22cb465",
									"id": 249,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "setApprovalForAll",
									"nameLocation": "4218:17:2",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 247,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 244,
												"mutability": "mutable",
												"name": "operator",
												"nameLocation": "4244:8:2",
												"nodeType": "VariableDeclaration",
												"scope": 249,
												"src": "4236:16:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 243,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4236:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 246,
												"mutability": "mutable",
												"name": "_approved",
												"nameLocation": "4259:9:2",
												"nodeType": "VariableDeclaration",
												"scope": 249,
												"src": "4254:14:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 245,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "4254:4:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4235:34:2"
									},
									"returnParameters": {
										"id": 248,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "4278:0:2"
									},
									"scope": 268,
									"src": "4209:70:2",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 250,
										"nodeType": "StructuredDocumentation",
										"src": "4285:139:2",
										"text": " @dev Returns the account approved for `tokenId` token.\n Requirements:\n - `tokenId` must exist."
									},
									"functionSelector": "081812fc",
									"id": 257,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "getApproved",
									"nameLocation": "4438:11:2",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 253,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 252,
												"mutability": "mutable",
												"name": "tokenId",
												"nameLocation": "4458:7:2",
												"nodeType": "VariableDeclaration",
												"scope": 257,
												"src": "4450:15:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 251,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4450:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4449:17:2"
									},
									"returnParameters": {
										"id": 256,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 255,
												"mutability": "mutable",
												"name": "operator",
												"nameLocation": "4498:8:2",
												"nodeType": "VariableDeclaration",
												"scope": 257,
												"src": "4490:16:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 254,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4490:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4489:18:2"
									},
									"scope": 268,
									"src": "4429:79:2",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 258,
										"nodeType": "StructuredDocumentation",
										"src": "4514:138:2",
										"text": " @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\n See {setApprovalForAll}"
									},
									"functionSelector": "e985e9c5",
									"id": 267,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "isApprovedForAll",
									"nameLocation": "4666:16:2",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 263,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 260,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "4691:5:2",
												"nodeType": "VariableDeclaration",
												"scope": 267,
												"src": "4683:13:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 259,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4683:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 262,
												"mutability": "mutable",
												"name": "operator",
												"nameLocation": "4706:8:2",
												"nodeType": "VariableDeclaration",
												"scope": 267,
												"src": "4698:16:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 261,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4698:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4682:33:2"
									},
									"returnParameters": {
										"id": 266,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 265,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 267,
												"src": "4739:4:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 264,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "4739:4:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4738:6:2"
									},
									"scope": 268,
									"src": "4657:88:2",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 269,
							"src": "250:4497:2",
							"usedErrors": []
						}
					],
					"src": "108:4640:2"
				},
				"id": 2
			},
			"@openzeppelin/contracts@4.7.3/token/ERC721/IERC721Receiver.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts@4.7.3/token/ERC721/IERC721Receiver.sol",
					"exportedSymbols": {
						"IERC721Receiver": [
							286
						]
					},
					"id": 287,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 270,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "116:23:3"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"contractDependencies": [],
							"contractKind": "interface",
							"documentation": {
								"id": 271,
								"nodeType": "StructuredDocumentation",
								"src": "141:152:3",
								"text": " @title ERC721 token receiver interface\n @dev Interface for any contract that wants to support safeTransfers\n from ERC721 asset contracts."
							},
							"fullyImplemented": false,
							"id": 286,
							"linearizedBaseContracts": [
								286
							],
							"name": "IERC721Receiver",
							"nameLocation": "304:15:3",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"documentation": {
										"id": 272,
										"nodeType": "StructuredDocumentation",
										"src": "326:493:3",
										"text": " @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\n by `operator` from `from`, this function is called.\n It must return its Solidity selector to confirm the token transfer.\n If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\n The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`."
									},
									"functionSelector": "150b7a02",
									"id": 285,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "onERC721Received",
									"nameLocation": "833:16:3",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 281,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 274,
												"mutability": "mutable",
												"name": "operator",
												"nameLocation": "867:8:3",
												"nodeType": "VariableDeclaration",
												"scope": 285,
												"src": "859:16:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 273,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "859:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 276,
												"mutability": "mutable",
												"name": "from",
												"nameLocation": "893:4:3",
												"nodeType": "VariableDeclaration",
												"scope": 285,
												"src": "885:12:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 275,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "885:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 278,
												"mutability": "mutable",
												"name": "tokenId",
												"nameLocation": "915:7:3",
												"nodeType": "VariableDeclaration",
												"scope": 285,
												"src": "907:15:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 277,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "907:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 280,
												"mutability": "mutable",
												"name": "data",
												"nameLocation": "947:4:3",
												"nodeType": "VariableDeclaration",
												"scope": 285,
												"src": "932:19:3",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_calldata_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 279,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "932:5:3",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "849:108:3"
									},
									"returnParameters": {
										"id": 284,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 283,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 285,
												"src": "976:6:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes4",
													"typeString": "bytes4"
												},
												"typeName": {
													"id": 282,
													"name": "bytes4",
													"nodeType": "ElementaryTypeName",
													"src": "976:6:3",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes4",
														"typeString": "bytes4"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "975:8:3"
									},
									"scope": 286,
									"src": "824:160:3",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 287,
							"src": "294:692:3",
							"usedErrors": []
						}
					],
					"src": "116:871:3"
				},
				"id": 3
			},
			"@openzeppelin/contracts@4.7.3/token/ERC721/utils/ERC721Holder.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts@4.7.3/token/ERC721/utils/ERC721Holder.sol",
					"exportedSymbols": {
						"ERC721Holder": [
							313
						],
						"IERC721Receiver": [
							286
						]
					},
					"id": 314,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 288,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "104:23:4"
						},
						{
							"absolutePath": "@openzeppelin/contracts@4.7.3/token/ERC721/IERC721Receiver.sol",
							"file": "../IERC721Receiver.sol",
							"id": 289,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 314,
							"sourceUnit": 287,
							"src": "129:32:4",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"abstract": false,
							"baseContracts": [
								{
									"baseName": {
										"id": 291,
										"name": "IERC721Receiver",
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 286,
										"src": "424:15:4"
									},
									"id": 292,
									"nodeType": "InheritanceSpecifier",
									"src": "424:15:4"
								}
							],
							"contractDependencies": [],
							"contractKind": "contract",
							"documentation": {
								"id": 290,
								"nodeType": "StructuredDocumentation",
								"src": "163:235:4",
								"text": " @dev Implementation of the {IERC721Receiver} interface.\n Accepts all token transfers.\n Make sure the contract is able to use its token with {IERC721-safeTransferFrom}, {IERC721-approve} or {IERC721-setApprovalForAll}."
							},
							"fullyImplemented": true,
							"id": 313,
							"linearizedBaseContracts": [
								313,
								286
							],
							"name": "ERC721Holder",
							"nameLocation": "408:12:4",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"baseFunctions": [
										285
									],
									"body": {
										"id": 311,
										"nodeType": "Block",
										"src": "734:54:4",
										"statements": [
											{
												"expression": {
													"expression": {
														"expression": {
															"id": 307,
															"name": "this",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 4294967268,
															"src": "751:4:4",
															"typeDescriptions": {
																"typeIdentifier": "t_contract$_ERC721Holder_$313",
																"typeString": "contract ERC721Holder"
															}
														},
														"id": 308,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "onERC721Received",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 312,
														"src": "751:21:4",
														"typeDescriptions": {
															"typeIdentifier": "t_function_external_nonpayable$_t_address_$_t_address_$_t_uint256_$_t_bytes_memory_ptr_$returns$_t_bytes4_$",
															"typeString": "function (address,address,uint256,bytes memory) external returns (bytes4)"
														}
													},
													"id": 309,
													"isConstant": false,
													"isLValue": false,
													"isPure": true,
													"lValueRequested": false,
													"memberName": "selector",
													"nodeType": "MemberAccess",
													"src": "751:30:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes4",
														"typeString": "bytes4"
													}
												},
												"functionReturnParameters": 306,
												"id": 310,
												"nodeType": "Return",
												"src": "744:37:4"
											}
										]
									},
									"documentation": {
										"id": 293,
										"nodeType": "StructuredDocumentation",
										"src": "446:137:4",
										"text": " @dev See {IERC721Receiver-onERC721Received}.\n Always returns `IERC721Receiver.onERC721Received.selector`."
									},
									"functionSelector": "150b7a02",
									"id": 312,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "onERC721Received",
									"nameLocation": "597:16:4",
									"nodeType": "FunctionDefinition",
									"overrides": {
										"id": 303,
										"nodeType": "OverrideSpecifier",
										"overrides": [],
										"src": "708:8:4"
									},
									"parameters": {
										"id": 302,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 295,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 312,
												"src": "623:7:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 294,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "623:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 297,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 312,
												"src": "640:7:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 296,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "640:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 299,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 312,
												"src": "657:7:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 298,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "657:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 301,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 312,
												"src": "674:12:4",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 300,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "674:5:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "613:79:4"
									},
									"returnParameters": {
										"id": 306,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 305,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 312,
												"src": "726:6:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes4",
													"typeString": "bytes4"
												},
												"typeName": {
													"id": 304,
													"name": "bytes4",
													"nodeType": "ElementaryTypeName",
													"src": "726:6:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes4",
														"typeString": "bytes4"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "725:8:4"
									},
									"scope": 313,
									"src": "588:200:4",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "public"
								}
							],
							"scope": 314,
							"src": "399:391:4",
							"usedErrors": []
						}
					],
					"src": "104:687:4"
				},
				"id": 4
			},
			"@openzeppelin/contracts@4.7.3/utils/Context.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts@4.7.3/utils/Context.sol",
					"exportedSymbols": {
						"Context": [
							335
						]
					},
					"id": 336,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 315,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "86:23:5"
						},
						{
							"abstract": true,
							"baseContracts": [],
							"contractDependencies": [],
							"contractKind": "contract",
							"documentation": {
								"id": 316,
								"nodeType": "StructuredDocumentation",
								"src": "111:496:5",
								"text": " @dev Provides information about the current execution context, including the\n sender of the transaction and its data. While these are generally available\n via msg.sender and msg.data, they should not be accessed in such a direct\n manner, since when dealing with meta-transactions the account sending and\n paying for execution may not be the actual sender (as far as an application\n is concerned).\n This contract is only required for intermediate, library-like contracts."
							},
							"fullyImplemented": true,
							"id": 335,
							"linearizedBaseContracts": [
								335
							],
							"name": "Context",
							"nameLocation": "626:7:5",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"body": {
										"id": 324,
										"nodeType": "Block",
										"src": "702:34:5",
										"statements": [
											{
												"expression": {
													"expression": {
														"id": 321,
														"name": "msg",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 4294967281,
														"src": "719:3:5",
														"typeDescriptions": {
															"typeIdentifier": "t_magic_message",
															"typeString": "msg"
														}
													},
													"id": 322,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"memberName": "sender",
													"nodeType": "MemberAccess",
													"src": "719:10:5",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"functionReturnParameters": 320,
												"id": 323,
												"nodeType": "Return",
												"src": "712:17:5"
											}
										]
									},
									"id": 325,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_msgSender",
									"nameLocation": "649:10:5",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 317,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "659:2:5"
									},
									"returnParameters": {
										"id": 320,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 319,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 325,
												"src": "693:7:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 318,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "693:7:5",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "692:9:5"
									},
									"scope": 335,
									"src": "640:96:5",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 333,
										"nodeType": "Block",
										"src": "809:32:5",
										"statements": [
											{
												"expression": {
													"expression": {
														"id": 330,
														"name": "msg",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 4294967281,
														"src": "826:3:5",
														"typeDescriptions": {
															"typeIdentifier": "t_magic_message",
															"typeString": "msg"
														}
													},
													"id": 331,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"memberName": "data",
													"nodeType": "MemberAccess",
													"src": "826:8:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_calldata_ptr",
														"typeString": "bytes calldata"
													}
												},
												"functionReturnParameters": 329,
												"id": 332,
												"nodeType": "Return",
												"src": "819:15:5"
											}
										]
									},
									"id": 334,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_msgData",
									"nameLocation": "751:8:5",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 326,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "759:2:5"
									},
									"returnParameters": {
										"id": 329,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 328,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 334,
												"src": "793:14:5",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_calldata_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 327,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "793:5:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "792:16:5"
									},
									"scope": 335,
									"src": "742:99:5",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "internal"
								}
							],
							"scope": 336,
							"src": "608:235:5",
							"usedErrors": []
						}
					],
					"src": "86:758:5"
				},
				"id": 5
			},
			"@openzeppelin/contracts@4.7.3/utils/Counters.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts@4.7.3/utils/Counters.sol",
					"exportedSymbols": {
						"Counters": [
							409
						]
					},
					"id": 410,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 337,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "87:23:6"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"contractDependencies": [],
							"contractKind": "library",
							"documentation": {
								"id": 338,
								"nodeType": "StructuredDocumentation",
								"src": "112:311:6",
								"text": " @title Counters\n @author Matt Condon (@shrugs)\n @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\n of elements in a mapping, issuing ERC721 ids, or counting request ids.\n Include with `using Counters for Counters.Counter;`"
							},
							"fullyImplemented": true,
							"id": 409,
							"linearizedBaseContracts": [
								409
							],
							"name": "Counters",
							"nameLocation": "432:8:6",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"canonicalName": "Counters.Counter",
									"id": 341,
									"members": [
										{
											"constant": false,
											"id": 340,
											"mutability": "mutable",
											"name": "_value",
											"nameLocation": "794:6:6",
											"nodeType": "VariableDeclaration",
											"scope": 341,
											"src": "786:14:6",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											},
											"typeName": {
												"id": 339,
												"name": "uint256",
												"nodeType": "ElementaryTypeName",
												"src": "786:7:6",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												}
											},
											"visibility": "internal"
										}
									],
									"name": "Counter",
									"nameLocation": "454:7:6",
									"nodeType": "StructDefinition",
									"scope": 409,
									"src": "447:374:6",
									"visibility": "public"
								},
								{
									"body": {
										"id": 352,
										"nodeType": "Block",
										"src": "901:38:6",
										"statements": [
											{
												"expression": {
													"expression": {
														"id": 349,
														"name": "counter",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 344,
														"src": "918:7:6",
														"typeDescriptions": {
															"typeIdentifier": "t_struct$_Counter_$341_storage_ptr",
															"typeString": "struct Counters.Counter storage pointer"
														}
													},
													"id": 350,
													"isConstant": false,
													"isLValue": true,
													"isPure": false,
													"lValueRequested": false,
													"memberName": "_value",
													"nodeType": "MemberAccess",
													"referencedDeclaration": 340,
													"src": "918:14:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 348,
												"id": 351,
												"nodeType": "Return",
												"src": "911:21:6"
											}
										]
									},
									"id": 353,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "current",
									"nameLocation": "836:7:6",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 345,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 344,
												"mutability": "mutable",
												"name": "counter",
												"nameLocation": "860:7:6",
												"nodeType": "VariableDeclaration",
												"scope": 353,
												"src": "844:23:6",
												"stateVariable": false,
												"storageLocation": "storage",
												"typeDescriptions": {
													"typeIdentifier": "t_struct$_Counter_$341_storage_ptr",
													"typeString": "struct Counters.Counter"
												},
												"typeName": {
													"id": 343,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 342,
														"name": "Counter",
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 341,
														"src": "844:7:6"
													},
													"referencedDeclaration": 341,
													"src": "844:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_Counter_$341_storage_ptr",
														"typeString": "struct Counters.Counter"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "843:25:6"
									},
									"returnParameters": {
										"id": 348,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 347,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 353,
												"src": "892:7:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 346,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "892:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "891:9:6"
									},
									"scope": 409,
									"src": "827:112:6",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 366,
										"nodeType": "Block",
										"src": "998:70:6",
										"statements": [
											{
												"id": 365,
												"nodeType": "UncheckedBlock",
												"src": "1008:54:6",
												"statements": [
													{
														"expression": {
															"id": 363,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftHandSide": {
																"expression": {
																	"id": 359,
																	"name": "counter",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 356,
																	"src": "1032:7:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_struct$_Counter_$341_storage_ptr",
																		"typeString": "struct Counters.Counter storage pointer"
																	}
																},
																"id": 361,
																"isConstant": false,
																"isLValue": true,
																"isPure": false,
																"lValueRequested": true,
																"memberName": "_value",
																"nodeType": "MemberAccess",
																"referencedDeclaration": 340,
																"src": "1032:14:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "Assignment",
															"operator": "+=",
															"rightHandSide": {
																"hexValue": "31",
																"id": 362,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "1050:1:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_1_by_1",
																	"typeString": "int_const 1"
																},
																"value": "1"
															},
															"src": "1032:19:6",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"id": 364,
														"nodeType": "ExpressionStatement",
														"src": "1032:19:6"
													}
												]
											}
										]
									},
									"id": 367,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "increment",
									"nameLocation": "954:9:6",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 357,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 356,
												"mutability": "mutable",
												"name": "counter",
												"nameLocation": "980:7:6",
												"nodeType": "VariableDeclaration",
												"scope": 367,
												"src": "964:23:6",
												"stateVariable": false,
												"storageLocation": "storage",
												"typeDescriptions": {
													"typeIdentifier": "t_struct$_Counter_$341_storage_ptr",
													"typeString": "struct Counters.Counter"
												},
												"typeName": {
													"id": 355,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 354,
														"name": "Counter",
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 341,
														"src": "964:7:6"
													},
													"referencedDeclaration": 341,
													"src": "964:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_Counter_$341_storage_ptr",
														"typeString": "struct Counters.Counter"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "963:25:6"
									},
									"returnParameters": {
										"id": 358,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "998:0:6"
									},
									"scope": 409,
									"src": "945:123:6",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 394,
										"nodeType": "Block",
										"src": "1127:176:6",
										"statements": [
											{
												"assignments": [
													374
												],
												"declarations": [
													{
														"constant": false,
														"id": 374,
														"mutability": "mutable",
														"name": "value",
														"nameLocation": "1145:5:6",
														"nodeType": "VariableDeclaration",
														"scope": 394,
														"src": "1137:13:6",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 373,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "1137:7:6",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 377,
												"initialValue": {
													"expression": {
														"id": 375,
														"name": "counter",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 370,
														"src": "1153:7:6",
														"typeDescriptions": {
															"typeIdentifier": "t_struct$_Counter_$341_storage_ptr",
															"typeString": "struct Counters.Counter storage pointer"
														}
													},
													"id": 376,
													"isConstant": false,
													"isLValue": true,
													"isPure": false,
													"lValueRequested": false,
													"memberName": "_value",
													"nodeType": "MemberAccess",
													"referencedDeclaration": 340,
													"src": "1153:14:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "1137:30:6"
											},
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 381,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 379,
																"name": "value",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 374,
																"src": "1185:5:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">",
															"rightExpression": {
																"hexValue": "30",
																"id": 380,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "1193:1:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"src": "1185:9:6",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "436f756e7465723a2064656372656d656e74206f766572666c6f77",
															"id": 382,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "1196:29:6",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_1dfd0d5389474d871b8e8929aab9d4def041f55f90f625754fb5f9a9ba08af6f",
																"typeString": "literal_string \"Counter: decrement overflow\""
															},
															"value": "Counter: decrement overflow"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_1dfd0d5389474d871b8e8929aab9d4def041f55f90f625754fb5f9a9ba08af6f",
																"typeString": "literal_string \"Counter: decrement overflow\""
															}
														],
														"id": 378,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "1177:7:6",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 383,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1177:49:6",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 384,
												"nodeType": "ExpressionStatement",
												"src": "1177:49:6"
											},
											{
												"id": 393,
												"nodeType": "UncheckedBlock",
												"src": "1236:61:6",
												"statements": [
													{
														"expression": {
															"id": 391,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftHandSide": {
																"expression": {
																	"id": 385,
																	"name": "counter",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 370,
																	"src": "1260:7:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_struct$_Counter_$341_storage_ptr",
																		"typeString": "struct Counters.Counter storage pointer"
																	}
																},
																"id": 387,
																"isConstant": false,
																"isLValue": true,
																"isPure": false,
																"lValueRequested": true,
																"memberName": "_value",
																"nodeType": "MemberAccess",
																"referencedDeclaration": 340,
																"src": "1260:14:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "Assignment",
															"operator": "=",
															"rightHandSide": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 390,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 388,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 374,
																	"src": "1277:5:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "-",
																"rightExpression": {
																	"hexValue": "31",
																	"id": 389,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "1285:1:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_1_by_1",
																		"typeString": "int_const 1"
																	},
																	"value": "1"
																},
																"src": "1277:9:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "1260:26:6",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"id": 392,
														"nodeType": "ExpressionStatement",
														"src": "1260:26:6"
													}
												]
											}
										]
									},
									"id": 395,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "decrement",
									"nameLocation": "1083:9:6",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 371,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 370,
												"mutability": "mutable",
												"name": "counter",
												"nameLocation": "1109:7:6",
												"nodeType": "VariableDeclaration",
												"scope": 395,
												"src": "1093:23:6",
												"stateVariable": false,
												"storageLocation": "storage",
												"typeDescriptions": {
													"typeIdentifier": "t_struct$_Counter_$341_storage_ptr",
													"typeString": "struct Counters.Counter"
												},
												"typeName": {
													"id": 369,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 368,
														"name": "Counter",
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 341,
														"src": "1093:7:6"
													},
													"referencedDeclaration": 341,
													"src": "1093:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_Counter_$341_storage_ptr",
														"typeString": "struct Counters.Counter"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1092:25:6"
									},
									"returnParameters": {
										"id": 372,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1127:0:6"
									},
									"scope": 409,
									"src": "1074:229:6",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 407,
										"nodeType": "Block",
										"src": "1358:35:6",
										"statements": [
											{
												"expression": {
													"id": 405,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"expression": {
															"id": 401,
															"name": "counter",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 398,
															"src": "1368:7:6",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_Counter_$341_storage_ptr",
																"typeString": "struct Counters.Counter storage pointer"
															}
														},
														"id": 403,
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"memberName": "_value",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 340,
														"src": "1368:14:6",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"hexValue": "30",
														"id": 404,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "1385:1:6",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "1368:18:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 406,
												"nodeType": "ExpressionStatement",
												"src": "1368:18:6"
											}
										]
									},
									"id": 408,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "reset",
									"nameLocation": "1318:5:6",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 399,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 398,
												"mutability": "mutable",
												"name": "counter",
												"nameLocation": "1340:7:6",
												"nodeType": "VariableDeclaration",
												"scope": 408,
												"src": "1324:23:6",
												"stateVariable": false,
												"storageLocation": "storage",
												"typeDescriptions": {
													"typeIdentifier": "t_struct$_Counter_$341_storage_ptr",
													"typeString": "struct Counters.Counter"
												},
												"typeName": {
													"id": 397,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 396,
														"name": "Counter",
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 341,
														"src": "1324:7:6"
													},
													"referencedDeclaration": 341,
													"src": "1324:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_Counter_$341_storage_ptr",
														"typeString": "struct Counters.Counter"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1323:25:6"
									},
									"returnParameters": {
										"id": 400,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1358:0:6"
									},
									"scope": 409,
									"src": "1309:84:6",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								}
							],
							"scope": 410,
							"src": "424:971:6",
							"usedErrors": []
						}
					],
					"src": "87:1309:6"
				},
				"id": 6
			},
			"@openzeppelin/contracts@4.7.3/utils/introspection/IERC165.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts@4.7.3/utils/introspection/IERC165.sol",
					"exportedSymbols": {
						"IERC165": [
							421
						]
					},
					"id": 422,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 411,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "100:23:7"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"contractDependencies": [],
							"contractKind": "interface",
							"documentation": {
								"id": 412,
								"nodeType": "StructuredDocumentation",
								"src": "125:279:7",
								"text": " @dev Interface of the ERC165 standard, as defined in the\n https://eips.ethereum.org/EIPS/eip-165[EIP].\n Implementers can declare support of contract interfaces, which can then be\n queried by others ({ERC165Checker}).\n For an implementation, see {ERC165}."
							},
							"fullyImplemented": false,
							"id": 421,
							"linearizedBaseContracts": [
								421
							],
							"name": "IERC165",
							"nameLocation": "415:7:7",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"documentation": {
										"id": 413,
										"nodeType": "StructuredDocumentation",
										"src": "429:340:7",
										"text": " @dev Returns true if this contract implements the interface defined by\n `interfaceId`. See the corresponding\n https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n to learn more about how these ids are created.\n This function call must use less than 30 000 gas."
									},
									"functionSelector": "01ffc9a7",
									"id": 420,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "supportsInterface",
									"nameLocation": "783:17:7",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 416,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 415,
												"mutability": "mutable",
												"name": "interfaceId",
												"nameLocation": "808:11:7",
												"nodeType": "VariableDeclaration",
												"scope": 420,
												"src": "801:18:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes4",
													"typeString": "bytes4"
												},
												"typeName": {
													"id": 414,
													"name": "bytes4",
													"nodeType": "ElementaryTypeName",
													"src": "801:6:7",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes4",
														"typeString": "bytes4"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "800:20:7"
									},
									"returnParameters": {
										"id": 419,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 418,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 420,
												"src": "844:4:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 417,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "844:4:7",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "843:6:7"
									},
									"scope": 421,
									"src": "774:76:7",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 422,
							"src": "405:447:7",
							"usedErrors": []
						}
					],
					"src": "100:753:7"
				},
				"id": 7
			},
			"contracts/NFTStaking.sol": {
				"ast": {
					"absolutePath": "contracts/NFTStaking.sol",
					"exportedSymbols": {
						"Context": [
							335
						],
						"Counters": [
							409
						],
						"ERC721Holder": [
							313
						],
						"IERC165": [
							421
						],
						"IERC721": [
							268
						],
						"IERC721Receiver": [
							286
						],
						"Ownable": [
							112
						],
						"ReentrancyGuard": [
							152
						],
						"SacredTemple": [
							560
						]
					},
					"id": 561,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 423,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".4"
							],
							"nodeType": "PragmaDirective",
							"src": "32:23:8"
						},
						{
							"absolutePath": "@openzeppelin/contracts@4.7.3/access/Ownable.sol",
							"file": "@openzeppelin/contracts@4.7.3/access/Ownable.sol",
							"id": 424,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 561,
							"sourceUnit": 113,
							"src": "57:58:8",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "@openzeppelin/contracts@4.7.3/security/ReentrancyGuard.sol",
							"file": "@openzeppelin/contracts@4.7.3/security/ReentrancyGuard.sol",
							"id": 425,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 561,
							"sourceUnit": 153,
							"src": "116:68:8",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "@openzeppelin/contracts@4.7.3/token/ERC721/utils/ERC721Holder.sol",
							"file": "@openzeppelin/contracts@4.7.3/token/ERC721/utils/ERC721Holder.sol",
							"id": 426,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 561,
							"sourceUnit": 314,
							"src": "185:75:8",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "@openzeppelin/contracts@4.7.3/token/ERC721/IERC721.sol",
							"file": "@openzeppelin/contracts@4.7.3/token/ERC721/IERC721.sol",
							"id": 427,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 561,
							"sourceUnit": 269,
							"src": "261:64:8",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "@openzeppelin/contracts@4.7.3/utils/Counters.sol",
							"file": "@openzeppelin/contracts@4.7.3/utils/Counters.sol",
							"id": 428,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 561,
							"sourceUnit": 410,
							"src": "326:58:8",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"abstract": false,
							"baseContracts": [
								{
									"baseName": {
										"id": 429,
										"name": "Ownable",
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 112,
										"src": "411:7:8"
									},
									"id": 430,
									"nodeType": "InheritanceSpecifier",
									"src": "411:7:8"
								},
								{
									"baseName": {
										"id": 431,
										"name": "ERC721Holder",
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 313,
										"src": "420:12:8"
									},
									"id": 432,
									"nodeType": "InheritanceSpecifier",
									"src": "420:12:8"
								},
								{
									"baseName": {
										"id": 433,
										"name": "ReentrancyGuard",
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 152,
										"src": "434:15:8"
									},
									"id": 434,
									"nodeType": "InheritanceSpecifier",
									"src": "434:15:8"
								}
							],
							"contractDependencies": [],
							"contractKind": "contract",
							"fullyImplemented": true,
							"id": 560,
							"linearizedBaseContracts": [
								560,
								152,
								313,
								286,
								112,
								335
							],
							"name": "SacredTemple",
							"nameLocation": "395:12:8",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"constant": false,
									"id": 437,
									"mutability": "mutable",
									"name": "_nftContract",
									"nameLocation": "464:12:8",
									"nodeType": "VariableDeclaration",
									"scope": 560,
									"src": "456:20:8",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_contract$_IERC721_$268",
										"typeString": "contract IERC721"
									},
									"typeName": {
										"id": 436,
										"nodeType": "UserDefinedTypeName",
										"pathNode": {
											"id": 435,
											"name": "IERC721",
											"nodeType": "IdentifierPath",
											"referencedDeclaration": 268,
											"src": "456:7:8"
										},
										"referencedDeclaration": 268,
										"src": "456:7:8",
										"typeDescriptions": {
											"typeIdentifier": "t_contract$_IERC721_$268",
											"typeString": "contract IERC721"
										}
									},
									"visibility": "internal"
								},
								{
									"id": 441,
									"libraryName": {
										"id": 438,
										"name": "Counters",
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 409,
										"src": "489:8:8"
									},
									"nodeType": "UsingForDirective",
									"src": "483:36:8",
									"typeName": {
										"id": 440,
										"nodeType": "UserDefinedTypeName",
										"pathNode": {
											"id": 439,
											"name": "Counters.Counter",
											"nodeType": "IdentifierPath",
											"referencedDeclaration": 341,
											"src": "502:16:8"
										},
										"referencedDeclaration": 341,
										"src": "502:16:8",
										"typeDescriptions": {
											"typeIdentifier": "t_struct$_Counter_$341_storage_ptr",
											"typeString": "struct Counters.Counter"
										}
									}
								},
								{
									"constant": false,
									"id": 444,
									"mutability": "mutable",
									"name": "_stakedNFTCounter",
									"nameLocation": "549:17:8",
									"nodeType": "VariableDeclaration",
									"scope": 560,
									"src": "524:42:8",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_struct$_Counter_$341_storage",
										"typeString": "struct Counters.Counter"
									},
									"typeName": {
										"id": 443,
										"nodeType": "UserDefinedTypeName",
										"pathNode": {
											"id": 442,
											"name": "Counters.Counter",
											"nodeType": "IdentifierPath",
											"referencedDeclaration": 341,
											"src": "524:16:8"
										},
										"referencedDeclaration": 341,
										"src": "524:16:8",
										"typeDescriptions": {
											"typeIdentifier": "t_struct$_Counter_$341_storage_ptr",
											"typeString": "struct Counters.Counter"
										}
									},
									"visibility": "private"
								},
								{
									"anonymous": false,
									"id": 452,
									"name": "NFTStaked",
									"nameLocation": "579:9:8",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 451,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 446,
												"indexed": false,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "597:5:8",
												"nodeType": "VariableDeclaration",
												"scope": 452,
												"src": "589:13:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 445,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "589:7:8",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 448,
												"indexed": false,
												"mutability": "mutable",
												"name": "tokenId",
												"nameLocation": "612:7:8",
												"nodeType": "VariableDeclaration",
												"scope": 452,
												"src": "604:15:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 447,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "604:7:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 450,
												"indexed": false,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "629:5:8",
												"nodeType": "VariableDeclaration",
												"scope": 452,
												"src": "621:13:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 449,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "621:7:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "588:47:8"
									},
									"src": "573:63:8"
								},
								{
									"anonymous": false,
									"id": 460,
									"name": "NFTUnstaked",
									"nameLocation": "647:11:8",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 459,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 454,
												"indexed": false,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "667:5:8",
												"nodeType": "VariableDeclaration",
												"scope": 460,
												"src": "659:13:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 453,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "659:7:8",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 456,
												"indexed": false,
												"mutability": "mutable",
												"name": "tokenId",
												"nameLocation": "682:7:8",
												"nodeType": "VariableDeclaration",
												"scope": 460,
												"src": "674:15:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 455,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "674:7:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 458,
												"indexed": false,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "699:5:8",
												"nodeType": "VariableDeclaration",
												"scope": 460,
												"src": "691:13:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 457,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "691:7:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "658:47:8"
									},
									"src": "641:65:8"
								},
								{
									"anonymous": false,
									"id": 466,
									"name": "Claimed",
									"nameLocation": "717:7:8",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 465,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 462,
												"indexed": false,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "733:5:8",
												"nodeType": "VariableDeclaration",
												"scope": 466,
												"src": "725:13:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 461,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "725:7:8",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 464,
												"indexed": false,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "748:6:8",
												"nodeType": "VariableDeclaration",
												"scope": 466,
												"src": "740:14:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 463,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "740:7:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "724:31:8"
									},
									"src": "711:45:8"
								},
								{
									"constant": false,
									"functionSelector": "8488cc41",
									"id": 470,
									"mutability": "mutable",
									"name": "tokenOwnedBy",
									"nameLocation": "798:12:8",
									"nodeType": "VariableDeclaration",
									"scope": 560,
									"src": "762:48:8",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_mapping$_t_uint256_$_t_address_$",
										"typeString": "mapping(uint256 => address)"
									},
									"typeName": {
										"id": 469,
										"keyType": {
											"id": 467,
											"name": "uint256",
											"nodeType": "ElementaryTypeName",
											"src": "771:7:8",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											}
										},
										"nodeType": "Mapping",
										"src": "762:28:8",
										"typeDescriptions": {
											"typeIdentifier": "t_mapping$_t_uint256_$_t_address_$",
											"typeString": "mapping(uint256 => address)"
										},
										"valueType": {
											"id": 468,
											"name": "address",
											"nodeType": "ElementaryTypeName",
											"src": "782:7:8",
											"stateMutability": "nonpayable",
											"typeDescriptions": {
												"typeIdentifier": "t_address",
												"typeString": "address"
											}
										}
									},
									"visibility": "public"
								},
								{
									"constant": false,
									"functionSelector": "0700037d",
									"id": 474,
									"mutability": "mutable",
									"name": "rewards",
									"nameLocation": "852:7:8",
									"nodeType": "VariableDeclaration",
									"scope": 560,
									"src": "816:43:8",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
										"typeString": "mapping(address => uint256)"
									},
									"typeName": {
										"id": 473,
										"keyType": {
											"id": 471,
											"name": "address",
											"nodeType": "ElementaryTypeName",
											"src": "825:7:8",
											"typeDescriptions": {
												"typeIdentifier": "t_address",
												"typeString": "address"
											}
										},
										"nodeType": "Mapping",
										"src": "816:28:8",
										"typeDescriptions": {
											"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
											"typeString": "mapping(address => uint256)"
										},
										"valueType": {
											"id": 472,
											"name": "uint256",
											"nodeType": "ElementaryTypeName",
											"src": "836:7:8",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											}
										}
									},
									"visibility": "public"
								},
								{
									"body": {
										"id": 484,
										"nodeType": "Block",
										"src": "901:44:8",
										"statements": [
											{
												"expression": {
													"id": 482,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 480,
														"name": "_nftContract",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 437,
														"src": "911:12:8",
														"typeDescriptions": {
															"typeIdentifier": "t_contract$_IERC721_$268",
															"typeString": "contract IERC721"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 481,
														"name": "nftContract_",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 477,
														"src": "926:12:8",
														"typeDescriptions": {
															"typeIdentifier": "t_contract$_IERC721_$268",
															"typeString": "contract IERC721"
														}
													},
													"src": "911:27:8",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_IERC721_$268",
														"typeString": "contract IERC721"
													}
												},
												"id": 483,
												"nodeType": "ExpressionStatement",
												"src": "911:27:8"
											}
										]
									},
									"id": 485,
									"implemented": true,
									"kind": "constructor",
									"modifiers": [],
									"name": "",
									"nameLocation": "-1:-1:-1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 478,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 477,
												"mutability": "mutable",
												"name": "nftContract_",
												"nameLocation": "887:12:8",
												"nodeType": "VariableDeclaration",
												"scope": 485,
												"src": "879:20:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_IERC721_$268",
													"typeString": "contract IERC721"
												},
												"typeName": {
													"id": 476,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 475,
														"name": "IERC721",
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 268,
														"src": "879:7:8"
													},
													"referencedDeclaration": 268,
													"src": "879:7:8",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_IERC721_$268",
														"typeString": "contract IERC721"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "878:22:8"
									},
									"returnParameters": {
										"id": 479,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "901:0:8"
									},
									"scope": 560,
									"src": "866:79:8",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "public"
								},
								{
									"body": {
										"id": 514,
										"nodeType": "Block",
										"src": "992:165:8",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"expression": {
																"id": 493,
																"name": "msg",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 4294967281,
																"src": "1032:3:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_magic_message",
																	"typeString": "msg"
																}
															},
															"id": 494,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "sender",
															"nodeType": "MemberAccess",
															"src": "1032:10:8",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"arguments": [
																{
																	"id": 497,
																	"name": "this",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967268,
																	"src": "1052:4:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_contract$_SacredTemple_$560",
																		"typeString": "contract SacredTemple"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_contract$_SacredTemple_$560",
																		"typeString": "contract SacredTemple"
																	}
																],
																"id": 496,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "1044:7:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_$",
																	"typeString": "type(address)"
																},
																"typeName": {
																	"id": 495,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "1044:7:8",
																	"typeDescriptions": {}
																}
															},
															"id": 498,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "typeConversion",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "1044:13:8",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 499,
															"name": "tokenId",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 487,
															"src": "1059:7:8",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"expression": {
															"id": 490,
															"name": "_nftContract",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 437,
															"src": "1002:12:8",
															"typeDescriptions": {
																"typeIdentifier": "t_contract$_IERC721_$268",
																"typeString": "contract IERC721"
															}
														},
														"id": 492,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "safeTransferFrom",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 223,
														"src": "1002:29:8",
														"typeDescriptions": {
															"typeIdentifier": "t_function_external_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256) external"
														}
													},
													"id": 500,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1002:65:8",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 501,
												"nodeType": "ExpressionStatement",
												"src": "1002:65:8"
											},
											{
												"expression": {
													"id": 507,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"baseExpression": {
															"id": 502,
															"name": "tokenOwnedBy",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 470,
															"src": "1077:12:8",
															"typeDescriptions": {
																"typeIdentifier": "t_mapping$_t_uint256_$_t_address_$",
																"typeString": "mapping(uint256 => address)"
															}
														},
														"id": 504,
														"indexExpression": {
															"id": 503,
															"name": "tokenId",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 487,
															"src": "1090:7:8",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"nodeType": "IndexAccess",
														"src": "1077:21:8",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"expression": {
															"id": 505,
															"name": "msg",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 4294967281,
															"src": "1101:3:8",
															"typeDescriptions": {
																"typeIdentifier": "t_magic_message",
																"typeString": "msg"
															}
														},
														"id": 506,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "sender",
														"nodeType": "MemberAccess",
														"src": "1101:10:8",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "1077:34:8",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"id": 508,
												"nodeType": "ExpressionStatement",
												"src": "1077:34:8"
											},
											{
												"expression": {
													"arguments": [],
													"expression": {
														"argumentTypes": [],
														"expression": {
															"id": 509,
															"name": "_stakedNFTCounter",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 444,
															"src": "1121:17:8",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_Counter_$341_storage",
																"typeString": "struct Counters.Counter storage ref"
															}
														},
														"id": 511,
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "increment",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 367,
														"src": "1121:27:8",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_struct$_Counter_$341_storage_ptr_$returns$__$bound_to$_t_struct$_Counter_$341_storage_ptr_$",
															"typeString": "function (struct Counters.Counter storage pointer)"
														}
													},
													"id": 512,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1121:29:8",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 513,
												"nodeType": "ExpressionStatement",
												"src": "1121:29:8"
											}
										]
									},
									"functionSelector": "a694fc3a",
									"id": 515,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "stake",
									"nameLocation": "960:5:8",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 488,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 487,
												"mutability": "mutable",
												"name": "tokenId",
												"nameLocation": "974:7:8",
												"nodeType": "VariableDeclaration",
												"scope": 515,
												"src": "966:15:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 486,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "966:7:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "965:17:8"
									},
									"returnParameters": {
										"id": 489,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "992:0:8"
									},
									"scope": 560,
									"src": "951:206:8",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"body": {
										"id": 554,
										"nodeType": "Block",
										"src": "1219:239:8",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															"id": 528,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"baseExpression": {
																	"id": 523,
																	"name": "tokenOwnedBy",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 470,
																	"src": "1237:12:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_mapping$_t_uint256_$_t_address_$",
																		"typeString": "mapping(uint256 => address)"
																	}
																},
																"id": 525,
																"indexExpression": {
																	"id": 524,
																	"name": "tokenId",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 517,
																	"src": "1250:7:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"isConstant": false,
																"isLValue": true,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "IndexAccess",
																"src": "1237:21:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "==",
															"rightExpression": {
																"expression": {
																	"id": 526,
																	"name": "msg",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967281,
																	"src": "1262:3:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_magic_message",
																		"typeString": "msg"
																	}
																},
																"id": 527,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberName": "sender",
																"nodeType": "MemberAccess",
																"src": "1262:10:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"src": "1237:35:8",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "596f7520617265206e6f7420746865206f776e65722e",
															"id": 529,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "1274:24:8",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_d18e18996dbf7b96f1392a5c98d6c1530dd77cf511c83e06c26beea9e4342c3f",
																"typeString": "literal_string \"You are not the owner.\""
															},
															"value": "You are not the owner."
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_d18e18996dbf7b96f1392a5c98d6c1530dd77cf511c83e06c26beea9e4342c3f",
																"typeString": "literal_string \"You are not the owner.\""
															}
														],
														"id": 522,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "1229:7:8",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 530,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1229:70:8",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 531,
												"nodeType": "ExpressionStatement",
												"src": "1229:70:8"
											},
											{
												"expression": {
													"id": 535,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "UnaryOperation",
													"operator": "delete",
													"prefix": true,
													"src": "1309:28:8",
													"subExpression": {
														"baseExpression": {
															"id": 532,
															"name": "tokenOwnedBy",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 470,
															"src": "1316:12:8",
															"typeDescriptions": {
																"typeIdentifier": "t_mapping$_t_uint256_$_t_address_$",
																"typeString": "mapping(uint256 => address)"
															}
														},
														"id": 534,
														"indexExpression": {
															"id": 533,
															"name": "tokenId",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 517,
															"src": "1329:7:8",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"nodeType": "IndexAccess",
														"src": "1316:21:8",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 536,
												"nodeType": "ExpressionStatement",
												"src": "1309:28:8"
											},
											{
												"expression": {
													"arguments": [],
													"expression": {
														"argumentTypes": [],
														"expression": {
															"id": 537,
															"name": "_stakedNFTCounter",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 444,
															"src": "1347:17:8",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_Counter_$341_storage",
																"typeString": "struct Counters.Counter storage ref"
															}
														},
														"id": 539,
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "decrement",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 395,
														"src": "1347:27:8",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_struct$_Counter_$341_storage_ptr_$returns$__$bound_to$_t_struct$_Counter_$341_storage_ptr_$",
															"typeString": "function (struct Counters.Counter storage pointer)"
														}
													},
													"id": 540,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1347:29:8",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 541,
												"nodeType": "ExpressionStatement",
												"src": "1347:29:8"
											},
											{
												"expression": {
													"arguments": [
														{
															"arguments": [
																{
																	"id": 547,
																	"name": "this",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967268,
																	"src": "1424:4:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_contract$_SacredTemple_$560",
																		"typeString": "contract SacredTemple"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_contract$_SacredTemple_$560",
																		"typeString": "contract SacredTemple"
																	}
																],
																"id": 546,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "1416:7:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_$",
																	"typeString": "type(address)"
																},
																"typeName": {
																	"id": 545,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "1416:7:8",
																	"typeDescriptions": {}
																}
															},
															"id": 548,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "typeConversion",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "1416:13:8",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"expression": {
																"id": 549,
																"name": "msg",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 4294967281,
																"src": "1431:3:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_magic_message",
																	"typeString": "msg"
																}
															},
															"id": 550,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "sender",
															"nodeType": "MemberAccess",
															"src": "1431:10:8",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 551,
															"name": "tokenId",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 517,
															"src": "1443:7:8",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"expression": {
															"id": 542,
															"name": "_nftContract",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 437,
															"src": "1386:12:8",
															"typeDescriptions": {
																"typeIdentifier": "t_contract$_IERC721_$268",
																"typeString": "contract IERC721"
															}
														},
														"id": 544,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "safeTransferFrom",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 223,
														"src": "1386:29:8",
														"typeDescriptions": {
															"typeIdentifier": "t_function_external_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256) external"
														}
													},
													"id": 552,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1386:65:8",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 553,
												"nodeType": "ExpressionStatement",
												"src": "1386:65:8"
											}
										]
									},
									"functionSelector": "2e17de78",
									"id": 555,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"id": 520,
											"kind": "modifierInvocation",
											"modifierName": {
												"id": 519,
												"name": "nonReentrant",
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 151,
												"src": "1197:12:8"
											},
											"nodeType": "ModifierInvocation",
											"src": "1197:12:8"
										}
									],
									"name": "unstake",
									"nameLocation": "1172:7:8",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 518,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 517,
												"mutability": "mutable",
												"name": "tokenId",
												"nameLocation": "1188:7:8",
												"nodeType": "VariableDeclaration",
												"scope": 555,
												"src": "1180:15:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 516,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1180:7:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1179:17:8"
									},
									"returnParameters": {
										"id": 521,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1219:0:8"
									},
									"scope": 560,
									"src": "1163:295:8",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"body": {
										"id": 558,
										"nodeType": "Block",
										"src": "1491:75:8",
										"statements": []
									},
									"id": 559,
									"implemented": true,
									"kind": "receive",
									"modifiers": [],
									"name": "",
									"nameLocation": "-1:-1:-1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 556,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1471:2:8"
									},
									"returnParameters": {
										"id": 557,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1491:0:8"
									},
									"scope": 560,
									"src": "1464:102:8",
									"stateMutability": "payable",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 561,
							"src": "386:1182:8",
							"usedErrors": []
						}
					],
					"src": "32:1536:8"
				},
				"id": 8
			}
		}
	}
}